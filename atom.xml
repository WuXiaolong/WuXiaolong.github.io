<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>吴小龙同學</title>
  
  <subtitle>党要我帅，我不得不帅！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://wuxiaolong.me/"/>
  <updated>2017-11-17T13:11:36.000Z</updated>
  <id>http://wuxiaolong.me/</id>
  
  <author>
    <name>吴小龙同學</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python 3 极简教程 之 类、模块、错误和异常、文件</title>
    <link href="http://wuxiaolong.me/2017/11/15/ClassModuleErrorExecptionFile/"/>
    <id>http://wuxiaolong.me/2017/11/15/ClassModuleErrorExecptionFile/</id>
    <published>2017-11-15T15:20:08.000Z</published>
    <updated>2017-11-17T13:11:36.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="类"><a href="#类" class="headerlink" title="类"></a>类</h1><p>面向对象设计思想是 Class 抽象的，Instance 一个个具体的 Class，比如学生是抽象的 Class，而张三李四就是一个个具体学生。</p><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>Class 大驼峰命名法。仅供內部用的 Class，名称前会加一个底线。<br><a id="more"></a><br>类定义一般格式：<br><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>:</span></div><div class="line">    <span class="keyword">pass</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 或者</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Developer</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="keyword">pass</span></div></pre></td></tr></table></figure></p><p>object 表示该类是从哪个类继承下来的，object 是最终的父类。</p><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Developer</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="comment"># 定义类属性</span></div><div class="line">    name = <span class="string">'WuXiaolong'</span></div><div class="line">    site = <span class="string">'http://wuxiaolong.me/'</span></div><div class="line"></div><div class="line">    <span class="comment"># 变量名两个下划线开头，定义私有属性, 这样在类外部无法直接进行访问，类的私有方法也是如此</span></div><div class="line">    __sex = <span class="number">0</span></div><div class="line"></div><div class="line">    <span class="comment"># 定义构造方法</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, site, sex)</span>:</span></div><div class="line">        self.name = name</div><div class="line">        self.site = site</div><div class="line">        self.__sex = sex</div><div class="line"></div><div class="line">    <span class="comment"># 类方法</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_sex</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.__sex</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_sex</span><span class="params">(self, sex)</span>:</span></div><div class="line">        self.__sex = sex</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 调用：</span></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    <span class="comment"># 实例化类</span></div><div class="line">    developer = Developer(<span class="string">'wxl'</span>, <span class="string">'http://wuxiaolong.me/'</span>, <span class="number">1</span>)  <span class="comment"># 实例化成变量</span></div><div class="line">    print(developer.site, developer.get_sex())  <span class="comment"># 访问类的属性和方法</span></div></pre></td></tr></table></figure><p><strong>注意</strong>：以单下划线开头的表示的是 protected 类型的变量或方法，即保护类型，只能允许其本身与子类进行访问，不能用于 from module import *。</p><h2 id="单继承"><a href="#单继承" class="headerlink" title="单继承"></a>单继承</h2><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Developer</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="comment"># 定义类属性</span></div><div class="line">    name = <span class="string">'WuXiaolong'</span></div><div class="line">    site = <span class="string">'http://wuxiaolong.me/'</span></div><div class="line"></div><div class="line">    <span class="comment"># 变量名两个下划线开头，定义私有属性, 这样在类外部无法直接进行访问，类的私有方法也是如此</span></div><div class="line">    __sex = <span class="number">0</span></div><div class="line"></div><div class="line">    <span class="comment"># 定义构造方法</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, site, sex)</span>:</span></div><div class="line">        self.name = name</div><div class="line">        self.site = site</div><div class="line">        self.__sex = sex</div><div class="line"></div><div class="line">    <span class="comment"># 类方法</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_sex</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.__sex</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_sex</span><span class="params">(self, sex)</span>:</span></div><div class="line">        self.__sex = sex</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 单继承</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AndroidCoder</span><span class="params">(Developer)</span>:</span></div><div class="line">    coder_id = <span class="number">1024</span></div><div class="line"></div><div class="line">    <span class="comment"># 定义构造方法</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, site, sex, coder_id)</span>:</span></div><div class="line">        <span class="comment"># 调用父类构造方法</span></div><div class="line">        <span class="comment"># Developer.__init__(self, name, site, sex) # 老办法</span></div><div class="line">        super(AndroidCoder, self).__init__(name, site, sex)  <span class="comment"># 采用新式</span></div><div class="line">        self.coder_id = coder_id</div><div class="line"></div><div class="line">    <span class="comment"># 重写父类的方法</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_sex</span><span class="params">(self, sex)</span>:</span></div><div class="line">        self.__sex = sex</div><div class="line">        print(<span class="string">'这是个秘密'</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_sex</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.__sex</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 调用：</span></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    <span class="comment"># 单继承</span></div><div class="line">    androidCoder = AndroidCoder(<span class="string">'wxl'</span>, <span class="string">'http://wuxiaolong.me/'</span>, <span class="number">1</span>, <span class="number">520</span>)</div><div class="line">    print(androidCoder.set_sex(<span class="number">2</span>))</div></pre></td></tr></table></figure><p><strong>注意</strong>：super 继承，要求最顶层的父类一定要继承于object，这样就可以利用 super() 函数来调用父类的 init() 等函数。</p><h2 id="多继承"><a href="#多继承" class="headerlink" title="多继承"></a>多继承</h2><h3 id="B-继承-A，C-继承-B"><a href="#B-继承-A，C-继承-B" class="headerlink" title="B 继承 A，C 继承 B"></a>B 继承 A，C 继承 B</h3><p>以上面的单继承为例，AndroidCoder 继承了 Developer，现在让 PythonCoder 继承 AndroidCoder：<br><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="comment"># 多继承，B 继承 A，C 继承 B</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PythonCoder</span><span class="params">(AndroidCoder)</span>:</span></div><div class="line">    <span class="comment"># 定义构造方法</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, site, sex, coder_id)</span>:</span></div><div class="line">        <span class="comment"># 调用父类构造方法</span></div><div class="line">        super(PythonCoder, self).__init__(name, site, sex, coder_id)</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 调用：</span></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    pythonCoder = PythonCoder(<span class="string">'wxl'</span>, <span class="string">'http://wuxiaolong.me/'</span>, <span class="number">1</span>, <span class="number">1024</span>)</div><div class="line">    print(androidCoder.get_sex())</div></pre></td></tr></table></figure></p><p><strong>注意</strong>：多继承圆括号中父类的顺序，若是父类中有相同的方法名，而在子类使用时未指定，Python 会调用子类的；</p><h2 id="Z-继承-X、Y"><a href="#Z-继承-X、Y" class="headerlink" title="Z 继承 X、Y"></a>Z 继承 X、Y</h2><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">JavaCoder</span><span class="params">(object)</span>:</span></div><div class="line">    java_id = <span class="number">1</span></div><div class="line"></div><div class="line">    <span class="comment"># 定义构造方法</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, java_id)</span>:</span></div><div class="line">        self.java_id = java_id</div><div class="line">        print(<span class="string">'来自JavaCoder'</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">FullStackCoder</span><span class="params">(AndroidCoder, JavaCoder)</span>:</span></div><div class="line">    <span class="comment"># 定义构造方法</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, site, sex, coder_id)</span>:</span></div><div class="line">        <span class="comment"># 调用父类构造方法</span></div><div class="line">        super(FullStackCoder, self).__init__(name, site, sex, coder_id)</div><div class="line">        JavaCoder.__init__(self, coder_id)  <span class="comment"># 这里需要使用老办法</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 调用：</span></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line"></div><div class="line">    fullStackCoder = FullStackCoder(<span class="string">'wxl'</span>, <span class="string">'http://wuxiaolong.me/'</span>, <span class="number">1</span>, <span class="number">1024</span>)</div></pre></td></tr></table></figure><h1 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h1><p>Python 模块跟 Java 里包概念差不多，使用 import 语句导入。</p><h2 id="import-语句"><a href="#import-语句" class="headerlink" title="import 语句"></a>import 语句</h2><p>比如在类环节新建的文件名为 wxl_class.py，想在另个文件使用：<br><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="comment">## 导入模块</span></div><div class="line"><span class="keyword">import</span> wxl_class</div><div class="line"></div><div class="line">developer = wxl_class.Developer(<span class="string">'wxl'</span>, <span class="string">'http://wuxiaolong.me/'</span>, <span class="number">1</span>)  <span class="comment"># 实例变量</span></div><div class="line">print(developer.site)</div></pre></td></tr></table></figure></p><p>问题：发现打印了两次，原来 wxl_class.py 没有写 __name__ 属性。</p><h2 id="name-属性"><a href="#name-属性" class="headerlink" title="__name__ 属性"></a>__name__ 属性</h2><p>每个模块都有一个 __name__ 属性，当其值是’__main__’时，表明该模块自身在运行，因此在 wxl_class.py 加上 __main__就好了。<br><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    <span class="keyword">pass</span></div></pre></td></tr></table></figure></p><h2 id="from…import-语句"><a href="#from…import-语句" class="headerlink" title="from…import 语句"></a>from…import 语句</h2><p>从模块导入指定内容或者 * 代表全部：<br><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">from</span> wxl_def <span class="keyword">import</span> hello1</div><div class="line">m = hello1(<span class="number">666</span>, <span class="number">999</span>)</div></pre></td></tr></table></figure></p><h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><p>正常的函数和变量名是公开的（public），可以被直接引用；<br>以两个下划线开头，定义私有（private）， 这样在类外部无法直接进行访问；<br>以单下划线开头的表示的是 protected 类型的变量，即保护类型只能允许其本身与子类进行访问，不能用于 from module import *。</p><h2 id="标准库"><a href="#标准库" class="headerlink" title="标准库"></a>标准库</h2><p>Python 本身带着一些标准的模块库，比如 json 模块。<br>Python3 中可以使用 json 模块来对 JSON 数据进行编解码，它包含了两个函数：<br>json.dumps()： 对数据进行编码；<br>json.loads()： 对数据进行解码。<br>JSON 类型与 Python 类型对应关系：<br><img src="/images/Python3Learn10.png" alt=""><br><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> json</div><div class="line"></div><div class="line"><span class="comment"># Python 字典类型转换为 JSON 对象</span></div><div class="line">python_data = &#123;<span class="string">'id'</span>: <span class="number">1024</span>, <span class="string">'name'</span>: <span class="string">'wxl'</span>, <span class="string">'site'</span>: <span class="string">'http://wuxiaolong.me/'</span>&#125;</div><div class="line">print(json.dumps(python_data))  <span class="comment"># 打印：&#123;"id": 1024, "name": "wxl", "site": "http://wuxiaolong.me/"&#125;</span></div><div class="line"></div><div class="line"><span class="comment"># 将 JSON 对象转换为 Python 字典</span></div><div class="line">json_data = <span class="string">'&#123;"id": 1024, "name": "wxl", "site": "http://wuxiaolong.me/"&#125;'</span></div><div class="line">print(json.loads(json_data))  <span class="comment"># 打印：&#123;'id': 1024, 'name': 'wxl', 'site': 'http://wuxiaolong.me/'&#125;</span></div></pre></td></tr></table></figure></p><h2 id="第三方模块"><a href="#第三方模块" class="headerlink" title="第三方模块"></a>第三方模块</h2><p>在 Python 中，安装第三方模块，是通过包管理工具 pip 完成的。<br>1、安装 pip<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">sudo easy_install pip</div></pre></td></tr></table></figure></p><p>2、比如安装 PyMySQL 模块来连接数据库，Python 3.x：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">pip3 install PyMySQL</div></pre></td></tr></table></figure></p><p>返回：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">Collecting PyMySQL</div><div class="line">  Using cached PyMySQL-0.7.11-py2.py3-none-any.whl</div><div class="line">Installing collected packages: PyMySQL</div><div class="line">Successfully installed PyMySQL-0.7.11</div></pre></td></tr></table></figure></p><p>升级 pip 到最新版本<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">python -m pip install --upgrade pip</div></pre></td></tr></table></figure></p><h1 id="错误和异常"><a href="#错误和异常" class="headerlink" title="错误和异常"></a>错误和异常</h1><p>Java 中捕获异常是用的 try catch finally，Python 是用的 try…except…finally…：<br><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">try</span>:</div><div class="line">    name = <span class="string">'wxl'</span></div><div class="line">    print(int(name))</div><div class="line"><span class="keyword">except</span> ValueError <span class="keyword">as</span> e:  <span class="comment"># 所有的错误类型都继承自BaseException</span></div><div class="line">    print(e)</div><div class="line"><span class="keyword">finally</span>:</div><div class="line">    print(<span class="string">'finally'</span>)</div></pre></td></tr></table></figure></p><h1 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h1><p>Python 内置了读写文件的函数，一般分为 3 步：</p><p>1、open() 函数，打开一个文件对象；</p><p>2、调用 read() 方法读取文件内容；</p><p>3、调用 close() 方法关闭文件。</p><h2 id="写文件"><a href="#写文件" class="headerlink" title="写文件"></a>写文件</h2><p>桌面新建一个空白 Python3Learn.txt 文件：<br><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_file</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        f = open(<span class="string">'/Users/wuxiaolong/Desktop/Python3Learn.txt'</span>, <span class="string">'w'</span>)  <span class="comment"># 标示符'w'表示写</span></div><div class="line">        f.write(<span class="string">'Hello, Python'</span>)</div><div class="line">    <span class="keyword">except</span> BaseException <span class="keyword">as</span> e:</div><div class="line">        print(e)</div><div class="line"></div><div class="line">    <span class="keyword">finally</span>:</div><div class="line">        <span class="keyword">if</span> f:</div><div class="line">            f.close()</div></pre></td></tr></table></figure></p><h2 id="读文件"><a href="#读文件" class="headerlink" title="读文件"></a>读文件</h2><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_file</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        f = open(<span class="string">'/Users/wuxiaolong/Desktop/Python3Learn.txt'</span>, <span class="string">'r'</span>)  <span class="comment"># 标示符'r'表示读</span></div><div class="line">        <span class="comment"># print(f.read())  # read()会一次性读取文件的全部内容</span></div><div class="line">        print(f.readlines())  <span class="comment"># 每次读取一行内容，返回list</span></div><div class="line">    <span class="keyword">except</span> BaseException <span class="keyword">as</span> e:</div><div class="line">        print(e)</div><div class="line">    <span class="keyword">finally</span>:</div><div class="line">        <span class="keyword">if</span> f:</div><div class="line">            f.close()</div></pre></td></tr></table></figure><h2 id="读取二进制文件"><a href="#读取二进制文件" class="headerlink" title="读取二进制文件"></a>读取二进制文件</h2><p>比如图片、视频等等，桌面随便搞张 Python3Learn.png：<br><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_byte_file</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        f = open(<span class="string">'/Users/wuxiaolong/Desktop/Python3Learn.png'</span>, <span class="string">'rb'</span>)  <span class="comment"># 标示符'rb'表示读</span></div><div class="line">        print(f.read())  <span class="comment"># read()会一次性读取文件的全部内容</span></div><div class="line">        <span class="comment"># print(f.readlines())  # 每次读取一行内容，返回list</span></div><div class="line">    <span class="keyword">except</span> BaseException <span class="keyword">as</span> e:</div><div class="line">        print(e)</div><div class="line">    <span class="keyword">finally</span>:</div><div class="line">        <span class="keyword">if</span> f:</div><div class="line">            f.close()</div></pre></td></tr></table></figure></p><h2 id="字符编码"><a href="#字符编码" class="headerlink" title="字符编码"></a>字符编码</h2><p>encoding 参数：读取非 UTF-8 编码的文本文件；errors 参数：遇到编码错误后如何处理，最简单的方式是直接忽略。<br><figure class="highlight python"><table><tr><td class="code"><pre><div class="line">f = open(<span class="string">'/Users/wuxiaolong/Desktop/Python3Learn.txt'</span>, <span class="string">'r'</span>, encoding=<span class="string">'gbk'</span>, errors=<span class="string">'ignore'</span>)</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;类&quot;&gt;&lt;a href=&quot;#类&quot; class=&quot;headerlink&quot; title=&quot;类&quot;&gt;&lt;/a&gt;类&lt;/h1&gt;&lt;p&gt;面向对象设计思想是 Class 抽象的，Instance 一个个具体的 Class，比如学生是抽象的 Class，而张三李四就是一个个具体学生。&lt;/p&gt;
&lt;h2 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h2&gt;&lt;p&gt;Class 大驼峰命名法。仅供內部用的 Class，名称前会加一个底线。&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://wuxiaolong.me/categories/Python/"/>
    
    
      <category term="Python" scheme="http://wuxiaolong.me/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python 3 极简教程 之 条件控制、循环、函数</title>
    <link href="http://wuxiaolong.me/2017/11/13/IfForWhileDef/"/>
    <id>http://wuxiaolong.me/2017/11/13/IfForWhileDef/</id>
    <published>2017-11-13T15:20:08.000Z</published>
    <updated>2017-11-13T15:25:34.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="条件控制"><a href="#条件控制" class="headerlink" title="条件控制"></a>条件控制</h1><p>和 Java 差不多，不同点：</p><p>1、每个条件后面要使用冒号（:），表示接下来是满足条件后要执行的语句块；</p><p>2、使用缩进来划分语句块，相同缩进数的语句在一起组成一个语句块；</p><p>3、elif 代替了 else if；<br><a id="more"></a></p><p>4、在 Python 中没有 switch – case 语句。<br><figure class="highlight python"><table><tr><td class="code"><pre><div class="line">age = <span class="number">18</span></div><div class="line"><span class="keyword">if</span> age &lt;= <span class="number">2</span>:</div><div class="line">    print(<span class="string">'婴儿'</span>)</div><div class="line"><span class="keyword">elif</span> age &lt;= <span class="number">5</span>:  <span class="comment"># elif 代替了 else if</span></div><div class="line">    print(<span class="string">'幼儿'</span>)</div><div class="line"><span class="keyword">elif</span> age &lt;= <span class="number">12</span>:</div><div class="line">    print(<span class="string">'儿童'</span>)</div><div class="line"><span class="keyword">elif</span> age &lt;= <span class="number">18</span>:</div><div class="line">    print(<span class="string">'少年'</span>)</div><div class="line"><span class="keyword">elif</span> age &lt;= <span class="number">40</span>:</div><div class="line">    print(<span class="string">'青年'</span>)</div><div class="line"><span class="keyword">elif</span> age &lt;= <span class="number">59</span>:</div><div class="line">    print(<span class="string">'中年'</span>)</div><div class="line"><span class="keyword">else</span>:</div><div class="line">    print(<span class="string">'老年'</span>)</div></pre></td></tr></table></figure></p><h1 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h1><p>Python 中的循环语句有 for 和 while。</p><h2 id="for"><a href="#for" class="headerlink" title="for"></a>for</h2><figure class="highlight python"><table><tr><td class="code"><pre><div class="line">names = [<span class="string">'n1'</span>, <span class="string">'n2'</span>, <span class="string">'n3'</span>, <span class="string">'n4'</span>]</div><div class="line"><span class="keyword">for</span> n <span class="keyword">in</span> names:</div><div class="line">    print(n)</div></pre></td></tr></table></figure><h2 id="while"><a href="#while" class="headerlink" title="while"></a>while</h2><figure class="highlight python"><table><tr><td class="code"><pre><div class="line">m = <span class="number">5</span></div><div class="line">n = <span class="number">0</span></div><div class="line"><span class="keyword">while</span> n &lt;= <span class="number">5</span>:  <span class="comment"># 符合条件执行下面语句块</span></div><div class="line">    n += <span class="number">1</span></div><div class="line">    print(<span class="string">'循环次数：'</span> + str(n))</div><div class="line"><span class="keyword">else</span>:  <span class="comment"># 可以有 else</span></div><div class="line">    print(<span class="string">'不符合条件'</span>)</div></pre></td></tr></table></figure><p><strong>注意</strong>：Python 没有 do..while 循环</p><h2 id="break-和-continue-语句"><a href="#break-和-continue-语句" class="headerlink" title="break 和 continue 语句"></a>break 和 continue 语句</h2><p>和 Java 一样，break 跳出循环体；continue 中断此次循环，继续进行下一轮循环。</p><h2 id="pass-语句"><a href="#pass-语句" class="headerlink" title="pass 语句"></a>pass 语句</h2><p>pass 是空语句，不做任何事情，是为了保持程序结构的完整性。<br><figure class="highlight python"><table><tr><td class="code"><pre><div class="line">names = [<span class="string">'n1'</span>, <span class="string">'n2'</span>, <span class="string">'n3'</span>, <span class="string">'n4'</span>]</div><div class="line"><span class="keyword">for</span> m <span class="keyword">in</span> names:</div><div class="line">    <span class="keyword">pass</span>  <span class="comment"># 这里什么都不写，会报错</span></div></pre></td></tr></table></figure></p><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>函数定义使用 def 关键字，函数命名全部小写，可由下划线连接各个单词。</p><p>一般格式如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> 函数名（参数列表):</span></div><div class="line">    函数体</div></pre></td></tr></table></figure><p>实例<br><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></div><div class="line">    print(<span class="string">'Hello，Python3'</span>)</div><div class="line"></div><div class="line"></div><div class="line">hello()  <span class="comment"># 函数调用</span></div></pre></td></tr></table></figure></p><h2 id="必传参数"><a href="#必传参数" class="headerlink" title="必传参数"></a>必传参数</h2><p>必传参数必须以正确的顺序传入参数。<br><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello1</span><span class="params">(x, y)</span>:</span></div><div class="line">    print(x, y)</div><div class="line"></div><div class="line"></div><div class="line">hello1(<span class="string">'必传'</span>, <span class="string">'参数'</span>)</div></pre></td></tr></table></figure></p><h2 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h2><p>给参数添加默认值，默认参数可不传。<br><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello2</span><span class="params">(x, y, z=<span class="number">8</span>, name=<span class="string">'wxl'</span>)</span>:</span></div><div class="line">    print(x, y, z, name)</div><div class="line"></div><div class="line"></div><div class="line">hello2(<span class="number">666</span>, <span class="number">999</span>)  <span class="comment"># 相当于hello2(666, 999，8,'wxl')</span></div><div class="line">hello2(<span class="number">666</span>, <span class="number">999</span>, <span class="number">888</span>)  <span class="comment"># 打印：666 999 888 wxl</span></div><div class="line">hello2(<span class="number">666</span>, <span class="number">999</span>, <span class="number">888</span>, <span class="string">'WuXiaolong'</span>)  <span class="comment"># 打印：666 999 888 WuXiaolong</span></div><div class="line">hello2(<span class="number">666</span>, <span class="number">999</span>, name=<span class="string">'WuXiaodlong'</span>)  <span class="comment"># 不按顺序提供默认参数，打印：666 999 8 WuXiaodlong</span></div></pre></td></tr></table></figure></p><p><strong>注意</strong>：</p><p>1、必传参数必须在前，默认参数在后，否则 Python 解释器会报错；</p><p>2、不按顺序提供默认参数，需要把参数名写上。</p><h2 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h2><p>可变参数顾名思义参数个数不定，在参数前面加了一个 * 号，可变参数接收到的是一个 tuple，这样传入的参数个数是可变的，可以是 1 个、2 个、任意个，还可以是 0 个。<br><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello3</span><span class="params">(*y)</span>:</span></div><div class="line">    print(y)</div><div class="line"></div><div class="line"></div><div class="line">hello3(<span class="number">1</span>, <span class="string">'2'</span>, <span class="number">3.0</span>, <span class="keyword">True</span>)  <span class="comment"># 打印：(1, '2', 3.0, True)</span></div><div class="line">hello3(<span class="string">'wxl'</span>)  <span class="comment"># 打印：('wxl',)</span></div><div class="line">hello3()  <span class="comment"># 打印：()</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello4</span><span class="params">(x, *y)</span>:</span></div><div class="line">    print(x, y)</div><div class="line"></div><div class="line"></div><div class="line">hello4(<span class="number">1</span>, <span class="string">'2'</span>, <span class="number">3.0</span>, <span class="keyword">True</span>)  <span class="comment"># 打印：1 ('2', 3.0, True)</span></div><div class="line">hello4(<span class="string">'wxl'</span>)  <span class="comment"># 打印：wxl ()</span></div></pre></td></tr></table></figure></p><h2 id="关键字参数"><a href="#关键字参数" class="headerlink" title="关键字参数"></a>关键字参数</h2><p>与可变参数类似，关键字参数个数不定，在参数前面加了一个 ** 号，关键字参数接收到的是一个 dict。<br><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello5</span><span class="params">(x, **y)</span>:</span></div><div class="line">    print(x, y)</div><div class="line"></div><div class="line"></div><div class="line">hello5(<span class="number">1024</span>)  <span class="comment"># 打印：1024 &#123;&#125;</span></div><div class="line">hello5(<span class="number">1024</span>, name=<span class="string">'WuXiaolong'</span>, code=<span class="number">520</span>)  <span class="comment"># 打印：1024 &#123;'name': 'WuXiaolong', 'code': 520&#125;</span></div></pre></td></tr></table></figure></p><h2 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h2><p>使用 return 语句，可以将函数作为一个值赋值给指定变量。<br><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello6</span><span class="params">(x)</span>:</span></div><div class="line">    <span class="keyword">return</span> x</div><div class="line"></div><div class="line"></div><div class="line">print(hello6(<span class="number">666</span>))  <span class="comment"># 打印：666</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello7</span><span class="params">(x, y)</span>:</span></div><div class="line">    <span class="keyword">return</span> x, y</div><div class="line"></div><div class="line"></div><div class="line">m = hello7(<span class="number">666</span>, <span class="number">999</span>)</div><div class="line">type(m)</div><div class="line">print(type(m), m)  <span class="comment"># 打印：&lt;class 'tuple'&gt; (666, 999)</span></div></pre></td></tr></table></figure></p><h2 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h2><p>在函数里给一个变量赋值的时候，Python 自动认为这个变量是这个作用域的本地变量，并屏蔽作用域外的同名的变量，可以声明 global，表示在向一个全局变量赋值。<br><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="comment"># 全局变量</span></div><div class="line">z = <span class="number">1024</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello8</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">global</span> z</div><div class="line">    z = <span class="number">520</span></div><div class="line">    print(<span class="string">'z='</span> + str(z))  <span class="comment"># z=520</span></div><div class="line"></div><div class="line"></div><div class="line">hello8()</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;条件控制&quot;&gt;&lt;a href=&quot;#条件控制&quot; class=&quot;headerlink&quot; title=&quot;条件控制&quot;&gt;&lt;/a&gt;条件控制&lt;/h1&gt;&lt;p&gt;和 Java 差不多，不同点：&lt;/p&gt;
&lt;p&gt;1、每个条件后面要使用冒号（:），表示接下来是满足条件后要执行的语句块；&lt;/p&gt;
&lt;p&gt;2、使用缩进来划分语句块，相同缩进数的语句在一起组成一个语句块；&lt;/p&gt;
&lt;p&gt;3、elif 代替了 else if；&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://wuxiaolong.me/categories/Python/"/>
    
    
      <category term="Python" scheme="http://wuxiaolong.me/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Android Studio 3.0 升级一些坑</title>
    <link href="http://wuxiaolong.me/2017/11/04/AndroidStudio3/"/>
    <id>http://wuxiaolong.me/2017/11/04/AndroidStudio3/</id>
    <published>2017-11-04T15:40:07.000Z</published>
    <updated>2017-11-09T15:25:05.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前几天，期待已久的 Android Studio 3.0 release 版来临了，根据以往经验，每次大版本升级肯定要折腾一番，况且公司最近项目紧，因此我没有着急升级。10 月 31 号项目交了第一个版本，有同事离职了，我接了 NDK 的锅，到现在终于有空了，手痒痒点了升级。</p></blockquote><h1 id="Android-Studio-3-0"><a href="#Android-Studio-3-0" class="headerlink" title="Android Studio 3.0"></a>Android Studio 3.0</h1><p>官方更新日志：<a href="https://developer.android.google.cn/studio/releases/index.html" target="_blank" rel="noopener">https://developer.android.google.cn/studio/releases/index.html</a> ，我截图了，用的 Chrome 自带翻译功能，有些翻译不到位，但比我这半吊子英语看省事多了。<br><a id="more"></a><br><img src="http://7q5c2h.com1.z0.glb.clouddn.com/AndroidStudio3.0_8.png?imageView2/0/format/png/q/75|watermark/2/text/5ZC05bCP6b6Z5ZCM5a24/font/5a6L5L2T/fontsize/1200/fill/IzIxOTZGMw==/dissolve/100/gravity/SouthEast/dx/10/dy/10|imageslim" alt=""><br><img src="http://7q5c2h.com1.z0.glb.clouddn.com/AndroidStudio3.0_9.png?imageView2/0/format/png/q/75|watermark/2/text/5ZC05bCP6b6Z5ZCM5a24/font/5a6L5L2T/fontsize/1200/fill/IzIxOTZGMw==/dissolve/100/gravity/SouthEast/dx/10/dy/10|imageslim" alt=""><br><img src="http://7q5c2h.com1.z0.glb.clouddn.com/AndroidStudio3.0_10.png?imageView2/0/format/png/q/75|watermark/2/text/5ZC05bCP6b6Z5ZCM5a24/font/5a6L5L2T/fontsize/1200/fill/IzIxOTZGMw==/dissolve/100/gravity/SouthEast/dx/10/dy/10|imageslim" alt=""></p><h1 id="增量升级"><a href="#增量升级" class="headerlink" title="增量升级"></a>增量升级</h1><p>点击 Check for Updates 增量更新：<br><img src="http://7q5c2h.com1.z0.glb.clouddn.com/AndroidStudio3.0_1.png?imageView2/0/format/png/q/75|watermark/2/text/5ZC05bCP6b6Z5ZCM5a24/font/5a6L5L2T/fontsize/1200/fill/IzIxOTZGMw==/dissolve/100/gravity/SouthEast/dx/10/dy/10|imageslim" alt=""><br>下载完成，会提示更新 您将 Gradle 更新至 4.1：<br><img src="http://7q5c2h.com1.z0.glb.clouddn.com/AndroidStudio3.0_2.png?imageView2/0/format/png/q/75|watermark/2/text/5ZC05bCP6b6Z5ZCM5a24/font/5a6L5L2T/fontsize/1200/fill/IzIxOTZGMw==/dissolve/100/gravity/SouthEast/dx/10/dy/10|imageslim" alt=""><br>这里建议您对老项目先暂时点击 Don’t remind me on this project，以防有坑。当然我不入地狱谁入地狱，我点 Update，于是问题来了，一直处于下载中，不过，莫担心，我下载好了，公众号聊天界面回复「<strong>gradle-4.1-all</strong>」，下载 gradle-4.1-all.zip 文件，放到：<br><img src="http://7q5c2h.com1.z0.glb.clouddn.com/AndroidStudio3.0_3.png?imageView2/0/format/png/q/75|watermark/2/text/5ZC05bCP6b6Z5ZCM5a24/font/5a6L5L2T/fontsize/1200/fill/IzIxOTZGMw==/dissolve/100/gravity/SouthEast/dx/10/dy/10|imageslim" alt=""><br>重启 Android Studio。</p><p>gradle 目录：</p><p>Mac系统默认：/Users/(用户名)/.gradle</p><p>Windows系统默认：C:\Users(用户名).gradle</p><h1 id="修改旧项目"><a href="#修改旧项目" class="headerlink" title="修改旧项目"></a>修改旧项目</h1><p>首先我们新建项目，看看发生了哪些变化。</p><p>1、app／build.gradle<br><img src="http://7q5c2h.com1.z0.glb.clouddn.com/AndroidStudio3.0_4.png?imageView2/0/format/png/q/75|watermark/2/text/5ZC05bCP6b6Z5ZCM5a24/font/5a6L5L2T/fontsize/1200/fill/IzIxOTZGMw==/dissolve/100/gravity/SouthEast/dx/10/dy/10|imageslim" alt=""><br>buildToolsVersion：这里没有构建工具的版本 buildToolsVersion 属性了，Android Studio 3.0 默认情况下，插件会自动为您使用的 Android 插件版本使用最低要求的构建工具版本；</p><p>implementation：由以前的 compile 改成了 implementation。老版本的构建关键字 compile 被废弃了，而是改成了这两个：api：同 compile 作用一样，即认为本 module 将会泄露其依赖的 module 的内容；<br>implementation：本 module 不会通过自身的接口向外部暴露其依赖 module 的内容。</p><p>2、项目 build.gradle<br><img src="http://7q5c2h.com1.z0.glb.clouddn.com/AndroidStudio3.0_5.png?imageView2/0/format/png/q/75|watermark/2/text/5ZC05bCP6b6Z5ZCM5a24/font/5a6L5L2T/fontsize/1200/fill/IzIxOTZGMw==/dissolve/100/gravity/SouthEast/dx/10/dy/10|imageslim" alt=""><br>google()：Android Studio 3.0 现在默认使用 Google 的 Maven 存储库，而不是依赖于 Android SDK Manager 来获取 Android 支持库，Google Play 服务，Firebase 和其他依赖项的更新；</p><p>build.gradle：指定的是Gradle插件的版本，由之前的 2.3.3 改成了 3.0.0。</p><p>3、gradle-wrapper.properties<br>gradle-wrapper.properties 中配置的是的 Gradle 的版本。<br><img src="http://7q5c2h.com1.z0.glb.clouddn.com/AndroidStudio3.0_6.png?imageView2/0/format/png/q/75|watermark/2/text/5ZC05bCP6b6Z5ZCM5a24/font/5a6L5L2T/fontsize/1200/fill/IzIxOTZGMw==/dissolve/100/gravity/SouthEast/dx/10/dy/10|imageslim" alt=""><br>可以对老项目就以上几点进行修改。</p><h1 id="butterknife"><a href="#butterknife" class="headerlink" title="butterknife"></a>butterknife</h1><p>如果您在 lib 里使用了 butterknife，会遇到以下错误：<br><img src="http://7q5c2h.com1.z0.glb.clouddn.com/AndroidStudio3.0_7.png?imageView2/0/format/png/q/75|watermark/2/text/5ZC05bCP6b6Z5ZCM5a24/font/5a6L5L2T/fontsize/1200/fill/IzIxOTZGMw==/dissolve/100/gravity/SouthEast/dx/10/dy/10|imageslim" alt=""><br>网上说将 apply plugin: ‘com.jakewharton.butterknife’ 注掉，是能解决问题，但是对于 lib 里使用了 butterknife 依旧报 R2 找不到，还得放开 apply plugin: ‘com.jakewharton.butterknife’，最后我只能退而求其次，将 build.gradle 中 3.0.0 改成之前的 2.3.3，解决。</p><h1 id="打包自定义-APK-文件名"><a href="#打包自定义-APK-文件名" class="headerlink" title="打包自定义 APK 文件名"></a>打包自定义 APK 文件名</h1><p>打包时，要是自定义输出 APK 文件名可以这样做：<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">buildTypes &#123;</div><div class="line">    release &#123;</div><div class="line">        <span class="comment">//……</span></div><div class="line">        applicationVariants.all &#123; variant -&gt;</div><div class="line">            <span class="keyword">if</span> (variant.buildType.name == <span class="string">'release'</span>) &#123;</div><div class="line">                variant.outputs.each &#123; output -&gt;</div><div class="line">                    def outputFile = output.<span class="function">outputFile</span></div><div class="line">                    <span class="title">if</span> <span class="params">(outputFile != <span class="keyword">null</span> &amp;&amp; outputFile.name.endsWith(<span class="string">'.apk'</span>)</span>) &#123;</div><div class="line">                        def fileName = <span class="string">"Sample_v$&#123;defaultConfig.versionName&#125;_$&#123;releaseTime()&#125;_$&#123;variant.flavorName&#125;.apk"</span></div><div class="line">                        output.outputFile = <span class="keyword">new</span> File(outputFile.parent, fileName)</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>使用 Gradle Plugin 3.0.0 时报错：<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"></div><div class="line">Cannot set the value of read-only property <span class="string">'outputFile'</span> <span class="keyword">for</span> ApkVariantOutputImpl_Decorated&#123;apkData=Main&#123;type=MAIN, fullName=release, filters=[]&#125;&#125; of type com.android.build.gradle.internal.api.ApkVariantOutputImpl. Open File</div></pre></td></tr></table></figure></p><p>需要修改 each() 和 outputFile() 方法为 all() 和 outputFileName，输出文件写法也有点不一样：<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">buildTypes &#123;</div><div class="line">    release &#123;</div><div class="line">        <span class="comment">//……</span></div><div class="line">        applicationVariants.all &#123; variant -&gt;</div><div class="line">            <span class="keyword">if</span> (variant.buildType.name == <span class="string">'release'</span>) &#123;</div><div class="line">                variant.outputs.all &#123;</div><div class="line">                    def apkName = <span class="string">"gradle4android_v$&#123;variant.versionName&#125;"</span></div><div class="line">                    <span class="keyword">if</span> (!variant.flavorName.isEmpty()) &#123;</div><div class="line">                        apkName += <span class="string">"_$&#123;variant.flavorName&#125;"</span></div><div class="line">                    &#125;</div><div class="line">                    outputFileName = apkName + <span class="string">"_$&#123;releaseTime()&#125;.apk"</span></div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>输出的路径也有点不一样，根目录是 release，如果有渠道 xiaomi，那根目录是 xiaomi／release。</p><h1 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h1><p>build.gradle 和 gradle-wrapper.properties 区别，了解更多：<a href="https://developer.android.com/studio/releases/gradle-plugin.html" target="_blank" rel="noopener">https://developer.android.com/studio/releases/gradle-plugin.html</a></p><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>目前遇到这些坑，欢迎一起吐槽您在升级开发遇到的坑，这次升级又折腾了很久。另外如果需要gradle-4.1-all.zip 文件，公众号「吴小龙同学」聊天界面回复「<strong>gradle-4.1-all</strong>」获取。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;前几天，期待已久的 Android Studio 3.0 release 版来临了，根据以往经验，每次大版本升级肯定要折腾一番，况且公司最近项目紧，因此我没有着急升级。10 月 31 号项目交了第一个版本，有同事离职了，我接了 NDK 的锅，到现在终于有空了，手痒痒点了升级。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;Android-Studio-3-0&quot;&gt;&lt;a href=&quot;#Android-Studio-3-0&quot; class=&quot;headerlink&quot; title=&quot;Android Studio 3.0&quot;&gt;&lt;/a&gt;Android Studio 3.0&lt;/h1&gt;&lt;p&gt;官方更新日志：&lt;a href=&quot;https://developer.android.google.cn/studio/releases/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://developer.android.google.cn/studio/releases/index.html&lt;/a&gt; ，我截图了，用的 Chrome 自带翻译功能，有些翻译不到位，但比我这半吊子英语看省事多了。&lt;br&gt;
    
    </summary>
    
      <category term="Android Studio" scheme="http://wuxiaolong.me/categories/Android-Studio/"/>
    
    
      <category term="Android Studio 3.0" scheme="http://wuxiaolong.me/tags/Android-Studio-3-0/"/>
    
  </entry>
  
  <entry>
    <title>Python 3 极简教程 之 基本数据类型</title>
    <link href="http://wuxiaolong.me/2017/11/01/DataType/"/>
    <id>http://wuxiaolong.me/2017/11/01/DataType/</id>
    <published>2017-11-01T14:58:57.000Z</published>
    <updated>2017-11-04T14:40:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>Python3 中有六个标准的数据类型：</p><p>Number（数字）</p><p>String（字符串）</p><p>List（列表）</p><p>Tuple（元组）</p><p>Dictionary（字典）</p><p>Sets（集合）</p><a id="more"></a><h1 id="Number（数字）"><a href="#Number（数字）" class="headerlink" title="Number（数字）"></a>Number（数字）</h1><p>支持 int（整数类型）、float（浮点型）、bool（布尔）、complex（复数）。<br><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="comment"># 整型变量</span></div><div class="line">a = <span class="number">100</span></div><div class="line"><span class="comment"># 浮点型变量</span></div><div class="line">b = <span class="number">100.0</span></div><div class="line"><span class="comment"># 布尔，True 或 False</span></div><div class="line">c = <span class="keyword">True</span></div><div class="line">print(a, b, c)</div></pre></td></tr></table></figure></p><p>复数由实数部分和虚数部分构成，可以用 a + bj，或者 complex(a,b) 表示，复数的实部 a 和虚部 b 都是浮点型。</p><h2 id="数值运算"><a href="#数值运算" class="headerlink" title="数值运算"></a>数值运算</h2><p>有加（+）、减（-）、乘（*）、除（/）、取余（%）、乘方（**）：<br><figure class="highlight python"><table><tr><td class="code"><pre><div class="line">print(<span class="number">9</span> / <span class="number">4</span>)  <span class="comment"># 返回 2.25</span></div><div class="line">print(<span class="number">9</span> // <span class="number">4</span>)  <span class="comment"># 返回 2</span></div><div class="line">print(<span class="number">2</span> ** <span class="number">3</span>)  <span class="comment"># 返回 8</span></div></pre></td></tr></table></figure></p><p><strong>注意</strong>：数值的除法（/）总是返回一个浮点数，要获取整数使用（//）操作符。</p><h1 id="String（字符串）"><a href="#String（字符串）" class="headerlink" title="String（字符串）"></a>String（字符串）</h1><p>字符串用单引号 ‘ 或双引号 “ 括起来，同时使用反斜杠 \ 转义特殊字符。<br><figure class="highlight python"><table><tr><td class="code"><pre><div class="line">name = <span class="string">'I\'am WuXiaolong'</span></div><div class="line">print(name)  <span class="comment"># 输出字符串，打印：I'am WuXiaolong</span></div><div class="line">print(len(name))  <span class="comment"># 输出字符串长度</span></div><div class="line">print(name[<span class="number">0</span>])  <span class="comment"># 输出第 1 个字符</span></div><div class="line">print(name[<span class="number">0</span>: - <span class="number">1</span>])  <span class="comment"># 输出下标第 1 个位置到倒数第 2 位置的所有字符，打印：I'am WuXiaolon</span></div><div class="line">print(name[<span class="number">5</span>: <span class="number">15</span>])  <span class="comment"># 输出下标从第 5 个到第 14 个位置的字符，打印：WuXiaolong</span></div><div class="line">print(name[<span class="number">5</span>:])  <span class="comment"># 输出下标从第 5 个起后面所有的字符，打印：WuXiaolong</span></div><div class="line">print(name * <span class="number">2</span>)  <span class="comment"># 输出 2 次字符串</span></div><div class="line">print(<span class="string">'Hello,'</span> + name)  <span class="comment"># 字符串拼接，打印：Hello,I'am WuXiaolong</span></div><div class="line">print(<span class="string">'Wu'</span> <span class="keyword">in</span> name)  <span class="comment"># True</span></div><div class="line">print(name.find(<span class="string">'Wu'</span>))  <span class="comment"># 查找，打印 5，即返回开始的索引值，否则返回-1</span></div><div class="line">print(name.index(<span class="string">'Wu'</span>))  <span class="comment"># 查找，打印 5，即返回开始的索引值，没有则抛异常</span></div><div class="line">print(<span class="string">'Wu'</span> <span class="keyword">not</span> <span class="keyword">in</span> name)  <span class="comment"># False</span></div><div class="line">print(name.upper())  <span class="comment"># 全部转大写</span></div><div class="line">print(name.lower())  <span class="comment"># 全部转小写</span></div><div class="line">print(name.capitalize())  <span class="comment"># 把字符串的第一个字符大写</span></div><div class="line">print(name.isspace())  <span class="comment"># 是否包含空格</span></div><div class="line">print(name.replace(<span class="string">'Wu'</span>, <span class="string">''</span>))  <span class="comment"># 替换操作</span></div><div class="line">print(name.split(<span class="string">'m'</span>))  <span class="comment"># 分割操作，打印： ["I'a", ' WuXiaolong']</span></div><div class="line">print(name.strip())  <span class="comment"># 去掉字符串的左右空格</span></div><div class="line">print(name.lstrip())  <span class="comment"># 去掉字符串的左空格</span></div><div class="line">print(name.rstrip())  <span class="comment"># 去掉字符串的右空格</span></div></pre></td></tr></table></figure></p><h2 id="占位符"><a href="#占位符" class="headerlink" title="占位符"></a>占位符</h2><p>和 Java 一样，Python 也有占位符。</p><p>%d 表示那个位置是整数；%f 表示浮点数；%s 表示字符串。</p><figure class="highlight python"><table><tr><td class="code"><pre><div class="line">print(<span class="string">'Hello,%s'</span> % <span class="string">'Python'</span>)  </div><div class="line">print(<span class="string">'Hello,%d%s%.2f'</span> % (<span class="number">666</span>, <span class="string">'Python'</span>, <span class="number">9.99</span>)) <span class="comment"># 打印：Hello,666Python10.00</span></div></pre></td></tr></table></figure><p>其中：</p><p>1、 % 是转换开始的标志；</p><p>2、如果不止一个占位符，要写在一个圆括号内，中间用逗号（半角）隔开；</p><p>3、%.2f 代表两位小数，不是两位会四舍五入。</p><h2 id="字符串换行"><a href="#字符串换行" class="headerlink" title="字符串换行"></a>字符串换行</h2><p>1、三个单引号</p><p>Python 三个单引号允许一个字符串跨多行，字符串中可以包含换行符、制表符以及其他特殊字符。</p><p>2、三个双引号</p><p>3、\结尾</p><h1 id="List（列表）"><a href="#List（列表）" class="headerlink" title="List（列表）"></a>List（列表）</h1><p>列表是写在方括号 [] 之间、用逗号分隔开的元素列表，列表中元素的类型可以是不相同。如：<br><figure class="highlight python"><table><tr><td class="code"><pre><div class="line">s = [<span class="number">100</span>, <span class="number">100.0</span>, <span class="string">'wxl'</span>, <span class="keyword">True</span>, <span class="string">'I\'am WuXiaolong'</span>]</div></pre></td></tr></table></figure></p><h2 id="访问元素"><a href="#访问元素" class="headerlink" title="访问元素"></a>访问元素</h2><figure class="highlight python"><table><tr><td class="code"><pre><div class="line">print(s)  <span class="comment"># 输出 list，打印：[100, 100.0, 'wxl', True, "I'am WuXiaolong"]</span></div><div class="line">print(len(s))  <span class="comment"># 输出 list 长度</span></div><div class="line">print(s[<span class="number">0</span>])  <span class="comment"># 输出 list 第 1 个元素</span></div><div class="line">print(s[<span class="number">2</span>:<span class="number">5</span>])  <span class="comment"># 输出 lsit 下标从第 2 个到第 4个元素，打印：['wxl', True, "I'am WuXiaolong"]</span></div><div class="line">print(s[<span class="number">2</span>:])  <span class="comment"># 输出 lsit 下标从第 2 个起后面所有元素，打印：['wxl', True, "I'am WuXiaolong"]</span></div></pre></td></tr></table></figure><h2 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h2><figure class="highlight python"><table><tr><td class="code"><pre><div class="line">s1 = [<span class="keyword">False</span>]</div><div class="line">print(s + s1)  <span class="comment"># list 拼接，打印：[100, 100.0, 'wxl', True, "I'am WuXiaolong", False]</span></div><div class="line"></div><div class="line"><span class="comment"># 在列表末尾一次性追加另一个列表</span></div><div class="line">s.extend(s1)</div><div class="line">print(<span class="string">'extend 添加 = '</span> + str(s))  <span class="comment"># extend 添加 = [100, 100.0, 'wxl', True, "I'am WuXiaolong", False]</span></div><div class="line"></div><div class="line"><span class="comment"># append 方法拼接，列表末尾添加新的对象</span></div><div class="line">s.append(<span class="string">'测试拼接'</span>)</div><div class="line">print(<span class="string">'append 方法拼接 = '</span> + str(s))  <span class="comment"># append 方法拼接 = [100, 100.0, 'wxl', True, "I'am WuXiaolong", False, '测试拼接']</span></div><div class="line"></div><div class="line">s.insert(<span class="number">0</span>, <span class="string">'测试拼接'</span>)  <span class="comment"># 指定位置插入元素</span></div><div class="line">print(<span class="string">'insert 插入 = '</span> + str(s))  <span class="comment"># insert 插入 = ['测试拼接', 100, 100.0, 'wxl', True, "I'am WuXiaolong", False, '测试拼接']</span></div></pre></td></tr></table></figure><h2 id="更新元素"><a href="#更新元素" class="headerlink" title="更新元素"></a>更新元素</h2><figure class="highlight python"><table><tr><td class="code"><pre><div class="line">s[<span class="number">0</span>] = <span class="string">'1024'</span></div><div class="line">print(<span class="string">'更新元素 = '</span> + str(s))  <span class="comment"># 更新元素 = ['1024', 100, 100.0, 'wxl', True, "I'am WuXiaolong", False, '测试拼接']</span></div></pre></td></tr></table></figure><h2 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h2><figure class="highlight python"><table><tr><td class="code"><pre><div class="line">s.pop()  <span class="comment"># pop 方法删除，可指定位置，默认最后一个</span></div><div class="line">print(s)  <span class="comment"># 打印：['1024', 100, 100.0, 'wxl', True, "I'am WuXiaolong", False]</span></div><div class="line"></div><div class="line">s.pop(<span class="number">0</span>)  <span class="comment"># pop 指定位置删除</span></div><div class="line">print(s)  <span class="comment"># 打印：[[100, 100.0, 'wxl', True, "I'am WuXiaolong", False]</span></div><div class="line"></div><div class="line"><span class="keyword">del</span> s[<span class="number">0</span>]</div><div class="line">print(s)  <span class="comment"># 打印：[100.0, 'wxl', True, "I'am WuXiaolong", False]</span></div><div class="line"></div><div class="line"><span class="comment"># 移除列表中某个值的第一个匹配项，没有会抛异常</span></div><div class="line">s.remove(<span class="string">'wxl'</span>)</div><div class="line">print(s)</div></pre></td></tr></table></figure><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><figure class="highlight python"><table><tr><td class="code"><pre><div class="line">print(s * <span class="number">2</span>)  <span class="comment"># 打印两次</span></div><div class="line"></div><div class="line">s.reverse()  <span class="comment"># 反向列表中元素</span></div><div class="line">print(s)</div><div class="line"></div><div class="line">s2 = s.copy()  <span class="comment"># 复制</span></div><div class="line">print(s2)</div><div class="line"></div><div class="line">s.clear()  <span class="comment"># 清空</span></div><div class="line">print(s)</div></pre></td></tr></table></figure><h1 id="Tuple（元组）"><a href="#Tuple（元组）" class="headerlink" title="Tuple（元组）"></a>Tuple（元组）</h1><p>元组写在小括号 () 里，元素之间用逗号隔开，元组的元素不能修改，没有 append()，insert() 这样的方法。<br><figure class="highlight python"><table><tr><td class="code"><pre><div class="line">s = (<span class="number">100</span>, <span class="number">100.0</span>, <span class="string">'wxl'</span>, <span class="keyword">True</span>, <span class="string">'I\'am WuXiaolong'</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</div><div class="line"></div><div class="line">print(s)  <span class="comment"># 输出 list，打印：(100, 100.0, 'wxl', True, "I'am WuXiaolong", [1, 2, 3])</span></div><div class="line">print(s[<span class="number">0</span>])  <span class="comment"># 输出 list 第 1 个元素</span></div><div class="line">print(s[<span class="number">2</span>:<span class="number">5</span>])  <span class="comment"># 输出 lsit 下标从第 2 个到第 4个元素，打印：('wxl', True, "I'am WuXiaolong")</span></div><div class="line">print(s[<span class="number">2</span>:])  <span class="comment"># 输出 lsit 下标从第 2 个起后面所有元素，打印：('wxl', True, "I'am WuXiaolong", [1, 2, 3])</span></div><div class="line"></div><div class="line">s1 = (<span class="number">1</span>, <span class="keyword">False</span>)  <span class="comment"># 单独一个元素 bool 类型不能加入 Tuple</span></div><div class="line">print(s + s1)  <span class="comment"># list 拼接，打印：(100, 100.0, 'wxl', True, "I'am WuXiaolong", [1, 2, 3], 1, False)</span></div><div class="line">print(s * <span class="number">2</span>)  <span class="comment"># 打印两次</span></div><div class="line">print(len(s))  <span class="comment"># 输出 list 长度</span></div></pre></td></tr></table></figure></p><p>注意：虽然元组元素不能修改，但能把 list 当特殊元素。</p><h1 id="Dictionary（字典）"><a href="#Dictionary（字典）" class="headerlink" title="Dictionary（字典）"></a>Dictionary（字典）</h1><p>字典用 { } 标识或者 dict() 方法创建字典，它是一个无序的键 (key) : 值 (value) 对集合。键 (key) 必须使用不可变类型。在同一个字典中，键 (key) 必须是唯一的（不唯一，取最后一个值，不建议这样写）。{ } 是用来创建一个空字典。<br><figure class="highlight python"><table><tr><td class="code"><pre><div class="line">dic = &#123;<span class="string">'name'</span>: <span class="string">'WuXiaolong'</span>, <span class="string">'site'</span>: <span class="string">'http://wuxiaolong.me/'</span>, <span class="string">'code'</span>: <span class="number">1024</span>&#125;</div></pre></td></tr></table></figure></p><h2 id="访问元素-1"><a href="#访问元素-1" class="headerlink" title="访问元素"></a>访问元素</h2><figure class="highlight python"><table><tr><td class="code"><pre><div class="line">print(dic)</div><div class="line"></div><div class="line">print(dic[<span class="string">'site'</span>])  <span class="comment"># 输出键为 site 的值</span></div></pre></td></tr></table></figure><h2 id="修改元素"><a href="#修改元素" class="headerlink" title="修改元素"></a>修改元素</h2><figure class="highlight python"><table><tr><td class="code"><pre><div class="line">dic[<span class="string">'code'</span>] = <span class="number">520</span>  <span class="comment"># 修改元素</span></div><div class="line">print(dic[<span class="string">'code'</span>])  <span class="comment"># 打印：520</span></div></pre></td></tr></table></figure><h2 id="新增元素"><a href="#新增元素" class="headerlink" title="新增元素"></a>新增元素</h2><figure class="highlight python"><table><tr><td class="code"><pre><div class="line">dic[<span class="string">'id'</span>] = <span class="number">1314</span>  <span class="comment"># 新增元素</span></div><div class="line">print(dic)  <span class="comment"># 打印：&#123;'name': 'WuXiaolong', 'site': 'http://wuxiaolong.me/', 'code': 520, 'id': 1314&#125;</span></div></pre></td></tr></table></figure><h2 id="删除元素-1"><a href="#删除元素-1" class="headerlink" title="删除元素"></a>删除元素</h2><figure class="highlight python"><table><tr><td class="code"><pre><div class="line">dic.pop(<span class="string">'code'</span>)  <span class="comment"># 删除 code 键</span></div><div class="line">print(dic)  <span class="comment"># 打印：&#123;'name': 'WuXiaolong', 'site': 'http://wuxiaolong.me/', 'id': 1314&#125;</span></div><div class="line"></div><div class="line">dic.clear()  <span class="comment"># 清空</span></div><div class="line">print(dic)  <span class="comment"># 打印：&#123;&#125;</span></div><div class="line"><span class="comment"># del dic  # 删除</span></div></pre></td></tr></table></figure><h2 id="其他-1"><a href="#其他-1" class="headerlink" title="其他"></a>其他</h2><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="comment"># dict() 方法创建字典</span></div><div class="line">d = dict(id=<span class="number">1024</span>, name=<span class="string">'wxl'</span>, site=<span class="string">'http://wuxiaolong.me/'</span>)</div><div class="line">print(d)</div><div class="line">print(d.copy())  <span class="comment"># 浅复制</span></div><div class="line"></div><div class="line">print(dic.keys())  <span class="comment"># 输出所有键，打印：dict_keys(['name', 'site', 'code'])</span></div><div class="line">print(dic.values())  <span class="comment"># 输出所有值，打印：dict_values(['WuXiaolong', 'http://wuxiaolong.me/', 1024])</span></div></pre></td></tr></table></figure><h1 id="Sets（集合）"><a href="#Sets（集合）" class="headerlink" title="Sets（集合）"></a>Sets（集合）</h1><p>集合是一个无序不重复元素的序列，用大括号 { } 或者 set() 函数创建。创建一个空集合必须用 set()，因为 { } 是用来创建一个空字典。<br><figure class="highlight python"><table><tr><td class="code"><pre><div class="line">s = &#123;<span class="string">'name'</span>, <span class="string">'site'</span>, <span class="string">'code'</span>, <span class="number">1</span>, <span class="number">1</span>&#125;</div><div class="line">print(s)  <span class="comment"># 输出集合，重复的元素被自动去掉</span></div></pre></td></tr></table></figure></p><h1 id="空值"><a href="#空值" class="headerlink" title="空值"></a>空值</h1><p>空值是 Python 里一个特殊的值，用 None 表示。</p><h1 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h1><p>内置的一些函数可以进行数据类型之间的转换，如：</p><p>int(x)：将 x 转换为一个整数</p><p>float(x)：将 x 转换到一个浮点数</p><p>str(x)：将对象 x 转换为字符串</p><p>list(s)：将序列 s 转换为一个列表</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Python3 中有六个标准的数据类型：&lt;/p&gt;
&lt;p&gt;Number（数字）&lt;/p&gt;
&lt;p&gt;String（字符串）&lt;/p&gt;
&lt;p&gt;List（列表）&lt;/p&gt;
&lt;p&gt;Tuple（元组）&lt;/p&gt;
&lt;p&gt;Dictionary（字典）&lt;/p&gt;
&lt;p&gt;Sets（集合）&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://wuxiaolong.me/categories/Python/"/>
    
    
      <category term="Python" scheme="http://wuxiaolong.me/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python 3 极简教程 之 集成开发环境、变量</title>
    <link href="http://wuxiaolong.me/2017/10/20/PyCharmVariable/"/>
    <id>http://wuxiaolong.me/2017/10/20/PyCharmVariable/</id>
    <published>2017-10-20T14:58:57.000Z</published>
    <updated>2017-11-13T15:47:10.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="集成开发环境"><a href="#集成开发环境" class="headerlink" title="集成开发环境"></a>集成开发环境</h1><p>我用的是 PyCharm，PyCharm 和 Android Studio 同出自 JetBrains，是由 JetBrains 打造的一款 Python IDE，支持 macOS、 Windows、 Linux 系统。<br><a id="more"></a><br>PyCharm 功能 : 调试、语法高亮、Project管理、代码跳转、智能提示、自动完成、单元测试、版本控制……</p><p>PyCharm 下载地址 : <a href="https://www.jetbrains.com/pycharm/download/" target="_blank" rel="noopener">https://www.jetbrains.com/pycharm/download/</a></p><h2 id="PyCharm-预览"><a href="#PyCharm-预览" class="headerlink" title="PyCharm 预览"></a>PyCharm 预览</h2><p><img src="http://7q5c2h.com1.z0.glb.clouddn.com/Python3Learn5.png?imageView2/0/format/png/q/75|watermark/2/text/5ZC05bCP6b6Z5ZCM5a24/font/5a6L5L2T/fontsize/1200/fill/IzIxOTZGMw==/dissolve/100/gravity/SouthEast/dx/10/dy/10|imageslim" alt=""><br>PyCharm 和 Android Studio 用法差不多，上手很快的。</p><h2 id="设置-Python-版本"><a href="#设置-Python-版本" class="headerlink" title="设置 Python 版本"></a>设置 Python 版本</h2><p><img src="http://7q5c2h.com1.z0.glb.clouddn.com/Python3Learn3.png?imageView2/0/format/png/q/75|watermark/2/text/5ZC05bCP6b6Z5ZCM5a24/font/5a6L5L2T/fontsize/1200/fill/IzIxOTZGMw==/dissolve/100/gravity/SouthEast/dx/10/dy/10|imageslim" alt=""></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>用 PyCharm 够了。</p><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>Python 中的变量不需要声明类型，但每个变量在使用前都必须赋值，变量赋值后才会被创建。变量命名全部小写，可由下划线连接各个单词。</p><h2 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h2><h3 id="单个变量赋值"><a href="#单个变量赋值" class="headerlink" title="单个变量赋值"></a>单个变量赋值</h3><p>等号 = 用来给变量赋值。如：<br><!--more--><br><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="comment"># 整型变量</span></div><div class="line">a = <span class="number">100</span></div><div class="line"><span class="comment"># 浮点型变量</span></div><div class="line">b = <span class="number">100.0</span></div><div class="line"><span class="comment"># 字符串</span></div><div class="line">c = <span class="string">'wxl'</span></div><div class="line">print(a, b, c)</div></pre></td></tr></table></figure></p><p>返回：<br><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="number">100</span> <span class="number">100.0</span> wxl</div></pre></td></tr></table></figure></p><h3 id="多个变量赋值"><a href="#多个变量赋值" class="headerlink" title="多个变量赋值"></a>多个变量赋值</h3><h4 id="多重赋值"><a href="#多重赋值" class="headerlink" title="多重赋值"></a>多重赋值</h4><figure class="highlight python"><table><tr><td class="code"><pre><div class="line">a = b = c = <span class="number">100</span></div><div class="line">print(a, b, c)</div></pre></td></tr></table></figure><p>返回：<br><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="number">100</span> <span class="number">100</span> <span class="number">100</span></div></pre></td></tr></table></figure></p><p>整型对象，值都为 100，三个变量被分配到相同的内存空间上。</p><h4 id="多元赋值"><a href="#多元赋值" class="headerlink" title="多元赋值"></a>多元赋值</h4><figure class="highlight python"><table><tr><td class="code"><pre><div class="line">a, b, c = <span class="number">100</span>, <span class="number">100.0</span>, <span class="string">'wxl'</span></div><div class="line">print(a, b, c)</div></pre></td></tr></table></figure><p>返回：<br><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="number">100</span> <span class="number">100.0</span> wxl</div></pre></td></tr></table></figure></p><h3 id="查询变量类型"><a href="#查询变量类型" class="headerlink" title="查询变量类型"></a>查询变量类型</h3><p>1、type()<br>内置的 type() 函数可以用来查询变量所指的对象类型。<br><figure class="highlight python"><table><tr><td class="code"><pre><div class="line">a = <span class="number">1000</span></div><div class="line">print(type(a))</div></pre></td></tr></table></figure></p><p>返回：<br><figure class="highlight python"><table><tr><td class="code"><pre><div class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">int</span>'&gt;</span></div></pre></td></tr></table></figure></p><p>2、isinstance()<br><figure class="highlight python"><table><tr><td class="code"><pre><div class="line">a = <span class="number">1000</span></div><div class="line">print(isinstance(a, int))</div></pre></td></tr></table></figure></p><p>返回：<br><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">True</span></div></pre></td></tr></table></figure></p><p>3、两者区别<br>type() 不会认为子类是一种父类类型；<br>isinstance() 会认为子类是一种父类类型。</p><h2 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h2><p>Python 变量不需要声明类型，会根据您赋给的值推断。</p><h1 id="题外"><a href="#题外" class="headerlink" title="题外"></a>题外</h1><p><img src="http://7q5c2h.com1.z0.glb.clouddn.com/Python3Learn6.png?watermark/2/text/5ZC05bCP6b6Z5ZCM5a24/font/5qW35L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""><br><img src="http://7q5c2h.com1.z0.glb.clouddn.com/Python3Learn7.png?watermark/2/text/5ZC05bCP6b6Z5ZCM5a24/font/5qW35L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""><br>猜猜我在干嘛？</p><p>想必也猜到了，我在爬虫，哈哈，Python 一行代码搞定网络请求，解析网页也是很简单的！后续会将相关教程分享出来。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;集成开发环境&quot;&gt;&lt;a href=&quot;#集成开发环境&quot; class=&quot;headerlink&quot; title=&quot;集成开发环境&quot;&gt;&lt;/a&gt;集成开发环境&lt;/h1&gt;&lt;p&gt;我用的是 PyCharm，PyCharm 和 Android Studio 同出自 JetBrains，是由 JetBrains 打造的一款 Python IDE，支持 macOS、 Windows、 Linux 系统。&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://wuxiaolong.me/categories/Python/"/>
    
    
      <category term="Python" scheme="http://wuxiaolong.me/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python 3 极简教程 之 安装 Python、Hello World</title>
    <link href="http://wuxiaolong.me/2017/10/16/PythonInstallHelloWorld/"/>
    <id>http://wuxiaolong.me/2017/10/16/PythonInstallHelloWorld/</id>
    <published>2017-10-16T14:58:57.000Z</published>
    <updated>2017-11-18T06:25:02.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装-Python"><a href="#安装-Python" class="headerlink" title="安装 Python"></a>安装 Python</h1><p>Python 3.0 在设计的时候没有考虑向下兼容，我们的教程将以最新的 Python 3.6 版本为基础。</p><h2 id="Mac-安装-Python"><a href="#Mac-安装-Python" class="headerlink" title="Mac 安装 Python"></a>Mac 安装 Python</h2><p>Mac OS 已经自带了 Python，版本是 2.7，我们需要安装最新版本的 Python，有两个方法：<br><a id="more"></a><br>方法一：从 <a href="https://www.python.org/" target="_blank" rel="noopener">Python 官网</a>下载最新 Python 的安装程序，双击运行并安装；<br><img src="http://7q5c2h.com1.z0.glb.clouddn.com/Python3Learn2.png?imageView2/0/format/png/q/75|watermark/2/text/5ZC05bCP6b6Z5ZCM5a24/font/5a6L5L2T/fontsize/1200/fill/IzIxOTZGMw==/dissolve/100/gravity/SouthEast/dx/10/dy/10|imageslim" alt=""></p><p>方法二：如果安装了 <a href="https://brew.sh/" target="_blank" rel="noopener">HomeBrew</a>，直接通过命令 <code>brew install python3</code> 安装即可。</p><h2 id="Windows-安装-Python"><a href="#Windows-安装-Python" class="headerlink" title="Windows 安装 Python"></a>Windows 安装 Python</h2><p><img src="http://7q5c2h.com1.z0.glb.clouddn.com/Python3Learn9.png?imageView2/0/format/png/q/75|watermark/2/text/5ZC05bCP6b6Z5ZCM5a24/font/5a6L5L2T/fontsize/1200/fill/IzIxOTZGMw==/dissolve/100/gravity/SouthEast/dx/10/dy/10|imageslim" alt=""><br>特别要注意勾上 Add Python 3.6 to PATH，然后点“Install Now”或 “Customize installation”即可完成安装，不然需要手动配置环境变量。</p><h2 id="查看-python-版本"><a href="#查看-python-版本" class="headerlink" title="查看 python 版本"></a>查看 python 版本</h2><p>Windows 命令行：<br><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">python -V</div></pre></td></tr></table></figure></p><p>Mac 命令行：<br><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">python3 -V</div></pre></td></tr></table></figure></p><p><strong>说明</strong>：这里 python3 是为了区别 Mac 上的 2.x 和 3.x，Windows 不需要。    </p><p>返回：<br><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">Python 3.6.2</div></pre></td></tr></table></figure></p><p>到此 Python 安装完成。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>Python 安装：</p><p>1、官网</p><p>2、Mac 上用 Homebrew 命令</p><p>Python 第一行代码，让我们打印“Hello World”。</p><h1 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h1><h2 id="打开-Python-交互式环境"><a href="#打开-Python-交互式环境" class="headerlink" title="打开 Python 交互式环境"></a>打开 Python 交互式环境</h2><p>打开终端，然后运行命令行：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">python3</div></pre></td></tr></table></figure></p><p>返回：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">Python 3.6.2 (v3.6.2:5fd33b5926, Jul 16 2017, 20:11:06)</div><div class="line">[GCC 4.2.1 (Apple Inc. build 5666) (dot 3)] on darwin</div><div class="line">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure></p><p>这里<code>&gt;&gt;&gt;</code>说明在交互式环境，可以直接输入代码，按回车，既能得到代码执行结果。</p><h2 id="Hello-World-1"><a href="#Hello-World-1" class="headerlink" title="Hello World"></a>Hello World</h2><p>输入 “Hello World”：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&gt;&gt;&gt; print(&apos;Hello World&apos;)</div></pre></td></tr></table></figure></p><p>返回：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">Hello World</div></pre></td></tr></table></figure></p><p>还可以：</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&gt;&gt;&gt; print(&apos;你好&apos;, &apos;世界&apos;)</div></pre></td></tr></table></figure><p>返回：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">你好 世界</div></pre></td></tr></table></figure></p><h3 id="print"><a href="#print" class="headerlink" title="print"></a>print</h3><p>Python 提供了一个 print()，用于输出。<br><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="comment"># 单个输出</span></div><div class="line">print(<span class="string">'Hello World'</span>)</div><div class="line"></div><div class="line"><span class="comment"># 接收整型</span></div><div class="line">print(<span class="number">1</span> + <span class="number">3</span>) <span class="comment"># 会直接计算结果</span></div><div class="line"></div><div class="line"><span class="comment"># 接收多个</span></div><div class="line">print(<span class="string">'Hello'</span>, <span class="string">'World'</span>) <span class="comment"># 依次打印每个字符串，遇到逗号（,）会输出一个空格</span></div><div class="line"></div><div class="line"><span class="comment"># 占位符</span></div><div class="line">print(<span class="string">'I\'am %s'</span> % <span class="string">'WuXiaolong'</span>)</div></pre></td></tr></table></figure></p><h3 id="input"><a href="#input" class="headerlink" title="input"></a>input</h3><p>Python 提供了一个 input()，提示用户输入，返回字符串，并存放到一个变量里。<br><figure class="highlight python"><table><tr><td class="code"><pre><div class="line">name = input() <span class="comment"># 提示输入</span></div><div class="line">print(<span class="string">'你好，'</span>, name)</div><div class="line"></div><div class="line">name = input(<span class="string">"请输入名字："</span>) <span class="comment"># 提示请输入名字：</span></div><div class="line">print(<span class="string">'你好，'</span>, name)</div></pre></td></tr></table></figure></p><p><strong>注意</strong>：input 输入的是字符串类型。</p><h2 id="退出Python交互式环境"><a href="#退出Python交互式环境" class="headerlink" title="退出Python交互式环境"></a>退出Python交互式环境</h2><p>用 exit() 退出 Python。</p><h2 id="命令行模式"><a href="#命令行模式" class="headerlink" title="命令行模式"></a>命令行模式</h2><p>上面打印 “Hello World“ 代码并没有保存下来，我们可以新建一个文件 hello.py，写上 print(‘Hello World！’)，然后命令行：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">python3 /Users/wuxiaolong/Desktop/Python/hello.py</div></pre></td></tr></table></figure></p><p>或者进入 hello.py 目录下，运行命令：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">python3 hello.py</div></pre></td></tr></table></figure></p><p>依旧返回：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">Hello World！</div></pre></td></tr></table></figure></p><h2 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h2><p>直接在终端写 Python ，回车，既能得到结果，但不能保存，后来有 IDE 介绍。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;安装-Python&quot;&gt;&lt;a href=&quot;#安装-Python&quot; class=&quot;headerlink&quot; title=&quot;安装 Python&quot;&gt;&lt;/a&gt;安装 Python&lt;/h1&gt;&lt;p&gt;Python 3.0 在设计的时候没有考虑向下兼容，我们的教程将以最新的 Python 3.6 版本为基础。&lt;/p&gt;
&lt;h2 id=&quot;Mac-安装-Python&quot;&gt;&lt;a href=&quot;#Mac-安装-Python&quot; class=&quot;headerlink&quot; title=&quot;Mac 安装 Python&quot;&gt;&lt;/a&gt;Mac 安装 Python&lt;/h2&gt;&lt;p&gt;Mac OS 已经自带了 Python，版本是 2.7，我们需要安装最新版本的 Python，有两个方法：&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://wuxiaolong.me/categories/Python/"/>
    
    
      <category term="Python" scheme="http://wuxiaolong.me/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python 3 极简教程 之 开篇</title>
    <link href="http://wuxiaolong.me/2017/10/09/Python3Learn/"/>
    <id>http://wuxiaolong.me/2017/10/09/Python3Learn/</id>
    <published>2017-10-09T14:58:57.000Z</published>
    <updated>2017-11-13T15:06:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>人生苦短，我用 Python！</p><p>今天上班的第一天，大家的状态如何昵，是否有假期综合症昵。从《<a href="http://mp.weixin.qq.com/s/HZXOEkNSqz20T709czmdUw" target="_blank" rel="noopener">MySQL、Python 搞起</a>》，我已经开始自学 Python，主要参考廖雪峰廖老师的《<a href="https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000" target="_blank" rel="noopener">Python 3 教程</a>》，菜鸟教程网《<a href="http://www.runoob.com/python3/python3-tutorial.html" target="_blank" rel="noopener">Python 3 教程</a>》，W3Cschool《<a href="https://www.w3cschool.cn/python3/" target="_blank" rel="noopener">Python 3 教程</a>》，国庆 8 天假我也没有歇着，断断续续的学习，Python 大概算入门了。</p><a id="more"></a><h1 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h1><p>入门，会写接口。</p><h1 id="学习方法"><a href="#学习方法" class="headerlink" title="学习方法"></a>学习方法</h1><p>第一遍，将这些教程快速过一遍，有个大概了解；第二遍，跟着敲代码，加深印象，记笔记；第三遍，重新梳理，检查总结。</p><h1 id="成果展示"><a href="#成果展示" class="headerlink" title="成果展示"></a>成果展示</h1><p><img src="http://7q5c2h.com1.z0.glb.clouddn.com/Python3Learn1.png?imageView2/0/format/png/q/75|watermark/2/text/5ZC05bCP6b6Z5ZCM5a24/font/5a6L5L2T/fontsize/1200/fill/IzIxOTZGMw==/dissolve/100/gravity/SouthEast/dx/10/dy/10|imageslim" alt=""><br>接口请求方式包括常用的GET、POST、PUT、DELETE，数据是来自数据库。<br><img src="http://7q5c2h.com1.z0.glb.clouddn.com/Python3Learn4.png?imageView2/0/format/png/q/75|watermark/2/text/5ZC05bCP6b6Z5ZCM5a24/font/5a6L5L2T/fontsize/1200/fill/IzIxOTZGMw==/dissolve/100/gravity/SouthEast/dx/10/dy/10|imageslim" alt=""></p><p>这些学习笔记会陆续分享到我的小密圈，有兴趣进来，我们一起浪。学完这套教程，相当于师父领进门了，让您对 Python 有个大概了解，能写写小东西，之后得自己不断精进了。<br><img src="http://7q5c2h.com1.z0.glb.clouddn.com/zhishixingqiu.png" alt=""></p><h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><p>练习的 Sample 已经上传 GitHub，地址：<a href="https://github.com/WuXiaolong/Python3Learn" target="_blank" rel="noopener">https://github.com/WuXiaolong/Python3Learn</a></p><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>学海无涯，目前学到的东西还是只是 Python 冰山一角，以后学习的路上还任重道远。学习一个新的东西，最难的是不知道从何学起，现在有了点基础，以后的学习目的性更强，加油。</p><h1 id="题外"><a href="#题外" class="headerlink" title="题外"></a>题外</h1><p>关于我的域名 <a href="http://wuxiaolong.me/">http://wuxiaolong.me/</a> 马上要到期，今天干脆续了，本来还想等着发工资呢。这个域名 3 年前买的，300 多大洋，这次到期，如果不续费，那之前的博客都将 404 ，这肯定不是我愿意看到的，今天痛下 600 多大洋续费 5 年，心痛一秒…这几年，占用了我大量时间，无偿写了这么多博客，现在还搭进去 1000 多块大洋，不知道这样做值不值？</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;人生苦短，我用 Python！&lt;/p&gt;
&lt;p&gt;今天上班的第一天，大家的状态如何昵，是否有假期综合症昵。从《&lt;a href=&quot;http://mp.weixin.qq.com/s/HZXOEkNSqz20T709czmdUw&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;MySQL、Python 搞起&lt;/a&gt;》，我已经开始自学 Python，主要参考廖雪峰廖老师的《&lt;a href=&quot;https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Python 3 教程&lt;/a&gt;》，菜鸟教程网《&lt;a href=&quot;http://www.runoob.com/python3/python3-tutorial.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Python 3 教程&lt;/a&gt;》，W3Cschool《&lt;a href=&quot;https://www.w3cschool.cn/python3/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Python 3 教程&lt;/a&gt;》，国庆 8 天假我也没有歇着，断断续续的学习，Python 大概算入门了。&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://wuxiaolong.me/categories/Python/"/>
    
    
      <category term="Python" scheme="http://wuxiaolong.me/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>GitBook 使用</title>
    <link href="http://wuxiaolong.me/2017/09/05/GitBookGuide/"/>
    <id>http://wuxiaolong.me/2017/09/05/GitBookGuide/</id>
    <published>2017-09-05T02:54:17.000Z</published>
    <updated>2017-09-03T02:23:19.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>我想把我的博客总结归纳下，于是找到了 GitBook，多了一个写博客地方，我把它做为博客的备份。花了两三天学习了 GitBook，这里记录下。此教程基于 Mac，Windows 也差不多适用。</p></blockquote><h1 id="安装-Node-js"><a href="#安装-Node-js" class="headerlink" title="安装 Node.js"></a>安装 Node.js</h1><p>GitBook 是基于 Node.js 的命令行工具，下载安装 <a href="http://nodejs.org/" target="_blank" rel="noopener">Node.js</a>。<br><a id="more"></a><br>检测安装是否成功：</p><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ node -v</div><div class="line">v6.11.0</div></pre></td></tr></table></figure><h1 id="Gitbook-安装"><a href="#Gitbook-安装" class="headerlink" title="Gitbook 安装"></a>Gitbook 安装</h1><p>Gitbook 是用 npm 安装的，命令行：</p><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ npm install -g gitbook-cli</div></pre></td></tr></table></figure><p>检测安装是否成功：</p><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ gitbook -V</div><div class="line">CLI version: 2.3.2</div><div class="line">GitBook version: 3.2.3</div></pre></td></tr></table></figure><p>更新最新版本：</p><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ gitbook update</div></pre></td></tr></table></figure><p>卸载：</p><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ npm uninstall -g gitbook</div></pre></td></tr></table></figure><h1 id="GitBook-Editor"><a href="#GitBook-Editor" class="headerlink" title="GitBook Editor"></a>GitBook Editor</h1><p>官方编辑器，下载 <a href="https://www.gitbook.com/editor" target="_blank" rel="noopener">https://www.gitbook.com/editor</a> ，大概如图：</p><p><img src="http://7q5c2h.com1.z0.glb.clouddn.com/GitBook1.png?imageView2/0/format/png/q/75|watermark/2/text/5ZC05bCP6b6Z5ZCM5a24/font/5a6L5L2T/fontsize/1200/fill/IzIxOTZGMw==/dissolve/100/gravity/SouthEast/dx/10/dy/10|imageslim" alt="">  </p><p>关于 GitBook Editor 怎么使用和注册 GitBook 等步骤较简单，这里略。</p><h1 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h1><h2 id="book-json"><a href="#book-json" class="headerlink" title="book.json"></a>book.json</h2><p>新建一个 book.json 文件，可以配置网站信息、在 plugins 和 pluginsConfig 字段添加插件等。</p><p>插件命名方式为：</p><p>gitbook-plugin-X: 插件；</p><p>gitbook-theme-X: 主题。</p><p>可以在 <a href="https://www.npmjs.com/" target="_blank" rel="noopener">npmjs</a> 或 <a href="https://plugins.gitbook.com/" target="_blank" rel="noopener">GitBook 插件</a> 直接搜索插件或者主题。<br>book.json 内容大概如下：</p><figure class="highlight json"><table><tr><td class="code"><pre><div class="line">&#123;</div><div class="line"><span class="attr">"gitbook"</span>: <span class="string">"3.2.3"</span>,</div><div class="line"><span class="attr">"title"</span>: <span class="string">"吴小龙同學"</span>,</div><div class="line"><span class="attr">"description"</span>: <span class="string">"http://wuxiaolong.me/"</span>,</div><div class="line"><span class="attr">"author"</span>: <span class="string">"WuXiaolong"</span>,</div><div class="line"><span class="attr">"language"</span>: <span class="string">"zh-hans"</span>,</div><div class="line"><span class="attr">"links"</span>: &#123;</div><div class="line"><span class="attr">"sidebar"</span>: &#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line">&#125;,</div><div class="line"><span class="attr">"plugins"</span>: [<span class="string">"github"</span>,</div><div class="line"><span class="string">"donate"</span>,</div><div class="line"><span class="string">"splitter"</span>,</div><div class="line"><span class="string">"anchor-navigation-ex"</span>,</div><div class="line"><span class="string">"-sharing"</span>,</div><div class="line"><span class="string">"sharing-plus"</span>,</div><div class="line"><span class="string">"-highlight"</span>,</div><div class="line"><span class="string">"prism"</span></div><div class="line">],</div><div class="line"><span class="attr">"pluginsConfig"</span>: &#123;</div><div class="line"><span class="attr">"sharing"</span>: &#123;</div><div class="line"><span class="attr">"douban"</span>: <span class="literal">false</span>,</div><div class="line"><span class="attr">"facebook"</span>: <span class="literal">false</span>,</div><div class="line"><span class="attr">"google"</span>: <span class="literal">false</span>,</div><div class="line"><span class="attr">"hatenaBookmark"</span>: <span class="literal">false</span>,</div><div class="line"><span class="attr">"instapaper"</span>: <span class="literal">false</span>,</div><div class="line"><span class="attr">"line"</span>: <span class="literal">false</span>,</div><div class="line"><span class="attr">"linkedin"</span>: <span class="literal">false</span>,</div><div class="line"><span class="attr">"messenger"</span>: <span class="literal">false</span>,</div><div class="line"><span class="attr">"pocket"</span>: <span class="literal">false</span>,</div><div class="line"><span class="attr">"qq"</span>: <span class="literal">false</span>,</div><div class="line"><span class="attr">"qzone"</span>: <span class="literal">false</span>,</div><div class="line"><span class="attr">"stumbleupon"</span>: <span class="literal">false</span>,</div><div class="line"><span class="attr">"twitter"</span>: <span class="literal">false</span>,</div><div class="line"><span class="attr">"viber"</span>: <span class="literal">false</span>,</div><div class="line"><span class="attr">"vk"</span>: <span class="literal">false</span>,</div><div class="line"><span class="attr">"weibo"</span>: <span class="literal">false</span>,</div><div class="line"><span class="attr">"whatsapp"</span>: <span class="literal">false</span>,</div><div class="line"><span class="attr">"all"</span>: [</div><div class="line"><span class="string">"weibo"</span>,<span class="string">"qq"</span>,<span class="string">"qzone"</span>,<span class="string">"google"</span>,<span class="string">"douban"</span></div><div class="line">]</div><div class="line">&#125;,</div><div class="line"><span class="attr">"github"</span>: &#123;</div><div class="line"><span class="attr">"url"</span>: <span class="string">"https://github.com/WuXiaolong"</span></div><div class="line">&#125;,</div><div class="line"><span class="attr">"donate"</span>: &#123;</div><div class="line"><span class="attr">"wechat"</span>: <span class="string">"http://7q5c2h.com1.z0.glb.clouddn.com/wechatpay.JPG"</span>,</div><div class="line"><span class="attr">"title"</span>: <span class="string">""</span>,</div><div class="line"><span class="attr">"button"</span>: <span class="string">"赏"</span>,</div><div class="line"><span class="attr">"wechatText"</span>: <span class="string">"微信打赏"</span></div><div class="line">&#125;,</div><div class="line"><span class="attr">"anchor-navigation-ex"</span>: &#123;</div><div class="line"><span class="attr">"associatedWithSummary"</span>:<span class="literal">false</span>,</div><div class="line"><span class="attr">"showLevel"</span>:<span class="literal">true</span>,</div><div class="line"><span class="attr">"multipleH1"</span>: <span class="literal">true</span>,</div><div class="line"><span class="attr">"mode"</span>: <span class="string">"float"</span>,</div><div class="line"></div><div class="line"><span class="attr">"pageTop"</span>: &#123;</div><div class="line"><span class="attr">"showLevelIcon"</span>: <span class="literal">false</span>,</div><div class="line"><span class="attr">"level1Icon"</span>: <span class="string">"fa fa-hand-o-right"</span>,</div><div class="line"><span class="attr">"level2Icon"</span>: <span class="string">"fa fa-hand-o-right"</span>,</div><div class="line"><span class="attr">"level3Icon"</span>: <span class="string">"fa fa-hand-o-right"</span></div><div class="line">&#125;</div><div class="line">&#125;,</div><div class="line"><span class="attr">"theme-default"</span>: &#123;</div><div class="line"><span class="attr">"showLevel"</span>: <span class="literal">true</span></div><div class="line">&#125;,</div><div class="line"><span class="attr">"fontsettings"</span>: &#123;</div><div class="line"><span class="attr">"theme"</span>: <span class="string">"white"</span>,</div><div class="line"><span class="attr">"family"</span>: <span class="string">"serif"</span>,</div><div class="line"><span class="attr">"size"</span>: <span class="number">2</span></div><div class="line">&#125;,</div><div class="line"><span class="attr">"prism"</span>: &#123;</div><div class="line"><span class="attr">"css"</span>: [</div><div class="line"><span class="string">"prismjs/themes/prism-tomorrow.css"</span></div><div class="line">]</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>说明</strong>：</p><ul><li><a href="https://www.npmjs.com/package/gitbook-plugin-github" target="_blank" rel="noopener">github</a>：添加 GitHub 图标；</li><li><a href="https://www.npmjs.com/package/gitbook-plugin-donate" target="_blank" rel="noopener">Donate</a>：添加赞赏按钮；</li><li><a href="">splitter</a>：使侧边栏的宽度可以自由调节；</li><li><a href="">anchor-navigation-ex</a>：添加Toc到侧边悬浮导航以及回到顶部按钮；</li><li><a href="https://www.npmjs.com/package/gitbook-plugin-theme-default" target="_blank" rel="noopener">theme-default</a>：将 showLevel 设为 true， 就可以显示标题前面的数字索引，默认不显示。</li></ul><h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ gitbook install ./</div></pre></td></tr></table></figure><p>不要忘记这步，根目录 node_modules 文件下能看到安装那些插件。</p><p>或单独安装插件:</p><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ npm install gitbook-plugin-anchor-navigation-ex --save</div></pre></td></tr></table></figure><h2 id="默认插件"><a href="#默认插件" class="headerlink" title="默认插件"></a>默认插件</h2><p>GitBook 默认带有5个插件：</p><p>highlight</p><p>search</p><p><a href="https://www.npmjs.com/package/gitbook-plugin-sharing" target="_blank" rel="noopener">sharing</a></p><p><a href="https://www.npmjs.com/package/gitbook-plugin-fontsettings" target="_blank" rel="noopener">fontsettings</a></p><p>livereload</p><p>如果要去除自带的插件，可以在插件名称前面加 -：</p><figure class="highlight"><table><tr><td class="code"><pre><div class="line">"plugins": [</div><div class="line">"-search"</div><div class="line">]</div></pre></td></tr></table></figure><p>如果想配置直接在 pluginsConfig 配置。</p><h1 id="GitBook-输出"><a href="#GitBook-输出" class="headerlink" title="GitBook 输出"></a>GitBook 输出</h1><h2 id="本地预览"><a href="#本地预览" class="headerlink" title="本地预览"></a>本地预览</h2><p>进入你的 GitBook 书籍目录，右击 - 服务 - 新建位于文件夹位置的终端窗口，输入命令行：</p><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ gitbook serve</div></pre></td></tr></table></figure><p>然后浏览器打开 <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> 就能预览了，control + c 停止。</p><h2 id="输出静态网站"><a href="#输出静态网站" class="headerlink" title="输出静态网站"></a>输出静态网站</h2><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ gitbook build</div></pre></td></tr></table></figure><p>以上都会在书籍目录生成 _book，前者能实时预览。</p><h1 id="输出-PDF-文件"><a href="#输出-PDF-文件" class="headerlink" title="输出 PDF 文件"></a>输出 PDF 文件</h1><h2 id="下载-Calibre"><a href="#下载-Calibre" class="headerlink" title="下载 Calibre"></a>下载 Calibre</h2><p>生成 PDF 文件依赖于 ebook-convert，需要安装 <a href="https://calibre-ebook.com/" target="_blank" rel="noopener">Calibre</a>;</p><h2 id="配置-Calibre-环境变量"><a href="#配置-Calibre-环境变量" class="headerlink" title="配置 Calibre 环境变量"></a>配置 Calibre 环境变量</h2><p>如何配置环境变量参考<a href="http://wuxiaolong.me/2017/07/19/mac-adb-gradlew/">这里</a>，在 .bash_profile 文件加入：</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"># Calibre</div><div class="line">export PATH=/Applications/calibre.app/Contents/MacOS:$PATH</div></pre></td></tr></table></figure><p>更新刚配置的环境变量：</p><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ <span class="built_in">source</span> .bash_profile</div></pre></td></tr></table></figure><p>查看所有的配置路径：</p><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ <span class="built_in">echo</span> <span class="variable">$PATH</span></div></pre></td></tr></table></figure><h2 id="输出-PDF-文件-1"><a href="#输出-PDF-文件-1" class="headerlink" title="输出 PDF 文件"></a>输出 PDF 文件</h2><p>命令行：</p><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ gitbook pdf</div></pre></td></tr></table></figure><p>将在根目录下生成了 book.pdf 文件</p><h1 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h1><p><img src="http://7q5c2h.com1.z0.glb.clouddn.com/GitBook2.png?imageView2/0/format/png/q/75|watermark/2/text/5ZC05bCP6b6Z5ZCM5a24/font/5a6L5L2T/fontsize/1200/fill/IzIxOTZGMw==/dissolve/100/gravity/SouthEast/dx/10/dy/10|imageslim" alt=""><br>如图，GitBook Editor - Book - Repository Settings，设置需要上传的远程 git，可以是 GitBook，GitHub 等。</p><h1 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h1><h2 id="设置-GitBook-域名"><a href="#设置-GitBook-域名" class="headerlink" title="设置 GitBook 域名"></a>设置 GitBook 域名</h2><p>YourBook - SETTINGS - Domains，如图：</p><p><img src="http://7q5c2h.com1.z0.glb.clouddn.com/GitBook3.png?imageView2/0/format/png/q/75|watermark/2/text/5ZC05bCP6b6Z5ZCM5a24/font/5a6L5L2T/fontsize/1200/fill/IzIxOTZGMw==/dissolve/100/gravity/SouthEast/dx/10/dy/10|imageslim" alt=""></p><p>在 Domain for content 填入自己的域名，因为我已经 Github page 中设置了 Hexo 博客，因此这里用的子域名。</p><h2 id="配置-DNS"><a href="#配置-DNS" class="headerlink" title="配置 DNS"></a>配置 DNS</h2><p>DNS 之前用的<a href="https://www.dnspod.cn/" target="_blank" rel="noopener">dnspod</a>:</p><p><img src="http://7q5c2h.com1.z0.glb.clouddn.com/GitBook4.png?imageView2/0/format/png/q/75|watermark/2/text/5ZC05bCP6b6Z5ZCM5a24/font/5a6L5L2T/fontsize/1200/fill/IzIxOTZGMw==/dissolve/100/gravity/SouthEast/dx/10/dy/10|imageslim" alt=""></p><p>解析类型选择 CNAME，将域名指向一个域名，实现与被指向域名相同的访问效果，主机记录这里值为 book，也可以其他，这样解析后的二级域名为 book<br>.wuxiaolong.me；记录值填写服务商提供的域名，这里填写 www.gitbooks.io。</p><p>注：最后我还是删了，因为我的域名没有备案，微信会有「非微信官方网页」提示，蛋疼。</p><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>1、建议使用 GitBook Editor 在线编辑，我本地编辑老是崩溃，不知道是他们软件问题还是我电脑问题，在线编辑还有个好处，插件不用下载；</p><p>2、遗留两个问题没有解决，如图：</p><p><img src="http://7q5c2h.com1.z0.glb.clouddn.com/GitBook5.png?imageView2/0/format/png/q/75|watermark/2/text/5ZC05bCP6b6Z5ZCM5a24/font/5a6L5L2T/fontsize/1200/fill/IzIxOTZGMw==/dissolve/100/gravity/SouthEast/dx/10/dy/10|imageslim" alt=""></p><p>第一问题：这里是自动生成的，我能改成其他地址吗？</p><p>第二问题：发现没，英文全是大写，能写什么就显示什么吗？</p><p>望知道的小伙伴告知下，多谢！</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://toolchain.gitbook.com/" target="_blank" rel="noopener">GitBook Document</a></li><li><a href="http://www.baidusdu.com/2015/12/14/Mac-下-GitBook-的安装与使用/" target="_blank" rel="noopener">Mac 下 GitBook 的安装与使用</a></li><li><a href="http://gitbook.zhangjikai.com/" target="_blank" rel="noopener">gitbook-use</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;我想把我的博客总结归纳下，于是找到了 GitBook，多了一个写博客地方，我把它做为博客的备份。花了两三天学习了 GitBook，这里记录下。此教程基于 Mac，Windows 也差不多适用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;安装-Node-js&quot;&gt;&lt;a href=&quot;#安装-Node-js&quot; class=&quot;headerlink&quot; title=&quot;安装 Node.js&quot;&gt;&lt;/a&gt;安装 Node.js&lt;/h1&gt;&lt;p&gt;GitBook 是基于 Node.js 的命令行工具，下载安装 &lt;a href=&quot;http://nodejs.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Node.js&lt;/a&gt;。&lt;br&gt;
    
    </summary>
    
      <category term="GitBook" scheme="http://wuxiaolong.me/categories/GitBook/"/>
    
    
      <category term="GitBook" scheme="http://wuxiaolong.me/tags/GitBook/"/>
    
  </entry>
  
  <entry>
    <title>Android 轮播图从 0 到 1</title>
    <link href="http://wuxiaolong.me/2017/08/27/banner/"/>
    <id>http://wuxiaolong.me/2017/08/27/banner/</id>
    <published>2017-08-27T12:48:07.000Z</published>
    <updated>2017-09-13T07:12:07.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="漏洞百出"><a href="#漏洞百出" class="headerlink" title="漏洞百出"></a>漏洞百出</h1><p>轮播图是 Android 常用功能之一，效果大概是这样的：<br><a id="more"></a><br><img src="http://7q5c2h.com1.z0.glb.clouddn.com/banner.png?imageView2/0/format/png/q/75|watermark/2/text/5ZC05bCP6b6Z5ZCM5a24/font/5a6L5L2T/fontsize/1200/fill/IzIxOTZGMw==/dissolve/100/gravity/SouthEast/dx/10/dy/10|imageslim" alt=""></p><p>之前我封装写了一个，基本达到了要求，是继承了 Fragment（当时脑袋肯定锈掉了），里面 Viewpager add Fragment，这次项目多处有轮播图，发现之前封装的不够用，简直漏洞百出：<br>1、比如底部 point 的位置，之前固定在中间，现在可能要放在右下角，point 最好也能动态改图片；<br>2、现在项目跟微信一样，底部 tab 切换，中间是 Fragment 替换，发现轮播图有问题，Fragment A 循环的 point 的 positoin 居然影响到了 Fragment B，照理，这是两个 BannerFragment，不会影响的啊，报以下错误：<br><figure class="highlight"><table><tr><td class="code"><pre><div class="line">java.lang.IllegalStateException: The application's PagerAdapter changed the adapter's contents without calling PagerAdapter#notifyDataSetChanged!</div></pre></td></tr></table></figure></p><p>经过排查，找到了原因，因为 Viewpager add Fragment 我全部放在一个类，因此：<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Object&gt; bannerList = <span class="keyword">new</span> ArrayList&lt;&gt;();</div></pre></td></tr></table></figure></p><p>这里 static 坏事了，之前一个 banner 没有暴露出来。<br>3、继承了 Fragment，引用比较麻烦，Fragment 有两者引用方法，xml 和代码，两者方式 addData 却报错；<br>4、banner 没有写点击回调。</p><h1 id="再次封装"><a href="#再次封装" class="headerlink" title="再次封装"></a>再次封装</h1><p>综合以上问题，我进行了优化，继承 LinearLayout，当一个控件来引用，省去不必要的麻烦，底部 point 的位置可以设置：<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">pointLayout.setGravity(bannerPointGravity);</div></pre></td></tr></table></figure></p><p>另外自定义了属性，动态设置 point 大小和图片，轮播图循环时间，也能代码设置，完整代码示例：<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by WuXiaolong on 2017/8/24.</div><div class="line"> * 个人博客：http：//wuxiaolong.me</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BannerLayout</span> <span class="keyword">extends</span> <span class="title">LinearLayout</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> ViewPager bannerViewPager;</div><div class="line">    <span class="keyword">private</span> LinearLayout bannerPointLayout;</div><div class="line">    <span class="keyword">private</span> ScheduledExecutorService scheduler;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mPosition = <span class="number">0</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mBannerCount = <span class="number">1</span>;</div><div class="line">    <span class="keyword">private</span> Context context;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> bannerPointSize;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> bannerPointGravity;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> bannerPointDrawableSelected, bannerPointDrawableUnselected;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> bannerDelaySecond;</div><div class="line">    <span class="keyword">private</span> OnBannerClickListener onBannerClickListener;</div><div class="line">    <span class="keyword">private</span> Handler handler;</div><div class="line">    <span class="keyword">private</span> Runnable runnable;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BannerLayout</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>(context, <span class="keyword">null</span>);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BannerLayout</span><span class="params">(Context context, @Nullable AttributeSet attrs)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>(context, attrs, <span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BannerLayout</span><span class="params">(Context context, @Nullable AttributeSet attrs, <span class="keyword">int</span> defStyleAttr)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs, defStyleAttr);</div><div class="line">        initView(context, attrs);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initView</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.context = context;</div><div class="line"></div><div class="line">        TypedArray typedArray = context.obtainStyledAttributes(attrs, R.styleable.BannerLayout);</div><div class="line">        bannerPointSize = typedArray.getDimensionPixelSize(R.styleable.BannerLayout_bannerPointSize, <span class="number">10</span>);</div><div class="line">        bannerPointGravity = typedArray.getInt(R.styleable.BannerLayout_bannerPointGravity, Gravity.CENTER);</div><div class="line">        bannerDelaySecond = typedArray.getInt(R.styleable.BannerLayout_bannerDelaySecond, <span class="number">5</span>);</div><div class="line">        bannerPointDrawableSelected = typedArray.getResourceId(R.styleable.BannerLayout_bannerPointDrawableSelected, R.mipmap.point01);</div><div class="line">        bannerPointDrawableUnselected = typedArray.getResourceId(R.styleable.BannerLayout_bannerPointDrawableUnselected, R.mipmap.point02);</div><div class="line">        typedArray.recycle();</div><div class="line">        View view = View.inflate(context, R.layout.custom_banner_layout, <span class="keyword">null</span>);</div><div class="line">        addView(view);</div><div class="line">        bannerViewPager = (ViewPager) view.findViewById(R.id.bannerViewPager);</div><div class="line">        bannerPointLayout = (LinearLayout) view.findViewById(R.id.bannerPointLayout);</div><div class="line">        bannerPointLayout.setGravity(bannerPointGravity);</div><div class="line">        bannerViewPager.addOnPageChangeListener(<span class="keyword">new</span> ViewPager.OnPageChangeListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageScrolled</span><span class="params">(<span class="keyword">int</span> position, <span class="keyword">float</span> positionOffset, <span class="keyword">int</span> positionOffsetPixels)</span> </span>&#123;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageSelected</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">                addPointLayout(position);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageScrollStateChanged</span><span class="params">(<span class="keyword">int</span> state)</span> </span>&#123;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">(List&lt;Object&gt; bannerList)</span> </span>&#123;</div><div class="line">        handler = <span class="keyword">new</span> Handler();</div><div class="line">        bannerShutdown();</div><div class="line">        mBannerCount = bannerList.size();</div><div class="line">        BannerPagerAdapter bannerPagerAdapter = <span class="keyword">new</span> BannerPagerAdapter(context, bannerList);</div><div class="line">        bannerViewPager.setAdapter(bannerPagerAdapter);</div><div class="line"></div><div class="line">        addPointLayout(<span class="number">0</span>);</div><div class="line">        startScheduler();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addPointLayout</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line"></div><div class="line">        bannerPointLayout.removeAllViews();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mBannerCount; i++) &#123;</div><div class="line">            ImageView imageView = <span class="keyword">new</span> ImageView(context);</div><div class="line">            LayoutParams layoutParams = <span class="keyword">new</span> LayoutParams(bannerPointSize, bannerPointSize);</div><div class="line">            layoutParams.setMargins(<span class="number">10</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line">            imageView.setLayoutParams(layoutParams);</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (position == i) &#123;</div><div class="line">                imageView.setImageResource(bannerPointDrawableSelected);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                imageView.setImageResource(bannerPointDrawableUnselected);</div><div class="line">            &#125;</div><div class="line">            bannerPointLayout.addView(imageView);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">startScheduler</span><span class="params">()</span> </span>&#123;</div><div class="line">        runnable = <span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                mPosition = bannerViewPager.getCurrentItem();</div><div class="line">                <span class="keyword">if</span> (mPosition &lt; mBannerCount - <span class="number">1</span>) &#123;</div><div class="line">                    mPosition++;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    mPosition = <span class="number">0</span>;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                bannerViewPager.setCurrentItem(mPosition);</div><div class="line">                handler.postDelayed(<span class="keyword">this</span>, bannerDelaySecond * <span class="number">1000</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">        handler.postDelayed(runnable, bannerDelaySecond * <span class="number">1000</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bannerShutdown</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (handler != <span class="keyword">null</span> &amp;&amp; runnable != <span class="keyword">null</span>)</div><div class="line">            handler.removeCallbacks(runnable);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">BannerPagerAdapter</span> <span class="keyword">extends</span> <span class="title">PagerAdapter</span> </span>&#123;</div><div class="line">        <span class="keyword">private</span> List&lt;Object&gt; bannerList = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        <span class="keyword">private</span> Context context;</div><div class="line"></div><div class="line">        BannerPagerAdapter(Context context, List&lt;Object&gt; bannerList) &#123;</div><div class="line">            <span class="keyword">this</span>.context = context;</div><div class="line">            <span class="keyword">this</span>.bannerList.clear();</div><div class="line">            <span class="keyword">this</span>.bannerList.addAll(bannerList);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> bannerList.size();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isViewFromObject</span><span class="params">(View view, Object object)</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> view == object;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> Object <span class="title">instantiateItem</span><span class="params">(ViewGroup container, <span class="keyword">final</span> <span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">            ViewGroup.LayoutParams layoutParams = <span class="keyword">new</span> ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);</div><div class="line">            ImageView imageView = <span class="keyword">new</span> ImageView(context);</div><div class="line">            imageView.setScaleType(ImageView.ScaleType.CENTER_CROP);</div><div class="line">            Object object = bannerList.get(position);</div><div class="line">            ImageLoaderUtil.load(context, object, R.mipmap.horizontal_default, imageView);</div><div class="line">            imageView.setOnClickListener(<span class="keyword">new</span> OnClickListener() &#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">                    <span class="keyword">if</span> (onBannerClickListener != <span class="keyword">null</span>) &#123;</div><div class="line">                        onBannerClickListener.onBannerClick(position);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">            container.addView(imageView, layoutParams);</div><div class="line">            <span class="keyword">return</span> imageView;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroyItem</span><span class="params">(ViewGroup container, <span class="keyword">int</span> position, Object object)</span> </span>&#123;</div><div class="line">            container.removeView((View) object);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OnBannerClickListener</span> </span>&#123;</div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">onBannerClick</span><span class="params">(<span class="keyword">int</span> position)</span></span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">dp2px</span><span class="params">(<span class="keyword">float</span> var0)</span> </span>&#123;</div><div class="line">        <span class="keyword">float</span> var1 = context.getResources().getDisplayMetrics().density;</div><div class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>) (var0 * var1 + <span class="number">0.5F</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> BannerLayout <span class="title">setBannerPointSize</span><span class="params">(<span class="keyword">int</span> bannerPointSize)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.bannerPointSize = dp2px(bannerPointSize);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> BannerLayout <span class="title">setBannerPointGravity</span><span class="params">(<span class="keyword">int</span> bannerPointGravity)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.bannerPointGravity = bannerPointGravity;</div><div class="line">        bannerPointLayout.setGravity(bannerPointGravity);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> BannerLayout <span class="title">setBannerPointDrawableSelected</span><span class="params">(<span class="keyword">int</span> bannerPointDrawableSelected)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.bannerPointDrawableSelected = bannerPointDrawableSelected;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> BannerLayout <span class="title">setBannerPointDrawableUnselected</span><span class="params">(<span class="keyword">int</span> bannerPointDrawableUnselected)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.bannerPointDrawableUnselected = bannerPointDrawableUnselected;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> BannerLayout <span class="title">setBannerDelaySecond</span><span class="params">(<span class="keyword">int</span> bannerDelaySecond)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.bannerDelaySecond = bannerDelaySecond;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> BannerLayout <span class="title">setOnBannerClickListener</span><span class="params">(OnBannerClickListener onBannerClickListener)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.onBannerClickListener = onBannerClickListener;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>其中自定义属性的attrs.xml：<br><figure class="highlight xml"><table><tr><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">declare-styleable</span> <span class="attr">name</span>=<span class="string">"BannerLayout"</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!--轮播图点的大小--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"bannerPointSize"</span> <span class="attr">format</span>=<span class="string">"dimension"</span> /&gt;</span></div><div class="line">        <span class="comment">&lt;!--轮播图点的位置，分别有左中右--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"bannerPointGravity"</span> <span class="attr">format</span>=<span class="string">"enum"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">enum</span> <span class="attr">name</span>=<span class="string">"left"</span> <span class="attr">value</span>=<span class="string">"3"</span> /&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">enum</span> <span class="attr">name</span>=<span class="string">"center"</span> <span class="attr">value</span>=<span class="string">"17"</span> /&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">enum</span> <span class="attr">name</span>=<span class="string">"right"</span> <span class="attr">value</span>=<span class="string">"5"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">attr</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!--轮播图点选中的图片--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"bannerPointDrawableSelected"</span> <span class="attr">format</span>=<span class="string">"reference"</span> /&gt;</span></div><div class="line">        <span class="comment">&lt;!--轮播图点未选中的图片--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"bannerPointDrawableUnselected"</span> <span class="attr">format</span>=<span class="string">"reference"</span> /&gt;</span></div><div class="line">        <span class="comment">&lt;!--轮播图循环时间，单位秒--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"bannerDelaySecond"</span> <span class="attr">format</span>=<span class="string">"integer"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">declare-styleable</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></div></pre></td></tr></table></figure></p><h1 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h1><p>xml<br><figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">com.wuxiaolong.bannersample.BannerLayout</span></span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/bannerView"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"198dp"</span></div><div class="line">    <span class="attr">app:bannerDelaySecond</span>=<span class="string">"3"</span></div><div class="line">    <span class="attr">app:bannerPointDrawableSelected</span>=<span class="string">"@drawable/gray_radius"</span></div><div class="line">    <span class="attr">app:bannerPointDrawableUnselected</span>=<span class="string">"@drawable/white_radius"</span></div><div class="line">    <span class="attr">app:bannerPointGravity</span>=<span class="string">"right"</span></div><div class="line">    <span class="attr">app:bannerPointSize</span>=<span class="string">"10dp"</span> /&gt;</div></pre></td></tr></table></figure></p><p>调用：<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> BannerLayout bannerView;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        bannerView = (BannerLayout) findViewById(R.id.bannerView);</div><div class="line">        List&lt;Object&gt; bannerList = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        bannerList.add(R.mipmap.horizontal_default);</div><div class="line">        bannerList.add(<span class="string">"http://pic1.win4000.com/wallpaper/5/598161750eddb.jpg"</span>);</div><div class="line">        bannerList.add(<span class="string">"http://pic1.win4000.com/wallpaper/4/597efb5b6aae8.jpg"</span>);</div><div class="line">        bannerView.setBannerPointSize(<span class="number">10</span>);</div><div class="line">        bannerView.setBannerPointGravity(Gravity.CENTER);</div><div class="line">        bannerView.setBannerPointDrawableSelected(R.drawable.gray_radius);</div><div class="line">        bannerView.setBannerPointDrawableUnselected(R.mipmap.point01);</div><div class="line">        bannerView.setBannerDelaySecond(<span class="number">5</span>);</div><div class="line">        <span class="comment">//banner 设置方法完毕时最后调用 start 方法</span></div><div class="line">        bannerView.start(bannerList);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onStop</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onStop();</div><div class="line">        bannerView.bannerShutdown();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>完整源码分享了我的知识星球（原名：小密圈），如果以上还满足不了你的需求，可以使用 GitHub上的库 <a href="https://github.com/youth5201314/banner" target="_blank" rel="noopener">banner</a>，它丰富了 pointLayout，可能是文字，它还依赖了<a href="https://github.com/ToxicBakery/ViewPagerTransforms" target="_blank" rel="noopener">ViewPagerTransforms</a>，因此 ViewPager 切换有各种炫酷效果，不过我觉得有些多余。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;漏洞百出&quot;&gt;&lt;a href=&quot;#漏洞百出&quot; class=&quot;headerlink&quot; title=&quot;漏洞百出&quot;&gt;&lt;/a&gt;漏洞百出&lt;/h1&gt;&lt;p&gt;轮播图是 Android 常用功能之一，效果大概是这样的：&lt;br&gt;
    
    </summary>
    
      <category term="Banner" scheme="http://wuxiaolong.me/categories/Banner/"/>
    
    
      <category term="Banner" scheme="http://wuxiaolong.me/tags/Banner/"/>
    
  </entry>
  
  <entry>
    <title>Android 组件化探索与思考</title>
    <link href="http://wuxiaolong.me/2017/08/01/ModularExploree/"/>
    <id>http://wuxiaolong.me/2017/08/01/ModularExploree/</id>
    <published>2017-08-01T04:39:55.000Z</published>
    <updated>2017-08-09T03:04:01.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>开发中，我习惯性会把一个模块的功能放在一个包下，便于查找，但烦于耦合性太高，后期维护太费劲，因此对项目进行组件化拆分势在必行。组件化好处：便于开发，团队成员只关注自己的开发的小模块，降低耦合性，后期维护方便等。相当于先有很多小组件，各自开发，最后组装，成一个 app。<br><a id="more"></a></p><h2 id="关系图"><a href="#关系图" class="headerlink" title="关系图"></a>关系图</h2><p><img src="http://7q5c2h.com1.z0.glb.clouddn.com/ModularSample.png?watermark/2/text/5ZC05bCP6b6Z5ZCM5a24/font/5qW35L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""><br>app：壳工程；<br>module1：组件1；<br>module2：组件2；<br>resource：专门放资源文件；<br>router：路由，所有页面请求都由它中转；<br>common：第三方库，公用工具、自定义 View等。</p><h2 id="效果预览"><a href="#效果预览" class="headerlink" title="效果预览"></a>效果预览</h2><p><img src="http://7q5c2h.com1.z0.glb.clouddn.com/ModularSample.gif?watermark/2/text/5ZC05bCP6b6Z5ZCM5a24/font/5qW35L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""><br>组件化过程很容易想到一些问题，比如 module1 我想单独调试怎么做？module1 有页面需要跳转到module2怎么办等。接下来，我一一探索，提供解决方案。</p><h1 id="全局设置-Gradle"><a href="#全局设置-Gradle" class="headerlink" title="全局设置 Gradle"></a>全局设置 Gradle</h1><p>如果有很多项目，可以设置全局来统一管理版本号或依赖库，这样就不用一个个去改了，根目录下 build.gradle 添加：<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">def androidSupportVersion = <span class="string">'25.3.1'</span></div><div class="line"></div><div class="line">ext &#123;</div><div class="line">    <span class="comment">//编译的 SDK 版本，如API20</span></div><div class="line">    compileSdkVersion = <span class="number">25</span></div><div class="line">    <span class="comment">//构建工具的版本，其中包括了打包工具aapt、dx等,如API20对应的build-tool的版本就是20.0.0</span></div><div class="line">    buildToolsVersion = <span class="string">"26.0.0"</span></div><div class="line">    <span class="comment">//兼容的最低 SDK 版本</span></div><div class="line">    minSdkVersion = <span class="number">14</span></div><div class="line">    <span class="comment">//向前兼容，保存新旧两种逻辑，并通过 if-else 方法来判断执行哪种逻辑</span></div><div class="line">    targetSdkVersion = <span class="number">22</span></div><div class="line">    appcompatV7 = <span class="string">"com.android.support:appcompat-v7:$androidSupportVersion"</span></div><div class="line">    constraintLayout = <span class="string">'com.android.support.constraint:constraint-layout:1.0.2'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>其中module/build.gradle：<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">android &#123;</div><div class="line">    compileSdkVersion rootProject.ext.compileSdkVersion</div><div class="line">    buildToolsVersion rootProject.ext.buildToolsVersion</div><div class="line">    <span class="comment">//……</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h1 id="资源名重名"><a href="#资源名重名" class="headerlink" title="资源名重名"></a>资源名重名</h1><p><del>每个 module 都有 app<em>name，为了不让资源名重名，可以在每个组件的 build.gradle 中增加 resourcePrefix “xxx</em>“，固定每个组件的资源前缀。但是 resourcePrefix 这个值只能限定 xml 里面的资源，并不能限定图片资源，所有图片资源仍然需要你手动去修改资源名。不过我更建议把图片、 strings、 colors、dimens 等资源放到 common 去，可以防止不同的资源名字却对应了同一资源值。</del><br>为什么叫 common，任何项目都能用，开发中发现把资源文件放在 common 明显不合理，专门建了个 resource 放资源文件，因此 resourcePrefix “xxx_” 也变得意义不大了。另外各个 module 中的 layout 的名字可能一样，其实我们按照一个规则来，比如只有一个 MainActivity，自然对应的 layout 名不一样。</p><h1 id="组件单独调试"><a href="#组件单独调试" class="headerlink" title="组件单独调试"></a>组件单独调试</h1><h2 id="application-与-library-切换"><a href="#application-与-library-切换" class="headerlink" title="application 与 library 切换"></a>application 与 library 切换</h2><p>module1 在开发阶段应该 application，等 release 后才是 library，这里可以设置一个变量控制下，在根项目 gradle.properties 加入：<br><figure class="highlight"><table><tr><td class="code"><pre><div class="line"># 组件单独调试开关，true 可以，false 不可以，需要点击 "Sync Project"。</div><div class="line">isDebug=false</div></pre></td></tr></table></figure></p><p>module1/build.gradle：<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">if</span> (isDebug.toBoolean()) &#123;</div><div class="line">    apply plugin: <span class="string">'com.android.application'</span></div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    apply plugin: <span class="string">'com.android.library'</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">android &#123;</div><div class="line">    <span class="comment">//……    </span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="applicationId"><a href="#applicationId" class="headerlink" title="applicationId"></a>applicationId</h2><p>开发阶段，module1 还必须有个 applicationId：<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">android &#123;</div><div class="line">     <span class="comment">//……</span></div><div class="line">    defaultConfig &#123;</div><div class="line">        <span class="comment">// 作为library时不能有applicationId,只有作为一个独立应用时才能够如下设置</span></div><div class="line">        <span class="keyword">if</span> (isDebug.toBoolean())&#123;</div><div class="line">            applicationId <span class="string">"com.wuxiaolong.module1"</span></div><div class="line">        &#125;</div><div class="line">        <span class="comment">//……</span></div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="入口类"><a href="#入口类" class="headerlink" title="入口类"></a>入口类</h2><p>到这里还不行，还得有 AndroidManifest 设置入口类，release 后这个 AndroidManifest 不需要打包进去，新建文件 debug，然后在 build.gradle 指定路径：<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">android &#123;</div><div class="line">    <span class="comment">//……  </span></div><div class="line">    sourceSets &#123;</div><div class="line">        main &#123;</div><div class="line">            <span class="keyword">if</span> (isDebug.toBoolean()) &#123;</div><div class="line">                manifest.srcFile <span class="string">'src/main/debug/AndroidManifest.xml'</span></div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                manifest.srcFile <span class="string">'src/main/release/AndroidManifest.xml'</span></div><div class="line">                java &#123;</div><div class="line">                    <span class="comment">//release 时 debug 目录下文件不需要合并到主工程</span></div><div class="line">                    exclude <span class="string">'debug/**'</span></div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>另外，module 可能会需要使用到自定义的 Application，release 同样也不需要打包进去，不然合并会有冲突。</p><h1 id="组件间通信"><a href="#组件间通信" class="headerlink" title="组件间通信"></a>组件间通信</h1><p>组件间通信包括两个场景：（1）UI 跳转；（2）调用组件某个类的某个方法。<br>这里涉及路由，何为路由，就是页面请求，都交给它处理。网上有很多路由库，我这里选的是阿里的 <a href="https://github.com/alibaba/ARouter" target="_blank" rel="noopener">ARouter</a>，ARouter 能解决上面的问题，但是也遗留一个问题，我独立运行 module1 时，想访问 module2 页面就做不到了，Router 不支持跨进程访问，这个问题待定，也可能是我使用 ARouter 姿势不对，如果您能做到，望告知。</p><h2 id="ARouter-使用"><a href="#ARouter-使用" class="headerlink" title="ARouter 使用"></a>ARouter 使用</h2><p>1、common<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">    <span class="comment">//arouter</span></div><div class="line">    compile rootProject.ext.arouterApi</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>2、组件<br>app 和 module 都需要加入：<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">android &#123;</div><div class="line">    defaultConfig &#123;</div><div class="line">        <span class="comment">//arouter</span></div><div class="line">        javaCompileOptions &#123;</div><div class="line">            annotationProcessorOptions &#123;</div><div class="line">                arguments = [moduleName: project.getName()]</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">dependencies &#123;</div><div class="line">    <span class="comment">//arouter</span></div><div class="line">    annotationProcessor rootProject.ext.arouterCompiler</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>3、使用<br>sample 列出了组件跳转、组件跳转-带参数、获取 Frgment、调用组件某个类的使用方法，详见我的 GitHub 分享。<br>详细使用请阅读 <a href="https://github.com/alibaba/ARouter" target="_blank" rel="noopener">ARouter</a>，不得不吐槽，文档写的不是一般的烂。</p><h1 id="library-重复依赖"><a href="#library-重复依赖" class="headerlink" title="library 重复依赖"></a>library 重复依赖</h1><p>module1 和 module2 分别都依赖了 common，会不会导致 library 重复依赖呢，想必大家也有这个疑问了，实际上在 release 构建 APP 的过程中 Gradle 会自动将重复的 aar 包排除，APP 中也就不会存在相同的代码了，可以打包反编译验证下，我试了，确实没有重复依赖。</p><h1 id="ButterKnife"><a href="#ButterKnife" class="headerlink" title="ButterKnife"></a>ButterKnife</h1><h2 id="Attribute-value-must-be-constant"><a href="#Attribute-value-must-be-constant" class="headerlink" title="Attribute value must be constant"></a>Attribute value must be constant</h2><p>在 Android Studio 的 library 的 module 中无法使用 ButterKnife。<br>网上说用 R2 替代（为什么能用 R2？），但都没有说 R2 怎么生成的？这篇<a href="http://www.see-source.com/blog/300000113/1324.html" target="_blank" rel="noopener">《butterknife在library中使用问题处理》</a>文章说使用 android-apt，确实可行，但是带来一个新坑，发现 apply plugin: ‘android-apt’ 与 arouter 冲突，这时候 arouter 失效了。正确姿势，用 Android ButterKnife Zelezny 插件生成，手动改成 R2，clean 下就 OK，感谢群里的小伙伴提示。</p><h2 id="OnClick-方法"><a href="#OnClick-方法" class="headerlink" title="OnClick 方法"></a>OnClick 方法</h2><p>ButterKnife 还有个坑，OnClick 方法中同样使用 R2，但是找 id 的时候使用 R，然而 library 中是不能使用 switch- case 找 id 的（原因：<a href="http://www.jianshu.com/p/89687f618837" target="_blank" rel="noopener">《在Android library中不能使用switch-case语句访问资源ID的原因分析及解决方案》</a>），可以使用 if-else：<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="meta">@OnClick</span>(&#123;R2.id.module1_button, R2.id.module1_button2&#125;)</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onViewClicked</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">      <span class="keyword">int</span> id = view.getId();</div><div class="line">      Log.d(<span class="string">"wxl"</span>,<span class="string">"id="</span>+id);</div><div class="line">      <span class="keyword">if</span> (id == R.id.module1_button) &#123;</div><div class="line">          toastShow(<span class="string">"module1_button"</span>);</div><div class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (id == R.id.module1_button2) &#123;</div><div class="line">          toastShow(<span class="string">"module1_button2"</span>);</div><div class="line">      &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p><p>当你写 switch- case 时，Android Studio 也有提示，可以一键转换成 if-else。</p><h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><p><a href="https://github.com/WuXiaolong/ModularSample" target="_blank" rel="noopener">https://github.com/WuXiaolong/ModularSample</a></p><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>1、撸了一次组件化，感觉自己好菜比，好多东西还需要学习，遗留：（1）、每个 module 的配置最好有个固定模版，这样新建 module 就不用一一配置了；（2）、关于注解与依赖注入，不明不白，导致组件间通信花费了太多时间，后续要系统学习下这块知识。<br>2、可能还有未知的坑，大家可以 Star <a href="https://github.com/WuXiaolong/ModularSample" target="_blank" rel="noopener">ModularSample</a>，我会持续更新。<br>3、网上组件化文章不少，但优秀的文章屈指可数，很多只是讲组件化思想，点到即止，最讨厌这种半藏着半掖式分享，感觉他们在耍流氓。对于那些无私愿意分享的人，我一直都是很钦佩的，因为有他们，让我们这些后人在开发的路上不孤单无助。<br>4、熟悉我的朋友，可能知道我在无锡，二线城市，总感觉技术很落后，所以我一直要保持学习，不知道组件化是不是在大城市在项目中运用很普遍？据说所知，无锡组件化用的很少，理论上在一线城市会处在技术前沿。<br>5、很多朋友说我文章总是会一个难点讲的通俗易懂，其实不知道我在易懂的背后做了多少实践做支撑，实践得真理，我是相信这句话的。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="http://blog.csdn.net/guiying712/article/details/55213884" target="_blank" rel="noopener">Android组件化方案</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;开发中，我习惯性会把一个模块的功能放在一个包下，便于查找，但烦于耦合性太高，后期维护太费劲，因此对项目进行组件化拆分势在必行。组件化好处：便于开发，团队成员只关注自己的开发的小模块，降低耦合性，后期维护方便等。相当于先有很多小组件，各自开发，最后组装，成一个 app。&lt;br&gt;
    
    </summary>
    
      <category term="Modular" scheme="http://wuxiaolong.me/categories/Modular/"/>
    
    
      <category term="Modular" scheme="http://wuxiaolong.me/tags/Modular/"/>
    
  </entry>
  
  <entry>
    <title>Mac 配置 adb 环境、gradlew：command not found</title>
    <link href="http://wuxiaolong.me/2017/07/19/mac-adb-gradlew/"/>
    <id>http://wuxiaolong.me/2017/07/19/mac-adb-gradlew/</id>
    <published>2017-07-19T12:17:30.000Z</published>
    <updated>2017-08-26T06:27:49.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>今年 6 月 15 日，我痛下决心，买了心仪已久的 MacBook Pro，《<a href="http://mp.weixin.qq.com/s/AXobpEbNEbhLLGzeQTrrrg" target="_blank" rel="noopener">2017 款 MacBook Pro 初体验</a>》，Mac 小白，这篇文章是踩坑后的记录，也将持续记录，好记忆真不如烂笔头，现在会设置了，一个月过后呢，而且我年纪也大了。</p></blockquote><a id="more"></a><h1 id="配置-adb-环境"><a href="#配置-adb-环境" class="headerlink" title="配置 adb 环境"></a>配置 adb 环境</h1><p>windows 下安装 apk，可能直接点击应用宝就安装了，Mac  没有应用宝，因为只能用 adb 命令行安装，却发现 adb 命令行找不到，算了，搁置了几天，之后安装 APK 很是麻烦，又不能拷到 SD 卡上，最终还是 Google，解决了这个问题。</p><h2 id="在命令行下，进入用户目录"><a href="#在命令行下，进入用户目录" class="headerlink" title="在命令行下，进入用户目录"></a>在命令行下，进入用户目录</h2><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">cd $HOME</div></pre></td></tr></table></figure><h2 id="bash-profile文件"><a href="#bash-profile文件" class="headerlink" title=".bash_profile文件"></a>.bash_profile文件</h2><p>输入下行命令获取当前文件列表：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">ls -al</div></pre></td></tr></table></figure></p><p>查看文件列表，如果文件已经存在，则进行下一步。如果没有 .bash_profile 文件，执行以下命令新建：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">touch .bash_profile</div></pre></td></tr></table></figure></p><h2 id="打开-bash-profile文件"><a href="#打开-bash-profile文件" class="headerlink" title="打开.bash_profile文件"></a>打开.bash_profile文件</h2><p>执行下行命令打开文件<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">open -e .bash_profile</div></pre></td></tr></table></figure></p><p>说明：</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">open .bash_profile：打开文件</div><div class="line">touch .bash_profile：如果文件不存在就创建文件</div><div class="line">open -e bash_profile：编辑文件</div></pre></td></tr></table></figure><p>打开文件后，添加 sdk 的安装路径，如果你是安装的 Android Studio 而且没有手动去变换路径的话，直接复制下面两行命令后将用户名改为自己电脑的即可。如果自己修改了路径，则找到 /Android/sdk/platform-tools 和 /Android/sdk/tools 的路径，替换即可。<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">export PATH=$&#123;PATH&#125;:/Users/用户名/Library/Android/sdk/platform-tools</div><div class="line">export PATH=$&#123;PATH&#125;:/Users/用户名/Library/Android/sdk/tools</div></pre></td></tr></table></figure></p><h2 id="更新刚配置的环境变量"><a href="#更新刚配置的环境变量" class="headerlink" title="更新刚配置的环境变量"></a>更新刚配置的环境变量</h2><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">source .bash_profile</div></pre></td></tr></table></figure><h2 id="查看配置结果"><a href="#查看配置结果" class="headerlink" title="查看配置结果"></a>查看配置结果</h2><p>命令行：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">adb version</div></pre></td></tr></table></figure></p><p>显示 adb 版本号即为设置成功：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">Android Debug Bridge version 1.0.39</div><div class="line">Revision 3db08f2c6889-android</div></pre></td></tr></table></figure></p><h2 id="查看所有的配置路径"><a href="#查看所有的配置路径" class="headerlink" title="查看所有的配置路径"></a>查看所有的配置路径</h2><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">echo $PATH</div></pre></td></tr></table></figure><h1 id="gradlew-command-not-found"><a href="#gradlew-command-not-found" class="headerlink" title="gradlew: command not found"></a>gradlew: command not found</h1><h2 id="问题1"><a href="#问题1" class="headerlink" title="问题1"></a>问题1</h2><p>今天我想用命令行 gradlew assembleRelease 来打个 aar 文件出来，结果报：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">bash: gradlew: command not found</div></pre></td></tr></table></figure></p><h2 id="问题2"><a href="#问题2" class="headerlink" title="问题2"></a>问题2</h2><p>Google，原来 Mac 需要前面加 ./，结果又报新的错误：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">bash: ./gradlew: Permission denied</div></pre></td></tr></table></figure></p><p>貌似没有权限，再次 Google，网上都在说，尝试在 gradlew 文件上设置执行标志：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">chmod +x gradlew</div></pre></td></tr></table></figure></p><p>却没说在那里设置，哪有gradlew 文件啊？实际在 Android Studio  的 Terminal 设置，除掉这个标志，直接 -。</p><h2 id="问题3"><a href="#问题3" class="headerlink" title="问题3"></a>问题3</h2><p>到这里，你以为就能运行了吗，No，这时候继续报错：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">No Java runtime present, requesting install.</div></pre></td></tr></table></figure></p><p>是啊，我安装 Android Studio，运行，居然可以，不用安装 JDK 吗，当时还想 Mac 这么好，JDK 都自带了，那为什么现在提示需要安装 JDK 呢，我看了项目的 JDK 路径，原来 Mac 版 Android Studio 已经自带 JDK 了，难道需要配置下 JDK 环境？Google Mac JDK环境配置，网上教程，都是配置另外安装的 JDK，我需要配置 Android Studio 下 JDK。<br>按照上面的 adb 环境配置步骤，打开 .bash_profile，添加如下：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">#jdk安装路径   </div><div class="line">export JAVA_HOME=/Applications/Android\ Studio.app/Contents/jre/jdk/Contents/Home </div><div class="line">export PATH=$JAVA_HOME/bin:$PATH</div></pre></td></tr></table></figure></p><p>注意：目录 Android Studio 有空格，搜到 stackoverflow，加了\。</p><p>执行：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">java -version</div></pre></td></tr></table></figure></p><p>返回如下，说明配置成功：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">openjdk version &quot;1.8.0_112-release&quot;</div><div class="line">OpenJDK Runtime Environment (build 1.8.0_112-release-b06)</div><div class="line">OpenJDK 64-Bit Server VM (build 25.112-b06, mixed mode)</div></pre></td></tr></table></figure></p><p>这样配置完毕，命令行 gradlew assembleRelease 正常执行，解决之。</p><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>问题一个接着一个，我都不想搞了，但一直以来，一个经验告诉我，遇到问题，不回避，解决才是王道，现在不解决，下次再遇到，还是回避不了。其实这些问题前人都遇到过，感谢他们无私分享，让我们遇到问题不再无助，不觉得孤独。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="http://answerzhao.github.io/2016/09/15/mac%E4%B8%8Badb%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%92%8C%E5%B8%B8%E7%94%A8adb%E5%91%BD%E4%BB%A4/" target="_blank" rel="noopener">mac下adb环境配置和常用adb命令</a></p><p><a href="https://gxnotes.com/article/33908.html" target="_blank" rel="noopener">gradlew：权限被拒绝</a></p><p><a href="http://www.cnblogs.com/havenshen/p/3490448.html" target="_blank" rel="noopener">mac OS X 10.9.1 配置jdk环境变量</a></p><p><a href="https://stackoverflow.com/questions/43211282/using-jdk-that-is-bundled-inside-android-studio-as-java-home-on-mac" target="_blank" rel="noopener">Using JDK that is bundled inside Android Studio as JAVA_HOME on Mac</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;今年 6 月 15 日，我痛下决心，买了心仪已久的 MacBook Pro，《&lt;a href=&quot;http://mp.weixin.qq.com/s/AXobpEbNEbhLLGzeQTrrrg&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;2017 款 MacBook Pro 初体验&lt;/a&gt;》，Mac 小白，这篇文章是踩坑后的记录，也将持续记录，好记忆真不如烂笔头，现在会设置了，一个月过后呢，而且我年纪也大了。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Mac" scheme="http://wuxiaolong.me/categories/Mac/"/>
    
    
      <category term="Mac" scheme="http://wuxiaolong.me/tags/Mac/"/>
    
      <category term="adb" scheme="http://wuxiaolong.me/tags/adb/"/>
    
      <category term="gradlew" scheme="http://wuxiaolong.me/tags/gradlew/"/>
    
  </entry>
  
  <entry>
    <title>Kotlin for Android（四）Retrofit + RxJava</title>
    <link href="http://wuxiaolong.me/2017/06/03/kotlin4/"/>
    <id>http://wuxiaolong.me/2017/06/03/kotlin4/</id>
    <published>2017-06-03T14:14:11.000Z</published>
    <updated>2017-06-03T14:48:02.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>如果您之前学习 Android MVP ，很可能是从 AndroidMVPSample<br>(<a href="https://github.com/WuXiaolong/AndroidMVPSample" target="_blank" rel="noopener">https://github.com/WuXiaolong/AndroidMVPSample</a> )开始的，此Sample最初是 Android MVP 示例，后来融合 Retrofit 和 RxJava，分别演示了普通写法(Retrofit)、普通写法(Retrofit+Rxjava)、MVP+Retrofit+Rxjava，跟它一样，我写了 Kotlin 版 Retrofit +RxJava 来练手，还是以天气示例。</p></blockquote><a id="more"></a><h1 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h1><p>build.gradle<br><figure class="highlight kotlin"><table><tr><td class="code"><pre><div class="line">buildscript &#123;</div><div class="line">    ext.kotlin_version = <span class="string">'1.1.2-4'</span></div><div class="line">    ext.retrofit_version = <span class="string">'2.0.2'</span></div><div class="line">    ext.rxkotlin_version = <span class="string">'0.60.0'</span></div><div class="line">    ext.rxandroid_version = <span class="string">'1.2.1'</span></div><div class="line"></div><div class="line">    dependencies &#123;</div><div class="line">        classpath <span class="string">'com.android.tools.build:gradle:2.3.1'</span></div><div class="line">        <span class="comment">//编译 Kotlin 源代码和模块.</span></div><div class="line">        classpath <span class="string">"org.jetbrains.kotlin:kotlin-gradle-plugin:<span class="variable">$kotlin_version</span>"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>app/build.gradle<br><figure class="highlight kotlin"><table><tr><td class="code"><pre><div class="line"> apply plugin: <span class="string">'com.android.application'</span></div><div class="line">apply plugin: <span class="string">'kotlin-android'</span></div><div class="line"></div><div class="line">android &#123;</div><div class="line">    <span class="comment">//……</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">dependencies &#123;</div><div class="line">    </div><div class="line">    <span class="comment">//针对 JDK 7 或 JDK 8</span></div><div class="line">    compile <span class="string">"org.jetbrains.kotlin:kotlin-stdlib-jre7:<span class="variable">$kotlin_version</span>"</span></div><div class="line">    </div><div class="line">    <span class="comment">//Retrofit</span></div><div class="line">    compile <span class="string">"com.squareup.retrofit2:retrofit:<span class="variable">$retrofit_version</span>"</span></div><div class="line">    compile <span class="string">"com.squareup.okhttp3:logging-interceptor:<span class="variable">$logging_interceptor_version</span>"</span></div><div class="line">    compile <span class="string">"com.squareup.retrofit2:converter-gson:<span class="variable">$retrofit_version</span>"</span></div><div class="line">    compile <span class="string">"com.squareup.retrofit2:adapter-rxjava:<span class="variable">$retrofit_version</span>"</span></div><div class="line">   </div><div class="line">    <span class="comment">//RxJava</span></div><div class="line">    compile <span class="string">"io.reactivex:rxkotlin:<span class="variable">$rxkotlin_version</span>"</span></div><div class="line">    compile <span class="string">"io.reactivex:rxandroid:<span class="variable">$rxandroid_version</span>"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h1 id="网络权限"><a href="#网络权限" class="headerlink" title="网络权限"></a>网络权限</h1><p>AndroidManifest.xml<br><figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.INTERNET"</span> /&gt;</span></div></pre></td></tr></table></figure></p><h1 id="WeatherinfoModel"><a href="#WeatherinfoModel" class="headerlink" title="WeatherinfoModel"></a>WeatherinfoModel</h1><p>天气接口：<a href="http://www.weather.com.cn/adat/sk/101190201.html" target="_blank" rel="noopener">http://www.weather.com.cn/adat/sk/101190201.html</a><br>当我们使用 Gson 来解析 json 到我们的类中，这些属性的名字必须要与json中的名字一样，哎，我又忘记这点，因此浪费了很多时间排错。<br><figure class="highlight kotlin"><table><tr><td class="code"><pre><div class="line"><span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">WeatherinfoModel</span> <span class="keyword">constructor</span></span>(<span class="keyword">val</span> weatherinfo: WeatherinfoBean) &#123;</div><div class="line"></div><div class="line">    <span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">WeatherinfoBean</span></span>(</div><div class="line">            <span class="keyword">val</span> city: String,</div><div class="line">            <span class="keyword">val</span> cityid: String</div><div class="line">    )</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h1 id="ApiStores"><a href="#ApiStores" class="headerlink" title="ApiStores"></a>ApiStores</h1><p>网络请求 url 都放这里:<br><figure class="highlight kotlin"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">ApiStores</span> </span>&#123;</div><div class="line">    <span class="keyword">companion</span> <span class="keyword">object</span> &#123;</div><div class="line">        <span class="comment">//baseUrl</span></div><div class="line">        <span class="keyword">val</span> API_SERVER_URL = <span class="string">"http://www.weather.com.cn/"</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//加载天气</span></div><div class="line">    <span class="meta">@GET(<span class="meta-string">"adat/sk/&#123;cityId&#125;.html"</span>)</span></div><div class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">loadData</span><span class="params">(<span class="meta">@Path(<span class="meta-string">"cityId"</span>)</span> cityId: <span class="type">String</span>)</span></span>: Observable&lt;WeatherinfoModel&gt;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h1 id="ApiClient"><a href="#ApiClient" class="headerlink" title="ApiClient"></a>ApiClient</h1><p>Retrofit 初始化、配置：<br><figure class="highlight kotlin"><table><tr><td class="code"><pre><div class="line"><span class="comment">//object声明单例模式</span></div><div class="line"><span class="keyword">object</span> ApiClient &#123;</div><div class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">retrofit</span><span class="params">()</span></span>: ApiStores &#123;</div><div class="line">        <span class="keyword">val</span> builder = OkHttpClient.Builder()</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (BuildConfig.DEBUG) &#123;</div><div class="line">            <span class="comment">// Log信息拦截器</span></div><div class="line">            <span class="keyword">val</span> loggingInterceptor = HttpLoggingInterceptor()</div><div class="line">            loggingInterceptor.level = HttpLoggingInterceptor.Level.BODY</div><div class="line">            <span class="comment">//设置 Debug Log 模式</span></div><div class="line">            builder.addInterceptor(loggingInterceptor)</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">val</span> okHttpClient = builder.build()</div><div class="line">        <span class="keyword">val</span> retrofit = Retrofit.Builder()</div><div class="line">                .baseUrl(ApiStores.API_SERVER_URL)</div><div class="line">                .addConverterFactory(GsonConverterFactory.create())</div><div class="line">                .addCallAdapterFactory(RxJavaCallAdapterFactory.create())</div><div class="line">                .client(okHttpClient)</div><div class="line">                .build()</div><div class="line">        <span class="comment">//ApiStores::class.java取得对象的 Java 类</span></div><div class="line">        <span class="keyword">return</span> retrofit.create(ApiStores::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>)</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h1 id="ApiCallback"><a href="#ApiCallback" class="headerlink" title="ApiCallback"></a>ApiCallback</h1><p>还是做了回调：<br><figure class="highlight kotlin"><table><tr><td class="code"><pre><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ApiCallback</span>&lt;<span class="type">M</span>&gt; : <span class="type">Subscriber</span>&lt;<span class="type">M</span>&gt;</span>() &#123;</div><div class="line">    <span class="keyword">abstract</span> <span class="function"><span class="keyword">fun</span> <span class="title">onSuccess</span><span class="params">(model: <span class="type">M</span>)</span></span></div><div class="line">    <span class="keyword">abstract</span> <span class="function"><span class="keyword">fun</span> <span class="title">onFailure</span><span class="params">(msg: <span class="type">String</span>?)</span></span></div><div class="line">    <span class="keyword">abstract</span> <span class="function"><span class="keyword">fun</span> <span class="title">onFinish</span><span class="params">()</span></span></div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCompleted</span><span class="params">()</span></span> &#123;</div><div class="line">        onFinish()</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onNext</span><span class="params">(m: <span class="type">M</span>)</span></span> &#123;</div><div class="line">        onSuccess(m)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onError</span><span class="params">(e: <span class="type">Throwable</span>?)</span></span> &#123;</div><div class="line">        <span class="comment">//这块应该可以优化 </span></div><div class="line">        <span class="keyword">if</span> (e <span class="keyword">is</span> HttpException) &#123;</div><div class="line">            <span class="keyword">val</span> httpException = e</div><div class="line">            <span class="comment">//httpException.response().errorBody().string()</span></div><div class="line">            <span class="keyword">val</span> code = httpException.code()</div><div class="line">            <span class="keyword">var</span> msg = httpException.message</div><div class="line">            Log.d(<span class="string">"wxl"</span>, <span class="string">"code="</span> + code)</div><div class="line">            <span class="keyword">if</span> (code == <span class="number">504</span>) &#123;</div><div class="line">                msg = <span class="string">"网络不给力"</span></div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (code == <span class="number">502</span> || code == <span class="number">404</span>) &#123;</div><div class="line">                msg = <span class="string">"服务器异常，请稍后再试"</span></div><div class="line">            &#125;</div><div class="line">            onFailure(msg)</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            onFailure(e.toString())</div><div class="line">        &#125;</div><div class="line">        onFinish()</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h1 id="BaseActivity"><a href="#BaseActivity" class="headerlink" title="BaseActivity"></a>BaseActivity</h1><p>建了基类，可以把一些公用的方法放到这里，方便：<br><figure class="highlight kotlin"><table><tr><td class="code"><pre><div class="line"><span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseActivity</span> : <span class="type">AppCompatActivity</span></span>() &#123;</div><div class="line">    <span class="keyword">val</span> mCompositeSubscription: CompositeSubscription = CompositeSubscription()</div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onDestroy</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">if</span> (mCompositeSubscription.hasSubscriptions()) &#123;</div><div class="line">            <span class="comment">//取消注册，以避免内存泄露</span></div><div class="line">            mCompositeSubscription.unsubscribe()</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">super</span>.onDestroy()</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">open</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;M&gt;</span> <span class="title">addSubscription</span><span class="params">(observable: <span class="type">Observable</span>&lt;<span class="type">M</span>&gt;, subscriber: <span class="type">Subscriber</span>&lt;<span class="type">M</span>&gt;)</span></span> &#123;</div><div class="line">        mCompositeSubscription.add(</div><div class="line">                observable.subscribeOn(Schedulers.io())</div><div class="line">                        .observeOn(AndroidSchedulers.mainThread())</div><div class="line">                        .subscribe(subscriber))</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h1 id="MainActivity"><a href="#MainActivity" class="headerlink" title="MainActivity"></a>MainActivity</h1><p>请求接口：<br><figure class="highlight kotlin"><table><tr><td class="code"><pre><div class="line"><span class="comment">//冒号表示继承</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> : <span class="type">BaseActivity</span></span>() &#123;</div><div class="line">    <span class="comment">//问号表示该变量可以为空</span></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</div><div class="line">        setContentView(R.layout.activity_main)</div><div class="line"></div><div class="line">        <span class="comment">//object为对象表达式</span></div><div class="line">        addSubscription(ApiClient.retrofit().loadData(<span class="string">"101190201"</span>), <span class="keyword">object</span> : ApiCallback&lt;WeatherinfoModel&gt;() &#123;</div><div class="line">            <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onSuccess</span><span class="params">(model: <span class="type">WeatherinfoModel</span>)</span></span> &#123;</div><div class="line">                Log.d(<span class="string">"wxl"</span>, <span class="string">"city="</span> + model.weatherinfo.city + <span class="string">",cityid="</span> + model.weatherinfo.cityid)<span class="comment">//输出“city=无锡,cityid=101190201”</span></div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onFailure</span><span class="params">(msg: <span class="type">String</span>?)</span></span> &#123;</div><div class="line">                Log.d(<span class="string">"wxl"</span>, <span class="string">"onFailure="</span> + msg)</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onFinish</span><span class="params">()</span></span> &#123;</div><div class="line">                Log.d(<span class="string">"wxl"</span>, <span class="string">"onFinish"</span>)</div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://medium.com/@juanchosaravia/keddit-part-6-api-retrofit-kotlin-d309074af0" target="_blank" rel="noopener">Keddit — Part 6: API — Retrofit &amp; Kotlin</a></p><p><a href="http://mio4kon.com/2016/08/17/Kotlin%20for%20Android%E5%AE%9E%E8%B7%B5/" target="_blank" rel="noopener">Kotlin for Android 实践</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;如果您之前学习 Android MVP ，很可能是从 AndroidMVPSample&lt;br&gt;(&lt;a href=&quot;https://github.com/WuXiaolong/AndroidMVPSample&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/WuXiaolong/AndroidMVPSample&lt;/a&gt; )开始的，此Sample最初是 Android MVP 示例，后来融合 Retrofit 和 RxJava，分别演示了普通写法(Retrofit)、普通写法(Retrofit+Rxjava)、MVP+Retrofit+Rxjava，跟它一样，我写了 Kotlin 版 Retrofit +RxJava 来练手，还是以天气示例。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Kotlin" scheme="http://wuxiaolong.me/categories/Kotlin/"/>
    
    
      <category term="Kotlin" scheme="http://wuxiaolong.me/tags/Kotlin/"/>
    
  </entry>
  
  <entry>
    <title>Kotlin for Android（三）类和对象</title>
    <link href="http://wuxiaolong.me/2017/06/01/kotlin3/"/>
    <id>http://wuxiaolong.me/2017/06/01/kotlin3/</id>
    <published>2017-06-01T14:40:28.000Z</published>
    <updated>2017-06-01T08:26:26.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>久等了，关于 Kotlin 的类和对象涉及的知识有点多，我又顺便练手写了 Kotlin 版 Retrofit +RxJava，近期整理一并分享出来。</p></blockquote><h1 id="类"><a href="#类" class="headerlink" title="类"></a>类</h1><p>使用 <strong>class</strong> 关键字声明类。<br><a id="more"></a><br>类声明由<strong>类名</strong>、<strong>类头</strong>（指定其类型参数、主构造函数等）和由大括号包围的<strong>类体</strong>构成。<br>一个类可以有一个主构造函数和一个或多个次构造函数。</p><h2 id="主构造函数"><a href="#主构造函数" class="headerlink" title="主构造函数"></a>主构造函数</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><div class="line"><span class="comment">//类名:WeatherinfoModel</span></div><div class="line"><span class="comment">//主构造函数:constructor(val weatherinfo: WeatherinfoBean)</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">WeatherinfoModel</span> <span class="keyword">public</span> <span class="keyword">constructor</span></span>(<span class="keyword">val</span> weatherinfo: WeatherinfoBean) &#123;</div><div class="line">    <span class="comment">//类体</span></div><div class="line">    init &#123;</div><div class="line">        <span class="comment">//主构造函数不能包含任何的代码，</span></div><div class="line">        <span class="comment">//初始化的代码可以放到 init 块中</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>如果主构造函数没有任何注解或者可见性修饰符（private、 protected、 internal 和 public），可以省略这个 constructor 关键字。</p><h2 id="次构造函数"><a href="#次构造函数" class="headerlink" title="次构造函数"></a>次构造函数</h2><p>类也可以声明前缀有 constructor 的次构造函数：<br><figure class="highlight kotlin"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>(parent: Person) &#123;</div><div class="line">        parent.children.add(<span class="keyword">this</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="创建类的实例"><a href="#创建类的实例" class="headerlink" title="创建类的实例"></a>创建类的实例</h2><p>Kotlin 并没有 new 关键字，简单粗暴：<br><figure class="highlight kotlin"><table><tr><td class="code"><pre><div class="line"><span class="keyword">val</span> person = Person()</div></pre></td></tr></table></figure></p><h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><p>声明一个显式的父类：<br><figure class="highlight kotlin"><table><tr><td class="code"><pre><div class="line"><span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">Base</span> </span>&#123;</div><div class="line">    <span class="keyword">open</span> <span class="function"><span class="keyword">fun</span> <span class="title">v</span><span class="params">()</span></span> &#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>子类冒号继承，override 标注在子类中覆盖：<br><figure class="highlight kotlin"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> : <span class="type">Base &#123;</span></span></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">v</span><span class="params">()</span></span> &#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>如果类没有主构造函数，那么每个次构造函数必须 使用 super 关键字初始化其基类型：<br><figure class="highlight kotlin"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyView</span> : <span class="type">View &#123;</span></span></div><div class="line">    <span class="keyword">constructor</span>(ctx: Context) : <span class="keyword">super</span>(ctx)</div><div class="line"></div><div class="line">    <span class="keyword">constructor</span>(ctx: Context, attrs: AttributeSet) : <span class="keyword">super</span>(ctx, attrs)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h1 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h1><h2 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ApiCallback</span>&lt;<span class="type">M</span>&gt;</span>(m:M)&#123;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="泛型函数"><a href="#泛型函数" class="headerlink" title="泛型函数"></a>泛型函数</h2><p>类型参数要放在函数名称之前：<br><figure class="highlight kotlin"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="type">&lt;M&gt;</span> <span class="title">addSubscription</span><span class="params">(observable: <span class="type">Observable</span>&lt;<span class="type">M</span>&gt;, subscriber: <span class="type">Subscriber</span>&lt;<span class="type">M</span>&gt;)</span></span> &#123;</div><div class="line"><span class="comment">// ……</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h1 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h1><figure class="highlight kotlin"><table><tr><td class="code"><pre><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ApiCallback</span>&lt;<span class="type">M</span>&gt; </span>&#123;</div><div class="line">    <span class="keyword">abstract</span> <span class="function"><span class="keyword">fun</span> <span class="title">onSuccess</span><span class="params">(model: <span class="type">M</span>)</span></span></div><div class="line">    <span class="keyword">abstract</span> <span class="function"><span class="keyword">fun</span> <span class="title">onFailure</span><span class="params">(msg: <span class="type">String</span>?)</span></span></div><div class="line">    <span class="keyword">abstract</span> <span class="function"><span class="keyword">fun</span> <span class="title">onFinish</span><span class="params">()</span></span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>1、抽象方法必须为 public 或者 protected，缺省情况下默认为 public；<br>2、抽象类不能用来创建对象；<br>3、如果一个类继承于一个抽象类，则子类必须实现父类的抽象方法。如果子类没有实现父类的抽象方法，则必须将子类也定义为为 abstract 类。如果抽象类中含有抽象属性，再实现子类中必须将抽象属性初始化，除非子类也为抽象类。</p><h2 id="抽象方法"><a href="#抽象方法" class="headerlink" title="抽象方法"></a>抽象方法</h2><p>1、抽象方法必须用 abstract 关键字进行修饰；<br>2、抽象方法默认被 open 修饰，可以不用手动添加 open；<br>3、抽象方法没有具体的实现；<br>4、含有抽象方法的类成为抽象类，必须由 abtract 关键字修饰。</p><h2 id="抽象属性"><a href="#抽象属性" class="headerlink" title="抽象属性"></a>抽象属性</h2><p>抽象属性就是在 var 或 val 前被 abstract 修饰。</p><h1 id="嵌套类"><a href="#嵌套类" class="headerlink" title="嵌套类"></a>嵌套类</h1><p>类里面可以嵌套在其他类：<br><figure class="highlight kotlin"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</div><div class="line">    <span class="keyword">val</span> a: String = <span class="string">"a"</span></div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</div><div class="line">        <span class="keyword">val</span> b: String = <span class="string">"b"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>访问：<br><figure class="highlight kotlin"><table><tr><td class="code"><pre><div class="line"><span class="keyword">val</span> a = A.B().b<span class="comment">//a输出为“b”</span></div></pre></td></tr></table></figure></p><p>如果想让类 B 能访问类 A 的成员，可以加 inner 标记：<br><figure class="highlight kotlin"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</div><div class="line">    <span class="keyword">val</span> a: String = <span class="string">"a"</span></div><div class="line"></div><div class="line">    inner <span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</div><div class="line">        <span class="keyword">val</span> b: String = a</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>访问：<br><figure class="highlight kotlin"><table><tr><td class="code"><pre><div class="line"><span class="keyword">val</span> a = A().B().b<span class="comment">//a输出为“a”</span></div></pre></td></tr></table></figure></p><h1 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h1><p>有时候，我们需要创建一个对某个类做轻微改动的类的对象，而不是为之显式声明新的子类。</p><h2 id="对象表达式"><a href="#对象表达式" class="headerlink" title="对象表达式"></a>对象表达式</h2><p>抽象类不能用来创建对象，可以创建一个继承自某个（或某些）类型的匿名内部类的对象:<br><figure class="highlight kotlin"><table><tr><td class="code"><pre><div class="line">ApiClient.retrofit().loadData(<span class="string">"101190201"</span>), <span class="keyword">object</span> : ApiCallback&lt;WeatherinfoModel&gt;() &#123;</div><div class="line">            <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onSuccess</span><span class="params">(model: <span class="type">WeatherinfoModel</span>)</span></span> &#123;</div><div class="line">                <span class="comment">//……</span></div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onFailure</span><span class="params">(msg: <span class="type">String</span>?)</span></span> &#123;</div><div class="line">                <span class="comment">//……</span></div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onFinish</span><span class="params">()</span></span> &#123;</div><div class="line">                <span class="comment">//……</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div></pre></td></tr></table></figure></p><h2 id="对象声明"><a href="#对象声明" class="headerlink" title="对象声明"></a>对象声明</h2><p><strong>单例模式</strong><br>在 object 关键字后跟一个名称，声明单例模式：<br><figure class="highlight kotlin"><table><tr><td class="code"><pre><div class="line"><span class="keyword">object</span> ApiClient &#123;</div><div class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">retrofit</span><span class="params">()</span></span>: ApiStores &#123;</div><div class="line">        <span class="comment">//……</span></div><div class="line">        <span class="keyword">return</span> retrofit.create(ApiStores::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>)</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>引用该对象：<br><figure class="highlight kotlin"><table><tr><td class="code"><pre><div class="line">ApiClient.retrofit()</div></pre></td></tr></table></figure></p><p><strong>伴生对象</strong><br>使用 companion 关键字标记：<br><figure class="highlight kotlin"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ApiStores</span> </span>&#123;</div><div class="line">    <span class="keyword">companion</span> <span class="keyword">object</span> A &#123;</div><div class="line">        <span class="comment">//baseUrl</span></div><div class="line">        <span class="keyword">val</span> API_SERVER_URL = <span class="string">"http://www.weather.com.cn/"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>这样就能直接访问该伴生对象的成员：<br><figure class="highlight kotlin"><table><tr><td class="code"><pre><div class="line"><span class="keyword">val</span> url = ApiStores.API_SERVER_URL</div></pre></td></tr></table></figure></p><p>可以省略伴生对象的名称 A，伴生对象也适合接口。</p><h1 id="数据类"><a href="#数据类" class="headerlink" title="数据类"></a>数据类</h1><p>数据类提供了访问它们属性 getter 和 setter，toString()等：<br><figure class="highlight kotlin"><table><tr><td class="code"><pre><div class="line"><span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">WeatherinfoModel</span> <span class="keyword">constructor</span></span>(<span class="keyword">val</span> weatherinfo: WeatherinfoBean) &#123;</div><div class="line">    </div><div class="line">    <span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">WeatherinfoBean</span></span>(</div><div class="line">            <span class="keyword">val</span> city: String,</div><div class="line">            <span class="keyword">val</span> cityid: String</div><div class="line">    )</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>数据类必须满足以下要求：</p><p>1、主构造函数需要至少有一个参数；<br>2、主构造函数的所有参数需要标记为 val 或 var；<br>3、数据类不能是抽象、开放、密封或者内部的；<br>4、在 1.1 之前，数据类只能实现接口。</p><h2 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h2><p>在很多情况下，我们只需要改变一个对象某些属性，其余部分保持不变，这里可以用到数据类的 copy，以上面的 WeatherinfoModel 为例，Retrofit 请求成功，我有个回调：<br><figure class="highlight kotlin"><table><tr><td class="code"><pre><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onSuccess</span><span class="params">(model: <span class="type">WeatherinfoModel</span>)</span></span> &#123;</div><div class="line">    Log.d(<span class="string">"wxl"</span>,model.toString())<span class="comment">//输出“WeatherinfoModel(weatherinfo=WeatherinfoBean(city=无锡, cityid=101190201))”</span></div><div class="line">    Log.d(<span class="string">"wxl"</span>, <span class="string">"city="</span> + model.weatherinfo.city + <span class="string">",cityid="</span> + model.weatherinfo.cityid)<span class="comment">//输出“city=无锡,cityid=101190201”</span></div><div class="line">    <span class="keyword">val</span> weatherinfoBean = model.weatherinfo.copy(city = <span class="string">"上海"</span>)</div><div class="line">    <span class="keyword">val</span> weatherinfoModel = WeatherinfoModel(weatherinfoBean)</div><div class="line">    Log.d(<span class="string">"wxl"</span>, <span class="string">"city1="</span> + weatherinfoModel.weatherinfo.city + <span class="string">",cityid1="</span> + weatherinfoModel.weatherinfo.cityid)<span class="comment">//输出“city1=上海,cityid1=101190201”</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h1 id="委托"><a href="#委托" class="headerlink" title="委托"></a>委托</h1><p>所谓委托模式 ，就是为其他对象提供一种代理以控制对这个对象的访问，在 Java 开发过程中，是继承模式之外的很好的解决问题的方案。<br><figure class="highlight kotlin"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Base</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">print</span><span class="params">()</span></span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>(<span class="keyword">val</span> a: <span class="built_in">Int</span>) : Base &#123;</div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">print</span><span class="params">()</span></span> &#123;</div><div class="line">        Log.d(<span class="string">"wxl"</span>, <span class="string">"a="</span> + a)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>(<span class="keyword">val</span> base: Base):Base <span class="keyword">by</span> base</div></pre></td></tr></table></figure></p><p>调用：<br><figure class="highlight kotlin"><table><tr><td class="code"><pre><div class="line"><span class="keyword">val</span> a = A(<span class="number">1</span>)</div><div class="line">Log.d(<span class="string">"wxl"</span>, <span class="string">"a="</span> + B(a).print())</div></pre></td></tr></table></figure></p><p>类 B 居然能调用类 A 方法，关键字 by 表示 base 将会在 B 中内部存储, 并且编译器将生成转发给 base 的所有 Base 的方法。</p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>其实看官方文档挺枯燥的，又有点云里雾里，当试着敲了一遍 Kotlin 版 Retrofit + RxJava，再回头看，有目标性，效率也是杠杠的。建议读者自己再仔细看看官方文档，这里的记录是我个人的理解，已经简化了，用作备忘。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;久等了，关于 Kotlin 的类和对象涉及的知识有点多，我又顺便练手写了 Kotlin 版 Retrofit +RxJava，近期整理一并分享出来。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;类&quot;&gt;&lt;a href=&quot;#类&quot; class=&quot;headerlink&quot; title=&quot;类&quot;&gt;&lt;/a&gt;类&lt;/h1&gt;&lt;p&gt;使用 &lt;strong&gt;class&lt;/strong&gt; 关键字声明类。&lt;br&gt;
    
    </summary>
    
      <category term="Kotlin" scheme="http://wuxiaolong.me/categories/Kotlin/"/>
    
    
      <category term="Kotlin" scheme="http://wuxiaolong.me/tags/Kotlin/"/>
    
  </entry>
  
  <entry>
    <title>Kotlin for Android（二）基础语法</title>
    <link href="http://wuxiaolong.me/2017/05/23/kotlin2/"/>
    <id>http://wuxiaolong.me/2017/05/23/kotlin2/</id>
    <published>2017-05-23T12:29:54.000Z</published>
    <updated>2017-06-01T08:03:34.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>通过这篇博客，让我们对 Kotlin 语法有个大概了解。</p></blockquote><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><p>变量有可变和不可变，可以用 var 和 val 声明。<br><a id="more"></a><br><figure class="highlight kotlin"><table><tr><td class="code"><pre><div class="line"><span class="keyword">val</span> s = <span class="string">"Sample"</span> <span class="comment">// 自动推断出字符串</span></div><div class="line"><span class="keyword">val</span> i = <span class="number">23</span> <span class="comment">// 整型，立即赋值</span></div></pre></td></tr></table></figure></p><p>也可以指定类型：<br><figure class="highlight kotlin"><table><tr><td class="code"><pre><div class="line"><span class="keyword">val</span> s: String = <span class="string">"Sample"</span> <span class="comment">//指定String类型</span></div><div class="line"><span class="keyword">val</span> activity: Context = <span class="keyword">this</span></div></pre></td></tr></table></figure></p><p>可变变量：<br><figure class="highlight kotlin"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 自动推断出 `Int` 类型</span></div><div class="line"><span class="keyword">var</span> x = <span class="number">5</span> </div><div class="line">x += <span class="number">1</span></div></pre></td></tr></table></figure></p><p>不管变量是 var 还是 val 都要初始化值，这点没有 Java 好，但保证了空安全。</p><h1 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h1><h2 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h2><p>分别有Double、Float、Long、Int、Short、Byte 类型。</p><p>Kotlin没有隐式拓宽转换，如 Java 中 int 可以隐式转换为 long，必须要显式类型转换。<br><figure class="highlight kotlin"><table><tr><td class="code"><pre><div class="line"><span class="keyword">val</span> a: <span class="built_in">Double</span> = <span class="number">5.2</span></div><div class="line"><span class="keyword">val</span> b: <span class="built_in">Int</span> = a.toInt() <span class="comment">// 显式转换，b 等于 5</span></div><div class="line"><span class="keyword">val</span> c: <span class="built_in">Float</span> = <span class="number">5.2</span>F</div><div class="line"><span class="keyword">val</span> d: <span class="built_in">Int</span> = c.toInt()<span class="comment">// d 等于 5</span></div></pre></td></tr></table></figure></p><p>显式类型转换方法:<br><figure class="highlight kotlin"><table><tr><td class="code"><pre><div class="line">toByte(): <span class="built_in">Byte</span></div><div class="line">toShort(): <span class="built_in">Short</span></div><div class="line">toInt(): <span class="built_in">Int</span></div><div class="line">toLong(): <span class="built_in">Long</span></div><div class="line">toFloat(): <span class="built_in">Float</span></div><div class="line">toDouble(): <span class="built_in">Double</span></div><div class="line">toChar(): <span class="built_in">Char</span></div></pre></td></tr></table></figure></p><h2 id="字符"><a href="#字符" class="headerlink" title="字符"></a>字符</h2><p>使用 Char 类型表示。<br><figure class="highlight kotlin"><table><tr><td class="code"><pre><div class="line"><span class="keyword">val</span> e: <span class="built_in">Char</span> = <span class="string">'q'</span></div></pre></td></tr></table></figure></p><h2 id="布尔"><a href="#布尔" class="headerlink" title="布尔"></a>布尔</h2><p>使用 Boolean 类型表示，它有两个值：true 和 false。<br><figure class="highlight kotlin"><table><tr><td class="code"><pre><div class="line"><span class="keyword">val</span> f: <span class="built_in">Boolean</span> = <span class="literal">true</span></div></pre></td></tr></table></figure></p><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>使用 String 类型表示。<br><figure class="highlight kotlin"><table><tr><td class="code"><pre><div class="line"><span class="keyword">val</span> g: String = <span class="string">"Hello，Kotlin！"</span></div></pre></td></tr></table></figure></p><h2 id="字符串模板"><a href="#字符串模板" class="headerlink" title="字符串模板"></a>字符串模板</h2><p>字符串模板，可以包含一些小段代码，会把求值结果合并到字符串中。<br>模板表达式以美元符（$）开头：<br><figure class="highlight kotlin"><table><tr><td class="code"><pre><div class="line"><span class="keyword">val</span> h = <span class="string">"me"</span></div><div class="line"><span class="keyword">val</span> j = <span class="string">"it is <span class="variable">$h</span>"</span><span class="comment">// j 为“it is me”</span></div></pre></td></tr></table></figure></p><p>模板中的任意表达式，用大括号：<br><figure class="highlight kotlin"><table><tr><td class="code"><pre><div class="line"><span class="keyword">val</span> k = <span class="string">"h length is <span class="subst">$&#123;h.length&#125;</span>"</span><span class="comment">// h length is 2</span></div></pre></td></tr></table></figure></p><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>使用 Array 类来创建和操作数组，和 Java 区别很大，它定义了 get 和 set 函数，size 属性，以及一些其他有用的成员函数。</p><p>使用库函数 arrayOf() 来创建一个数组并传递元素值给它，如 arrayOf(1, 2, 3) 创建了 array[1, 2, 3]。</p><p>[] 可以用于访问数组的元素，实际上 [] 被进行了操作符的重载，调用的是 Array 类的 get 和 set 方法。</p><p>库函数 arrayOfNulls() 可以用于创建一个指定大小、元素都为空的数组。</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><div class="line"><span class="comment">//使用装箱操作，</span></div><div class="line"><span class="keyword">val</span> arr1 = arrayOf(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</div><div class="line"><span class="comment">//原生类型数组，还有 ByteArray、 ShortArray 等</span></div><div class="line"><span class="keyword">val</span> arr2: IntArray = intArrayOf(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</div><div class="line"></div><div class="line"><span class="comment">//直接指定长度</span></div><div class="line"><span class="keyword">val</span> arr3 = arrayOfNulls&lt;<span class="built_in">Int</span>&gt;(<span class="number">5</span>)</div><div class="line"></div><div class="line"><span class="comment">//长度为 0 的空数组</span></div><div class="line"><span class="keyword">val</span> empty = emptyArray&lt;<span class="built_in">Int</span>&gt;()</div><div class="line"></div><div class="line"><span class="comment">//访问数组元素</span></div><div class="line"><span class="keyword">val</span> arr4 = arrayOf(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</div><div class="line">println(arr4[<span class="number">1</span>])         <span class="comment">//输出“2”，建议用这个方法</span></div><div class="line">println(arr4.<span class="keyword">get</span>(<span class="number">1</span>))     <span class="comment">//输出“2”</span></div><div class="line"></div><div class="line"><span class="comment">//修改元素</span></div><div class="line">arr4[<span class="number">1</span>] = <span class="number">10</span></div><div class="line">println(arr4[<span class="number">1</span>])        <span class="comment">//输出“10”</span></div><div class="line"></div><div class="line"><span class="comment">//遍历数组</span></div><div class="line"><span class="keyword">for</span> (arr <span class="keyword">in</span> arr4) &#123;</div><div class="line">    println(arr)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//遍历数组下标</span></div><div class="line"><span class="keyword">for</span> (arr <span class="keyword">in</span> arr4.indices) &#123;</div><div class="line">    println(arr)</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="控制流"><a href="#控制流" class="headerlink" title="控制流"></a>控制流</h1><h2 id="If表达式"><a href="#If表达式" class="headerlink" title="If表达式"></a>If表达式</h2><p>用法和 Java 一样，Kotlin 里可以作为一个表达式，返回一个值。<br><figure class="highlight kotlin"><table><tr><td class="code"><pre><div class="line"><span class="keyword">val</span> l = <span class="number">4</span></div><div class="line"><span class="keyword">val</span> m = <span class="number">5</span></div><div class="line"><span class="comment">// 作为表达式</span></div><div class="line"><span class="keyword">val</span> n = <span class="keyword">if</span> (l &gt; m) l <span class="keyword">else</span> m</div></pre></td></tr></table></figure></p><h2 id="When-表达式"><a href="#When-表达式" class="headerlink" title="When 表达式"></a>When 表达式</h2><p>When 取代 Java switch 操作符。<br><figure class="highlight kotlin"><table><tr><td class="code"><pre><div class="line"><span class="keyword">val</span> o = <span class="number">3</span></div><div class="line"><span class="keyword">when</span> (o) &#123;</div><div class="line">    <span class="number">1</span> -&gt; print(<span class="string">"o == 1"</span>)</div><div class="line">    <span class="number">2</span> -&gt; print(<span class="string">"o == 2"</span>)</div><div class="line">    <span class="keyword">else</span> -&gt; &#123;</div><div class="line">        print(<span class="string">"o == 3"</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="For-循环"><a href="#For-循环" class="headerlink" title="For 循环"></a>For 循环</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><div class="line"><span class="keyword">val</span> arr5 = arrayOf(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</div><div class="line"><span class="keyword">for</span> (arr <span class="keyword">in</span> arr5) &#123;</div><div class="line">    println(arr)</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="While-循环"><a href="#While-循环" class="headerlink" title="While 循环"></a>While 循环</h2><p>用法和 Java一样。</p><h1 id="函数声明"><a href="#函数声明" class="headerlink" title="函数声明"></a>函数声明</h1><p>使用 fun 关键字声明。<br><figure class="highlight kotlin"><table><tr><td class="code"><pre><div class="line"><span class="comment">//返回类型 Int</span></div><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">sum</span><span class="params">(p: <span class="type">Int</span>, q: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> &#123;</div><div class="line">    <span class="keyword">return</span> p + q</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//表达式作为返回值</span></div><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">sum</span><span class="params">(p: <span class="type">Int</span>, q: <span class="type">Int</span>)</span></span> = p + q</div><div class="line"></div><div class="line"><span class="comment">//函数返回无意义的值，相当于 Java 里的 void</span></div><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">sum</span><span class="params">(p: <span class="type">Int</span>, q: <span class="type">Int</span>)</span></span>: <span class="built_in">Unit</span>&#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//Unit 返回类型可以省略：</span></div><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">sum</span><span class="params">(p: <span class="type">Int</span>, q: <span class="type">Int</span>)</span></span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h1 id="空安全"><a href="#空安全" class="headerlink" title="空安全"></a>空安全</h1><p>问号表示该变量可以为空。<br><figure class="highlight kotlin"><table><tr><td class="code"><pre><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</div><div class="line">        setContentView(R.layout.activity_main)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h1 id="定义类"><a href="#定义类" class="headerlink" title="定义类"></a>定义类</h1><p>使用 class 关键字声明类。<br><figure class="highlight kotlin"><table><tr><td class="code"><pre><div class="line"><span class="comment">//冒号表示继承</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> : <span class="type">AppCompatActivity</span></span>() &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;通过这篇博客，让我们对 Kotlin 语法有个大概了解。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;变量&quot;&gt;&lt;a href=&quot;#变量&quot; class=&quot;headerlink&quot; title=&quot;变量&quot;&gt;&lt;/a&gt;变量&lt;/h1&gt;&lt;p&gt;变量有可变和不可变，可以用 var 和 val 声明。&lt;br&gt;
    
    </summary>
    
      <category term="Kotlin" scheme="http://wuxiaolong.me/categories/Kotlin/"/>
    
    
      <category term="Kotlin" scheme="http://wuxiaolong.me/tags/Kotlin/"/>
    
  </entry>
  
  <entry>
    <title>Kotlin for Android（一）准备工作</title>
    <link href="http://wuxiaolong.me/2017/05/21/kotlin1/"/>
    <id>http://wuxiaolong.me/2017/05/21/kotlin1/</id>
    <published>2017-05-21T02:04:43.000Z</published>
    <updated>2017-06-01T08:03:40.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>从零开始，对比 Kotlin 与 Java，差异化学习 ，循序渐进。工欲善其事，必先利其器，有了 Kotlin 的 IDE，才能更好地进行下一步。</p></blockquote><h1 id="Kotlin是什么"><a href="#Kotlin是什么" class="headerlink" title="Kotlin是什么"></a>Kotlin是什么</h1><p>近日召开的 Google IO 2017 ， Google 将 Kotlin 列为 Android 官方开发语言了，Android Studio 3.0 也默认集成了 Kotlin plugin，那 Kotlin 是什么？<br><a id="more"></a></p><h2 id="维基百科"><a href="#维基百科" class="headerlink" title="维基百科"></a>维基百科</h2><p><strong>Kotlin</strong><br>Kotlin 是一种在 Java 虚拟机上运行的静态类型编程语言，它也可以被编译成为 JavaScript 源代码。它主要是由俄罗斯圣彼得堡的 JetBrains 开发团队所发展出来的编程语言，其名称来自于圣彼得堡附近的科特林岛。2012 年 1 月，著名期刊《 Dr. Dobb’s Journal 》中 Kotlin 被认定为该月的最佳语言。虽然与 Java 语法并不兼容，但 Kotlin 被设计成可以和 Java 代码相互运作，并可以重复使用如 Java 集合框架等的现有 Java 类库。</p><p><strong>历史</strong><br>2011 年 7 月，JetBrains 推出 Kotlin 项目，这是一个面向 JVM 的新语言，它已被开发一年之久。JetBrains 负责人Dmitry Jemerov 说，大多数语言没有他们正在寻找的特性，Scala 除外，他指出了 Scala 的编译时间慢这一明显缺陷。Kotlin 的既定目标之一是像 Java 一样快速编译。</p><p>2012 年 2 月，JetBrains 以 Apache 2 许可证开源此项目，Jetbrains 希望这个新语言能够推动 IntelliJ IDEA 的销售。</p><p>Kotlin v1.0 于 2016 年 2 月 15 日发布。这被认为是第一个官方稳定版本，并且 JetBrains 已准备从该版本开始的长期向后兼容性。</p><p>在 Google I/O 2017 中，Google 宣布在 Android 上为 Kotlin 提供支持。</p><h1 id="Kotlin-for-Android-Studio"><a href="#Kotlin-for-Android-Studio" class="headerlink" title="Kotlin for Android Studio"></a>Kotlin for Android Studio</h1><h2 id="安装-Kotlin-插件"><a href="#安装-Kotlin-插件" class="headerlink" title="安装 Kotlin 插件"></a>安装 Kotlin 插件</h2><p>Android Studio 3.0 已经有了 Kotlin 插件，目前 Android Studio 3.0还是预览版本，如果您是更早的版本，点击 Android Studio | File | Settings | Plugins，搜索 Kotlin ，安装，重启 Android Studio 。</p><h2 id="创建工程"><a href="#创建工程" class="headerlink" title="创建工程"></a>创建工程</h2><p>点击 Android Studio | File | New project :<br><img src="http://7q5c2h.com1.z0.glb.clouddn.com/kotlin1.png?watermark/2/text/5ZC05bCP6b6Z5ZCM5a24/font/5qW35L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""><br>这里 Android Studio 3.0 多个选项，后文会讲勾上了会有什么不一样，然后就是一路 Next 即可。</p><h2 id="Converting-Java-code-to-Kotlin"><a href="#Converting-Java-code-to-Kotlin" class="headerlink" title="Converting Java code to Kotlin"></a>Converting Java code to Kotlin</h2><p>打开 MainActivity.java， 点击菜单栏 Code | Convert Java File to Kotlin File ，这里可以将 Java 文件转成 Kotlin 文件，于是 MainActivity 变成了:<br><figure class="highlight kotlin"><table><tr><td class="code"><pre><div class="line"><span class="comment">//冒号表示继承</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> : <span class="type">AppCompatActivity</span></span>() &#123;</div><div class="line">    <span class="comment">//问号表示该变量可以为空</span></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</div><div class="line">        setContentView(R.layout.activity_main)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="Configure-Gradle"><a href="#Configure-Gradle" class="headerlink" title="Configure Gradle"></a>Configure Gradle</h2><p>如果您继续编辑，会有 Kotlin is not configured 提示，需要我们配置:<br><img src="http://7q5c2h.com1.z0.glb.clouddn.com/kotlin2.png?watermark/2/text/5ZC05bCP6b6Z5ZCM5a24/font/5qW35L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""><br>选择最新版本的 Kotlin ，点击 OK :<br><img src="http://7q5c2h.com1.z0.glb.clouddn.com/kotlin3.png?watermark/2/text/5ZC05bCP6b6Z5ZCM5a24/font/5qW35L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""></p><p>发现项目的 build.gradle 变化了:<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">buildscript &#123;</div><div class="line">    ext.kotlin_version = <span class="string">'1.1.2-4'</span></div><div class="line">    repositories &#123;</div><div class="line">        jcenter()</div><div class="line">    &#125;</div><div class="line">    dependencies &#123;</div><div class="line">        <span class="comment">//……</span></div><div class="line">        <span class="comment">//编译 Kotlin 源代码和模块.</span></div><div class="line">        classpath <span class="string">"org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>app/build.gradle :<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">apply plugin: <span class="string">'com.android.application'</span></div><div class="line">apply plugin: <span class="string">'kotlin-android'</span></div><div class="line"></div><div class="line">android &#123;</div><div class="line">    <span class="comment">//……</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">dependencies &#123;</div><div class="line">    <span class="comment">//……</span></div><div class="line">    <span class="comment">//针对 JDK 7 或 JDK 8</span></div><div class="line">    compile <span class="string">"org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>说明: Android Studio 3.0 创建工程时，如果我们勾上了 Include Kotlin support ，这些 Kotlin Gradle 配置就已经有了。 </p><h2 id="创建-Kotlin-文件"><a href="#创建-Kotlin-文件" class="headerlink" title="创建 Kotlin 文件"></a>创建 Kotlin 文件</h2><p>Android Studio 3.0 以下:<br><img src="http://7q5c2h.com1.z0.glb.clouddn.com/kotlin4.png?watermark/2/text/5ZC05bCP6b6Z5ZCM5a24/font/5qW35L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""><br>New 的时候，发现已经有了这两个选项，但是 Android Studio 3.0 没有这个 Kotlin Activity 选项，而是在创建 Activity ，默认源码语言就是 Kotlin :<br><img src="http://7q5c2h.com1.z0.glb.clouddn.com/kotlin5.png?watermark/2/text/5ZC05bCP6b6Z5ZCM5a24/font/5qW35L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""><br>从 Android Studio 3.0 对 Kotlin 很好的支持，说明 Google 对 Kotlin 不是仅仅停留在口头上支持，有空我们就学学 Kotlin ，大势所趋，就像当初 Android Studio 一样。</p><h1 id="Kotlin-学习资料"><a href="#Kotlin-学习资料" class="headerlink" title="Kotlin 学习资料"></a>Kotlin 学习资料</h1><p>Kotlin 官方网站<br><a href="http://kotlinlang.org/docs/reference/" target="_blank" rel="noopener">http://kotlinlang.org/docs/reference/</a></p><p>Kotlin 官方网站 - 中文翻译<br><a href="https://www.kotlincn.net/docs/reference/" target="_blank" rel="noopener">https://www.kotlincn.net/docs/reference/</a></p><p>《Kotlin for android Developers》中文翻译<br><a href="https://www.gitbook.com/book/wangjiegulu/kotlin-for-android-developers-zh/details" target="_blank" rel="noopener">https://www.gitbook.com/book/wangjiegulu/kotlin-for-android-developers-zh/details</a></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>Getting started with Android and Kotlin<br><a href="https://www.kotlincn.net/docs/tutorials/kotlin-android.html" target="_blank" rel="noopener">https://www.kotlincn.net/docs/tutorials/kotlin-android.html</a></p><p>Get Started with Kotlin on Android<br><a href="https://developer.android.google.cn/kotlin/get-started.html" target="_blank" rel="noopener">https://developer.android.google.cn/kotlin/get-started.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;从零开始，对比 Kotlin 与 Java，差异化学习 ，循序渐进。工欲善其事，必先利其器，有了 Kotlin 的 IDE，才能更好地进行下一步。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;Kotlin是什么&quot;&gt;&lt;a href=&quot;#Kotlin是什么&quot; class=&quot;headerlink&quot; title=&quot;Kotlin是什么&quot;&gt;&lt;/a&gt;Kotlin是什么&lt;/h1&gt;&lt;p&gt;近日召开的 Google IO 2017 ， Google 将 Kotlin 列为 Android 官方开发语言了，Android Studio 3.0 也默认集成了 Kotlin plugin，那 Kotlin 是什么？&lt;br&gt;
    
    </summary>
    
      <category term="Kotlin" scheme="http://wuxiaolong.me/categories/Kotlin/"/>
    
    
      <category term="Kotlin" scheme="http://wuxiaolong.me/tags/Kotlin/"/>
    
  </entry>
  
  <entry>
    <title>Android 电量优化</title>
    <link href="http://wuxiaolong.me/2017/04/27/AndroidBattery/"/>
    <id>http://wuxiaolong.me/2017/04/27/AndroidBattery/</id>
    <published>2017-04-27T12:42:58.000Z</published>
    <updated>2017-11-27T12:48:29.672Z</updated>
    
    <content type="html"><![CDATA[<h1 id="为什么优化"><a href="#为什么优化" class="headerlink" title="为什么优化"></a>为什么优化</h1><p>现在智能手机基本能一天一充，如果一个应用耗电过多，肯定是有问题的，而开发中电量的优化可能是最容易被忽略的。</p><h1 id="如何检测"><a href="#如何检测" class="headerlink" title="如何检测"></a>如何检测</h1><p>1、手机设置-电池使用情况，查看电量消耗；</p><p>2、使用 <a href="https://github.com/google/battery-historianl" target="_blank" rel="noopener">Battery Historian</a> 配置电池使用情况。</p><h1 id="优化方案"><a href="#优化方案" class="headerlink" title="优化方案"></a>优化方案</h1><a id="more"></a><h2 id="监控充电状态和电池电量"><a href="#监控充电状态和电池电量" class="headerlink" title="监控充电状态和电池电量"></a>监控充电状态和电池电量</h2><h3 id="确定当前充电状态"><a href="#确定当前充电状态" class="headerlink" title="确定当前充电状态"></a>确定当前充电状态</h3><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">IntentFilter ifilter = <span class="keyword">new</span> IntentFilter(Intent.ACTION_BATTERY_CHANGED);</div><div class="line">Intent batteryStatus = context.registerReceiver(<span class="keyword">null</span>, ifilter);</div></pre></td></tr></table></figure><p>简单地调用 registerReceiver 传入 null 作为接收器来注册 BroadcastReceiver，便可返回当前电池状态 Intent。<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 充电状态</span></div><div class="line"><span class="keyword">int</span> status = batteryStatus.getIntExtra(BatteryManager.EXTRA_STATUS, -<span class="number">1</span>);</div><div class="line"><span class="keyword">boolean</span> isCharging = status == BatteryManager.BATTERY_STATUS_CHARGING ||</div><div class="line">        status == BatteryManager.BATTERY_STATUS_FULL;</div><div class="line">Log.d(<span class="string">"wxl"</span>, <span class="string">"isCharging="</span> + isCharging);</div><div class="line">Toast.makeText(<span class="keyword">this</span>,<span class="string">"isCharging="</span> + isCharging,Toast.LENGTH_LONG).show();</div><div class="line"><span class="comment">// 设备是通过 USB 还是交流充电器进行充电</span></div><div class="line"><span class="keyword">int</span> chargePlug = batteryStatus.getIntExtra(BatteryManager.EXTRA_PLUGGED, -<span class="number">1</span>);</div><div class="line"><span class="keyword">boolean</span> usbCharge = chargePlug == BatteryManager.BATTERY_PLUGGED_USB;</div><div class="line"><span class="keyword">boolean</span> acCharge = chargePlug == BatteryManager.BATTERY_PLUGGED_AC;</div><div class="line">Log.d(<span class="string">"wxl"</span>, <span class="string">"usbCharge="</span> + usbCharge + <span class="string">",acCharge="</span> + acCharge);</div><div class="line">Toast.makeText(<span class="keyword">this</span>,<span class="string">"usbCharge="</span> + usbCharge + <span class="string">",acCharge="</span> + acCharge,Toast.LENGTH_LONG).show();</div></pre></td></tr></table></figure></p><h3 id="监控充电状态变化"><a href="#监控充电状态变化" class="headerlink" title="监控充电状态变化"></a>监控充电状态变化</h3><p>清单文件中注册一个 BroadcastReceiver，通过在一个 Intent 过滤器内定义 ACTION_POWER_CONNECTED 和 ACTION_POWER_DISCONNECTED 来同时侦听这两种事件。<br><figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">receiver</span> <span class="attr">android:name</span>=<span class="string">".PowerConnectionReceiver"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.ACTION_POWER_CONNECTED"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.ACTION_POWER_DISCONNECTED"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">receiver</span>&gt;</span></div></pre></td></tr></table></figure></p><p>PowerConnectionReceiver<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PowerConnectionReceiver</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> status = intent.getIntExtra(BatteryManager.EXTRA_STATUS, BatteryManager.BATTERY_STATUS_UNKNOWN);</div><div class="line">        String batteryStatus = <span class="string">""</span>;</div><div class="line">        <span class="keyword">switch</span> (status) &#123;</div><div class="line">            <span class="keyword">case</span> BatteryManager.BATTERY_STATUS_CHARGING:</div><div class="line">                batteryStatus = <span class="string">"正在充电"</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> BatteryManager.BATTERY_STATUS_DISCHARGING:</div><div class="line">                batteryStatus = <span class="string">"正在放电"</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> BatteryManager.BATTERY_STATUS_NOT_CHARGING:</div><div class="line">                batteryStatus = <span class="string">"未充电"</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> BatteryManager.BATTERY_STATUS_FULL:</div><div class="line">                batteryStatus = <span class="string">"充满电"</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> BatteryManager.BATTERY_STATUS_UNKNOWN:</div><div class="line">                batteryStatus = <span class="string">"未知道状态"</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        Toast.makeText(context, <span class="string">"batteryStatus="</span> + batteryStatus, Toast.LENGTH_LONG).show();</div><div class="line"></div><div class="line">        <span class="keyword">int</span> plugged = intent.getIntExtra(BatteryManager.EXTRA_PLUGGED, BatteryManager.BATTERY_PLUGGED_AC);</div><div class="line">        String chargePlug = <span class="string">""</span>;</div><div class="line">        <span class="keyword">switch</span> (plugged) &#123;</div><div class="line">            <span class="keyword">case</span> BatteryManager.BATTERY_PLUGGED_AC:</div><div class="line">                chargePlug = <span class="string">"AC充电"</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> BatteryManager.BATTERY_PLUGGED_USB:</div><div class="line">                chargePlug = <span class="string">"USB充电"</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> BatteryManager.BATTERY_PLUGGED_WIRELESS:</div><div class="line">                chargePlug = <span class="string">"无线充电"</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        Toast.makeText(context, <span class="string">"chargePlug="</span> + chargePlug, Toast.LENGTH_LONG).show();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>注册<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">IntentFilter intentFilter = <span class="keyword">new</span> IntentFilter();</div><div class="line">intentFilter.addAction(Intent.ACTION_BATTERY_CHANGED);</div><div class="line"><span class="keyword">this</span>.registerReceiver(<span class="keyword">new</span> PowerConnectionReceiver(), intentFilter);</div></pre></td></tr></table></figure></p><h3 id="监控电池电量变化"><a href="#监控电池电量变化" class="headerlink" title="监控电池电量变化"></a>监控电池电量变化</h3><p>清单文件中注册一个 BroadcastReceiver，通过侦听 ACTION_BATTERY_LOW 和 ACTION_BATTERY_OKAY，每当设备电池电量不足或退出不足状态时，便会触发该接收器。<br><figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">receiver</span> <span class="attr">android:name</span>=<span class="string">".BatteryLevelReceiver"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.ACTION_BATTERY_LOW"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.ACTION_BATTERY_OKAY"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">receiver</span>&gt;</span></div></pre></td></tr></table></figure></p><p>BatteryLevelReceiver<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BatteryLevelReceiver</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</div><div class="line">        <span class="comment">//当前剩余电量</span></div><div class="line">        <span class="keyword">int</span> level = intent.getIntExtra(BatteryManager.EXTRA_LEVEL, -<span class="number">1</span>);</div><div class="line">        <span class="comment">//电量最大值</span></div><div class="line">        <span class="keyword">int</span> scale = intent.getIntExtra(BatteryManager.EXTRA_SCALE, -<span class="number">1</span>);</div><div class="line">        <span class="comment">//电量百分比</span></div><div class="line">        <span class="keyword">float</span> batteryPct = level / (<span class="keyword">float</span>) scale;</div><div class="line">        Log.d(<span class="string">"wxl"</span>, <span class="string">"batteryPct="</span> + batteryPct);</div><div class="line">        Toast.makeText(context, <span class="string">"batteryPct="</span> + batteryPct, Toast.LENGTH_LONG).show();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>注册<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">IntentFilter intentFilter = <span class="keyword">new</span> IntentFilter();</div><div class="line">intentFilter.addAction(Intent.ACTION_BATTERY_CHANGED);</div><div class="line"><span class="keyword">this</span>.registerReceiver(<span class="keyword">new</span> BatteryLevelReceiver(), intentFilter);</div></pre></td></tr></table></figure></p><p>通常，如果设备连接了交流充电器，您应该最大限度提高后台更新的频率；而如果设备是通过 USB 充电，则应降低更新频率，如果电池正在放电，则应进一步降低更新频率；在电池电量极低时停用所有后台更新。</p><h2 id="屏幕保持常亮"><a href="#屏幕保持常亮" class="headerlink" title="屏幕保持常亮"></a>屏幕保持常亮</h2><p>当设备从休眠状态中，被应用程序唤醒一瞬间会耗电过多，我们可以保持屏幕常亮来节省电量，代码声明：<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">//屏幕保持常亮</span></div><div class="line">getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);</div><div class="line"><span class="comment">//一般不需要人为的去掉 FLAG_KEEP_SCREEN_ON 的 flag，windowManager 会管理好程序进入后台回到前台的的操作</span></div><div class="line"><span class="comment">//getWindow().clearFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);</span></div></pre></td></tr></table></figure></p><p>或者，直接在布局中加上 keepScreenOn=true ：<br><figure class="highlight xml"><table><tr><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">android.support.constraint.ConstraintLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:keepScreenOn</span>=<span class="string">"true"</span></div><div class="line">    <span class="attr">tools:context</span>=<span class="string">"com.wuxiaolong.batterysample.MainActivity"</span>&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">android.support.constraint.ConstraintLayout</span>&gt;</span></div></pre></td></tr></table></figure></p><h2 id="JobScheduler-使用"><a href="#JobScheduler-使用" class="headerlink" title="JobScheduler 使用"></a>JobScheduler 使用</h2><p>需要在稍后的某个时间点或者当满足某个特定的条件时执行一个任务，例如当设备接通电源适配器或者连接到 WIFI，在 API 21，google 提供了一个新叫做 JobScheduler API 的组件来处理这样的场景。JobScheduler API 允许同时执行多个任务，执行某些指定的任务时不需要考虑时机控制引起的电池消耗。<br>官方 demo 地址：<a href="https://github.com/googlesamples/android-JobScheduler" target="_blank" rel="noopener">https://github.com/googlesamples/android-JobScheduler</a></p><h2 id="低电耗模式和应用待机模式"><a href="#低电耗模式和应用待机模式" class="headerlink" title="低电耗模式和应用待机模式"></a>低电耗模式和应用待机模式</h2><p>从 Android 6.0（API 级别 23）开始，Android 引入了两个省电功能，可通过管理应用在设备未连接至电源时的行为方式为用户延长电池寿命。低电耗模式通过在设备长时间处于闲置状态时推迟应用的后台 CPU 和网络 Activity 来减少电池消耗。应用待机模式可推迟用户近期未与之交互的应用的后台网络 Activity。</p><h3 id="低电耗模式"><a href="#低电耗模式" class="headerlink" title="低电耗模式"></a>低电耗模式</h3><p>如果用户设备未插接电源、处于静止状态一段时间且屏幕关闭，设备会进入低电耗模式。 在低电耗模式下，系统会尝试通过限制应用对网络和 CPU 密集型服务的访问来节省电量。这还可以阻止应用访问网络并推迟其作业、同步和标准闹铃。</p><p>在低电耗模式下，您的应用会受到以下限制：</p><ul><li>暂停访问网络。</li><li>系统将忽略 wake locks。</li><li>标准 AlarmManager 闹铃（包括 setExact() 和 setWindow()）推迟到下一维护时段。<ul><li>如果您需要设置在低电耗模式下触发的闹铃，请使用 setAndAllowWhileIdle() 或 setExactAndAllowWhileIdle()。</li><li>一般情况下，使用 setAlarmClock() 设置的闹铃将继续触发 — 但系统会在这些闹铃触发之前不久退出低电耗模式。</li></ul></li><li>系统不执行 Wi-Fi 扫描。</li><li>系统不允许运行同步适配器。</li><li>系统不允许运行 JobScheduler。</li></ul><p>低电耗模式很容易影响 AlarmManager 闹铃和定时器管理的 Activity，因为当系统处于低电耗模式时，不会触发 Android 5.1（API 级别 22）或更低版本中的闹铃。</p><p>为了帮助您安排闹铃，Android 6.0（API 级别 23）引入了两种新的 AlarmManager 方法：setAndAllowWhileIdle() 和 setExactAndAllowWhileIdle()。通过这些方法，您可以设置即使设备处于低电耗模式也会触发的闹铃。</p><h3 id="应用待机模式"><a href="#应用待机模式" class="headerlink" title="应用待机模式"></a>应用待机模式</h3><p>应用待机模式允许系统判定应用在用户未主动使用它时处于空闲状态。 当用户有一段时间未触摸应用时，系统便会作出此判定，以下条件均不适用：</p><ul><li>用户显式启动应用。</li><li>应用当前有一个进程位于前台（表现为 Activity 或前台服务形式，或被另一 Activity 或前台服务占用）。</li><li>应用生成用户可在锁屏或通知托盘中看到的通知。</li></ul><p>当用户将设备插入电源时，系统将从待机状态释放应用，从而让它们可以自由访问网络并执行任何待定作业和同步。 如果设备长时间处于空闲状态，系统将按每天大约一次的频率允许空闲应用访问网络。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://developer.android.google.cn/training/monitoring-device-state/index.html" target="_blank" rel="noopener">https://developer.android.google.cn/training/monitoring-device-state/index.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;为什么优化&quot;&gt;&lt;a href=&quot;#为什么优化&quot; class=&quot;headerlink&quot; title=&quot;为什么优化&quot;&gt;&lt;/a&gt;为什么优化&lt;/h1&gt;&lt;p&gt;现在智能手机基本能一天一充，如果一个应用耗电过多，肯定是有问题的，而开发中电量的优化可能是最容易被忽略的。&lt;/p&gt;
&lt;h1 id=&quot;如何检测&quot;&gt;&lt;a href=&quot;#如何检测&quot; class=&quot;headerlink&quot; title=&quot;如何检测&quot;&gt;&lt;/a&gt;如何检测&lt;/h1&gt;&lt;p&gt;1、手机设置-电池使用情况，查看电量消耗；&lt;/p&gt;
&lt;p&gt;2、使用 &lt;a href=&quot;https://github.com/google/battery-historianl&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Battery Historian&lt;/a&gt; 配置电池使用情况。&lt;/p&gt;
&lt;h1 id=&quot;优化方案&quot;&gt;&lt;a href=&quot;#优化方案&quot; class=&quot;headerlink&quot; title=&quot;优化方案&quot;&gt;&lt;/a&gt;优化方案&lt;/h1&gt;
    
    </summary>
    
      <category term="Performance" scheme="http://wuxiaolong.me/categories/Performance/"/>
    
    
      <category term="Battery" scheme="http://wuxiaolong.me/tags/Battery/"/>
    
  </entry>
  
  <entry>
    <title>Android 内存优化</title>
    <link href="http://wuxiaolong.me/2017/04/15/memory/"/>
    <id>http://wuxiaolong.me/2017/04/15/memory/</id>
    <published>2017-04-15T14:01:28.000Z</published>
    <updated>2017-04-16T12:46:50.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="为什么优化"><a href="#为什么优化" class="headerlink" title="为什么优化"></a>为什么优化</h1><p>虽然 Java 对内存的释放有垃圾自动回收机制，但是实际开发中，不再用到的对象因为被错误引用会导致无法回收，从而造成内存泄漏，甚至内存溢出 OOM（OutOfMemory），程序崩溃。<br><a id="more"></a></p><h2 id="Android-GC-原理"><a href="#Android-GC-原理" class="headerlink" title="Android GC 原理"></a>Android GC 原理</h2><p>参考：<a href="https://mp.weixin.qq.com/s/CUU3Ml394H_fkabhNNX32Q" target="_blank" rel="noopener">Android GC 原理探究</a></p><h2 id="Android-内存管理"><a href="#Android-内存管理" class="headerlink" title="Android 内存管理"></a>Android 内存管理</h2><p>参考：<a href="https://developer.android.google.cn/topic/performance/memory-overview.html" target="_blank" rel="noopener">Android 内存管理</a></p><h1 id="如何检测"><a href="#如何检测" class="headerlink" title="如何检测"></a>如何检测</h1><h2 id="使用-LeakCanary"><a href="#使用-LeakCanary" class="headerlink" title="使用 LeakCanary"></a>使用 LeakCanary</h2><p>Android 内存泄漏检测库：<a href="https://github.com/square/leakcanary" target="_blank" rel="noopener">https://github.com/square/leakcanary</a> ，善于使用 LeakCanary 发现内存泄漏。</p><h2 id="Memory-Monitor工具"><a href="#Memory-Monitor工具" class="headerlink" title="Memory Monitor工具"></a>Memory Monitor工具</h2><p>Android Studio 中的 Android Monitor ，选择其中的 Memory，<strong>跟踪整个 APP 的内存变化情况</strong>。<br>步骤如下：<br>1、与您的应用交互，在 Memory 监视器中，查看 Free 和 Alloated 内存。<br>2、点击 Dump Java Heap：<img src="http://7q5c2h.com1.z0.glb.clouddn.com/monitor-heap-dump.png" alt="">，这个会打开 HPROF 查看器，如果没有，在 Captures 标签中，双击堆快照文件以打开 HPROF 查看器。<br>3、要引起堆分配，请与您的应用交互，然后点击触发 GC 的按钮： <img src="http://7q5c2h.com1.z0.glb.clouddn.com/monitor-garbage-collect.png" alt=""></p><h2 id="Heap-Viewer-工具"><a href="#Heap-Viewer-工具" class="headerlink" title="Heap Viewer 工具"></a>Heap Viewer 工具</h2><p><strong>实时查看App分配的内存大小和空闲内存大小，发现 Memory Leaks</strong> 。<br>详细使用教程：<a href="https://www.kancloud.cn/digest/itfootballprefermanc/100907" target="_blank" rel="noopener">Heap Viewer工具</a></p><h2 id="Allocation-Tracker"><a href="#Allocation-Tracker" class="headerlink" title="Allocation Tracker"></a>Allocation Tracker</h2><p><strong>追踪内存对象的来源</strong>。<br>详细使用教程：<a href="https://www.kancloud.cn/digest/itfootballprefermanc/100908" target="_blank" rel="noopener">Allocation Tracker(Device Monitor)</a></p><h1 id="优化方案"><a href="#优化方案" class="headerlink" title="优化方案"></a>优化方案</h1><h2 id="检查使用多少内存"><a href="#检查使用多少内存" class="headerlink" title="检查使用多少内存"></a>检查使用多少内存</h2><p>每个 APP 的堆（heap）内存大小有硬性限制，如果您的 APP 已达到堆内存限制，并尝试分配更多的内存，系统会抛出 OutOfMemoryError 。为了避免 OOM ，您可以查询当前设备有多少堆空间，可以通过调用系统 getMemoryInfo() 查询，返回 一个ActivityManager.MemoryInfo 对象，它提供该设备当前存储器的状态信息，包括可用的存储器，总存储器，和低于该阈值存储器。<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">getMemoryInfo</span><span class="params">()</span> </span>&#123;</div><div class="line">    ActivityManager activityManager = (ActivityManager) <span class="keyword">this</span>.getSystemService(ACTIVITY_SERVICE);</div><div class="line">    ActivityManager.MemoryInfo memoryInfo = <span class="keyword">new</span> ActivityManager.MemoryInfo();</div><div class="line">    activityManager.getMemoryInfo(memoryInfo);</div><div class="line">    LogUtil.d(<span class="string">"totalMem="</span> + memoryInfo.totalMem + <span class="string">",availMem="</span> + memoryInfo.availMem);</div><div class="line">    <span class="keyword">if</span> (!memoryInfo.lowMemory) &#123;</div><div class="line">        <span class="comment">// 运行在低内存环境</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="当界面不可见时释放内存"><a href="#当界面不可见时释放内存" class="headerlink" title="当界面不可见时释放内存"></a>当界面不可见时释放内存</h2><p>实现 <a href="https://developer.android.google.cn/reference/android/content/ComponentCallbacks2.html" target="_blank" rel="noopener">ComponentCallbacks2</a> API 中 <a href="https://developer.android.google.cn/reference/android/content/ComponentCallbacks2.html#onTrimMemory(int" target="_blank" rel="noopener">onTrimMemory()</a>) ，当回调参数 level 为 TRIM_MEMORY_UI_HIDDEN ，是用户点击了Home键或者Back键退出应用，所有UI界面被隐藏，这时候应该释放一些不可见的时候非必须的资源。<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span></span></div><div class="line">    <span class="keyword">implements</span> <span class="title">ComponentCallbacks2</span> &#123;</div><div class="line">    <span class="comment">// Other activity code ...</span></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Release memory when the UI becomes hidden or when system resources become low.</div><div class="line">     * <span class="doctag">@param</span> level the memory-related event that was raised.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onTrimMemory</span><span class="params">(<span class="keyword">int</span> level)</span> </span>&#123;</div><div class="line">        <span class="comment">// Determine which lifecycle or system event was raised.</span></div><div class="line">        <span class="keyword">switch</span> (level) &#123;</div><div class="line">            <span class="keyword">case</span> ComponentCallbacks2.TRIM_MEMORY_UI_HIDDEN:</div><div class="line">                <span class="comment">/*</span></div><div class="line">                   Release any UI objects that currently hold memory.</div><div class="line">                   The user interface has moved to the background.</div><div class="line">                */</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> ComponentCallbacks2.TRIM_MEMORY_RUNNING_MODERATE:</div><div class="line">            <span class="keyword">case</span> ComponentCallbacks2.TRIM_MEMORY_RUNNING_LOW:</div><div class="line">            <span class="keyword">case</span> ComponentCallbacks2.TRIM_MEMORY_RUNNING_CRITICAL:</div><div class="line">                <span class="comment">/*</span></div><div class="line">                   Release any memory that your app doesn't need to run.</div><div class="line">                   The device is running low on memory while the app is running.</div><div class="line">                   The event raised indicates the severity of the memory-related event.</div><div class="line">                   If the event is TRIM_MEMORY_RUNNING_CRITICAL, then the system will</div><div class="line">                   begin killing background processes.</div><div class="line">                */</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> ComponentCallbacks2.TRIM_MEMORY_BACKGROUND:</div><div class="line">            <span class="keyword">case</span> ComponentCallbacks2.TRIM_MEMORY_MODERATE:</div><div class="line">            <span class="keyword">case</span> ComponentCallbacks2.TRIM_MEMORY_COMPLETE:</div><div class="line">                <span class="comment">/*</span></div><div class="line">                   Release as much memory as the process can.</div><div class="line">                   The app is on the LRU list and the system is running low on memory.</div><div class="line">                   The event raised indicates where the app sits within the LRU list.</div><div class="line">                   If the event is TRIM_MEMORY_COMPLETE, the process will be one of</div><div class="line">                   the first to be terminated.</div><div class="line">                */</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">default</span>:</div><div class="line">                <span class="comment">/*</span></div><div class="line">                  Release any non-critical data structures.</div><div class="line">                  The app received an unrecognized memory level value</div><div class="line">                  from the system. Treat this as a generic low-memory message.</div><div class="line">                */</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>该 onTrimMemory() 回调是在搭载Android 4.0（API级别14）加入。对于早期版本，您可以使用 onLowMemory() 回调作为旧版本的回调，这大致相当于 TRIM_MEMORY_COMPLETE事件。</p><h2 id="谨慎使用服务"><a href="#谨慎使用服务" class="headerlink" title="谨慎使用服务"></a>谨慎使用服务</h2><p>离开了 APP 还在运行服务是最糟糕的内存管理错误之一，当 APP 处在后台，我们应该停止服务，除非它需要运行的任务。我们可以使用 <a href="https://developer.android.google.cn/topic/performance/background-optimization.html" target="_blank" rel="noopener">JobScheduler</a> 替代实现，<a href="https://developer.android.google.cn/topic/performance/background-optimization.html" target="_blank" rel="noopener">JobScheduler</a> 把一些不是特别紧急的任务放到更合适的时机批量处理。如果必须使用一个服务，最佳方法是使用 <a href="https://developer.android.google.cn/training/run-background-service/index.html" target="_blank" rel="noopener">IntentService</a> ，限制服务寿命，所有请求处理完成后，IntentService 会自动停止。</p><h2 id="使用优化的数据容器"><a href="#使用优化的数据容器" class="headerlink" title="使用优化的数据容器"></a>使用优化的数据容器</h2><p>考虑使用优化过数据的容器 SparseArray / SparseBooleanArray / LongSparseArray 代替 HashMap 等传统数据结构，通用 HashMap 的实现可以说是相当低效的内存，因为它需要为每个映射一个单独的条目对象。</p><h2 id="避免在-Android-上使用枚举"><a href="#避免在-Android-上使用枚举" class="headerlink" title="避免在 Android 上使用枚举"></a>避免在 Android 上使用枚举</h2><p>枚举往往需要两倍多的内存，静态常量更多，我们应该严格避免在 Android 上使用枚举。</p><h2 id="使用-nano-protobufs-序列化数据"><a href="#使用-nano-protobufs-序列化数据" class="headerlink" title="使用 nano protobufs 序列化数据"></a>使用 nano protobufs 序列化数据</h2><p>Protocol buffers 是一个语言中立，平台中立的，可扩展的机制，由谷歌进行序列化结构化数据，类似于 XML 设计的，但是更小，更快，更简单。如果需要为您的数据序列化与协议化，建议使用 nano protobufs。</p><h2 id="避免内存流失"><a href="#避免内存流失" class="headerlink" title="避免内存流失"></a>避免内存流失</h2><p>内存流失可能会导致出现大量的 GC 事件，如自定义组件的 onDraw() ，避免大量创建临时对象，比如 String ，以免频繁触发 GC。GC 事件通常不影响您的 APP 的性能，然而在很短的时间段，发生许多垃圾收集事件可以快速地吃了您的帧时间，系统上时间的都花费在 GC ，就有很少时间做其他的东西像渲染或音频流。</p><h2 id="使用ProGuard来剔除不需要的代码"><a href="#使用ProGuard来剔除不需要的代码" class="headerlink" title="使用ProGuard来剔除不需要的代码"></a>使用ProGuard来剔除不需要的代码</h2><p>使用 ProGuard 来剔除不需要的代码，移除任何冗余的，不必要的，或臃肿的组件，资源或库完善 APP 的内存消耗。</p><h2 id="降低整体尺寸APK"><a href="#降低整体尺寸APK" class="headerlink" title="降低整体尺寸APK"></a>降低整体尺寸APK</h2><p>您可以通过减少 APP 的整体规模显著减少 APP 的内存使用情况。文章：<a href="http://wuxiaolong.me/2017/03/19/ReduceAPKSize/">Android APK瘦身实践</a></p><h2 id="优化布局层次"><a href="#优化布局层次" class="headerlink" title="优化布局层次"></a>优化布局层次</h2><p>通过优化视图层次结构，以减少重叠的 UI 对象的数量来提高性能。文章：<a href="http://wuxiaolong.me/2017/03/26/Rendering/">Android 渲染优化</a></p><h2 id="使用-Dagger-2依赖注入"><a href="#使用-Dagger-2依赖注入" class="headerlink" title="使用 Dagger 2依赖注入"></a>使用 Dagger 2依赖注入</h2><p>依赖注入框架可以简化您写的代码，并提供一个自适应环境测试和便于其他配置的更改。如果打算在您的 APP 使用依赖注入框架，可以考虑用 Dagger 2 ，Dagger 不使用反射扫描 APP 的代码，Dagger 是静态的，意味着它编译时不需要占用运行 Android 应用或内存的使用。</p><h2 id="请小心使用外部库"><a href="#请小心使用外部库" class="headerlink" title="请小心使用外部库"></a>请小心使用外部库</h2><p>外部库的代码往往是未针对移动环境下编写并用于工作在移动客户端上时，可能是低效的。当您决定使用外部库，您可能需要优化该库为移动设备。</p><h2 id="避免Bitmap浪费"><a href="#避免Bitmap浪费" class="headerlink" title="避免Bitmap浪费"></a>避免Bitmap浪费</h2><p>Bitmap是内存消耗的大头，当使用时要及时回收。另外配置：<br>inSampleSize：缩放比例，图片按需加载，避免不必要的大图载入。<br>decode format：解码格式，选择ARGB_8888/RBG_565/ARGB_4444/ALPHA_8，存在很大差异。</p><h2 id="Cursor关闭"><a href="#Cursor关闭" class="headerlink" title="Cursor关闭"></a>Cursor关闭</h2><p>如查询数据库的操作，使用到Cursor，也要对Cursor对象及时关闭。</p><h2 id="监听器的注销"><a href="#监听器的注销" class="headerlink" title="监听器的注销"></a>监听器的注销</h2><p>Android程序里面存在很多需要register与unregister的监听器，手动add的listener，需要记得及时remove这个listener。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://developer.android.google.cn/topic/performance/memory-overview.html" target="_blank" rel="noopener">官网Overview of Android Memory Management</a></p><p><a href="https://developer.android.google.cn/topic/performance/memory.html" target="_blank" rel="noopener">官网Manage Your App’s Memory</a></p><p><a href="http://hukai.me/android-performance-oom/" target="_blank" rel="noopener">Android内存优化之OOM</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;为什么优化&quot;&gt;&lt;a href=&quot;#为什么优化&quot; class=&quot;headerlink&quot; title=&quot;为什么优化&quot;&gt;&lt;/a&gt;为什么优化&lt;/h1&gt;&lt;p&gt;虽然 Java 对内存的释放有垃圾自动回收机制，但是实际开发中，不再用到的对象因为被错误引用会导致无法回收，从而造成内存泄漏，甚至内存溢出 OOM（OutOfMemory），程序崩溃。&lt;br&gt;
    
    </summary>
    
      <category term="Performance" scheme="http://wuxiaolong.me/categories/Performance/"/>
    
    
      <category term="memory" scheme="http://wuxiaolong.me/tags/memory/"/>
    
  </entry>
  
  <entry>
    <title>Android 渲染优化</title>
    <link href="http://wuxiaolong.me/2017/03/26/Rendering/"/>
    <id>http://wuxiaolong.me/2017/03/26/Rendering/</id>
    <published>2017-03-26T14:12:39.000Z</published>
    <updated>2017-04-15T14:35:48.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="为什么优化"><a href="#为什么优化" class="headerlink" title="为什么优化"></a>为什么优化</h1><p>卡顿现象，由于复杂的布局或界面过度绘制未能在每帧16ms内完成导致的。</p><h2 id="复杂的布局"><a href="#复杂的布局" class="headerlink" title="复杂的布局"></a>复杂的布局</h2><p>Android系统每隔16ms发出VSYNC信号，触发对UI进行渲染，要每次渲染都成功，这样就必须达到流畅的画面所需要的60fps，否则会发生丢帧的现象，丢帧越多，用户明确感到卡顿。<br><a id="more"></a><br><strong>补充：</strong><br>1、fps，每秒显示帧数，帧率测量单位（frames per second）;<br>2、为什么是60fps（16ms=1000/60）？因为人眼与大脑之间的协作无法感知超过60fps的画面更新。</p><h2 id="过度绘制"><a href="#过度绘制" class="headerlink" title="过度绘制"></a>过度绘制</h2><p>Overdraw（过度绘制）是指系统在单个渲染帧中多次绘制屏幕上的像素。例如，如果我们有一堆堆叠的UI卡，不可见的UI也在做绘制的操作，这样会浪费大量的CPU和GPU资源。</p><p><strong>补充：</strong><br>渲染操作通常依赖于两个核心组件：CPU与GPU。CPU负责包括Measure，Layout，Record，Execute的计算操作，GPU负责Rasterization(栅格化)操作。</p><h1 id="如何检测"><a href="#如何检测" class="headerlink" title="如何检测"></a>如何检测</h1><h2 id="Show-GPU-Overdraw"><a href="#Show-GPU-Overdraw" class="headerlink" title="Show GPU Overdraw"></a>Show GPU Overdraw</h2><p>打开Show GPU Overdraw选项进行观察是否存在过度绘制。<br><strong>步骤：</strong><br>设置 -&gt; 开发者选项 -&gt; 调试GPU过度绘制 -&gt;显示过度绘制区域。<br>对比一张Overdraw的参考图，分别有蓝色，淡绿，淡红，深红代表了4种不同程度的Overdraw情况：<br><img src="http://7q5c2h.com1.z0.glb.clouddn.com/rendering6.png" alt=""><br>蓝色： 意味着overdraw 1倍，像素绘制了两次；<br>绿色： 意味着overdraw 2倍，像素绘制了三次；<br>淡红： 意味着overdraw 3倍，像素绘制了四次；<br>深红： 意味着overdraw 4倍，像素绘制了五次或者更多。</p><p>我们的目标就是尽量减少红色Overdraw，看到更多的蓝色区域。</p><h2 id="Profile-GPU-Rendering"><a href="#Profile-GPU-Rendering" class="headerlink" title="Profile GPU Rendering"></a>Profile GPU Rendering</h2><p>打开Profile GPU Rendering，显示每帧画面所需要渲染的时间。<br><strong>步骤：</strong><br>设置 -&gt; 开发者选项 -&gt; GPU呈现模式分析  -&gt; 在屏幕上显示为条形图<br><img src="http://7q5c2h.com1.z0.glb.clouddn.com/rendering4.png?watermark/2/text/5ZC05bCP6b6Z5ZCM5a24/font/5qW35L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""><br>界面上会滚动显示垂直的柱状图来表示每帧画面所需要渲染的时间，柱状图越高表示花费的渲染时间越长。中间有一根绿色的横线，代表16ms，我们需要确保每一帧花费的总时间都低于这条横线，这样才能够避免出现卡顿的问题。</p><h2 id="Hierarchy-Viewer"><a href="#Hierarchy-Viewer" class="headerlink" title="Hierarchy Viewer"></a>Hierarchy Viewer</h2><p>用Hierarchy Viewer工具检查Activity中的布局是否过于复杂<br><strong>步骤：</strong><br>Tools -&gt; Android -&gt; Android Device Monitor。<br><img src="http://7q5c2h.com1.z0.glb.clouddn.com/rendering1.jpg?watermark/2/text/5ZC05bCP6b6Z5ZCM5a24/font/5qW35L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""></p><p><strong>打开Hierarchy Viewe：</strong><br>启动Android Device Monitor成功之后，在新的的窗口中点击切换视图图标，选择Hierarchy Viewe：<br><img src="http://7q5c2h.com1.z0.glb.clouddn.com/rendering2.jpg?watermark/2/text/5ZC05bCP6b6Z5ZCM5a24/font/5qW35L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""><br><strong>使用Hierarchy Viewer：</strong><br><img src="http://7q5c2h.com1.z0.glb.clouddn.com/rendering3.jpg?watermark/2/text/5ZC05bCP6b6Z5ZCM5a24/font/5qW35L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""><br>其实中带有红色或黄色的点代表速度较慢的View。</p><p><strong>友情提示：</strong><br>APP先运行起来再使用Android Device Monitor，建议用模拟器，手机可能读不到内容。</p><h2 id="TraceView"><a href="#TraceView" class="headerlink" title="TraceView"></a>TraceView</h2><p>使用TraceView来观察CPU执行情况，使用详见：<a href="http://jishu.y5y.com.cn/axi295309066/article/details/52872912" target="_blank" rel="noopener">性能分析工具 Android TraceView</a>。</p><h1 id="优化方案"><a href="#优化方案" class="headerlink" title="优化方案"></a>优化方案</h1><h2 id="删除不必要的布局背景"><a href="#删除不必要的布局背景" class="headerlink" title="删除不必要的布局背景"></a>删除不必要的布局背景</h2><figure class="highlight"><table><tr><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line">&lt;LinearLayout</div><div class="line">    xmlns:android="http://schemas.android.com/apk/res/android"</div><div class="line">    android:layout_width="match_parent"</div><div class="line">    android:layout_height="match_parent"</div><div class="line">    android:background="?attr/backgroundColor"</div><div class="line">    android:orientation="vertical"&gt;</div><div class="line"></div><div class="line">    &lt;com.wuxiaolong.pullloadmorerecyclerview.PullLoadMoreRecyclerView</div><div class="line">        android:id="@+id/pullLoadMoreRecyclerView"</div><div class="line">        android:layout_width="match_parent"</div><div class="line">        android:layout_height="match_parent"/&gt;</div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure><p>如果这里PullLoadMoreRecyclerView也设置背景色是没有必要了。</p><p>另外，使用Android一些自带的主题，window被默认添加一个纯色的背景，theme中添加android:windowbackground=”null”除掉或添加自己需要的背景色，减少渲染。</p><h2 id="优化布局层次"><a href="#优化布局层次" class="headerlink" title="优化布局层次"></a>优化布局层次</h2><p>通过优化视图层次结构，以减少重叠的UI对象的数量来提高性能。<br>这里得纠正我一个错误，我平时不想使用RelateLayout，是因为不想每个都命名id，命名是件很头疼的事，所以我更多使用了LinearLayout布局。为了提高性能，还是尽量多使用RelativeLayout吧。</p><h2 id="使用include、merge、ViewStub"><a href="#使用include、merge、ViewStub" class="headerlink" title="使用include、merge、ViewStub"></a>使用include、merge、ViewStub</h2><p>1、include布局重用；<br>2、merge减少视图层级；<br>3、ViewStub标签是当你需要时才会加载<br>详细介绍见：<a href="http://blog.csdn.net/xyz_lmn/article/details/14524567" target="_blank" rel="noopener">Android抽象布局——include、merge 、ViewStub</a></p><h2 id="自定义组件的onDraw"><a href="#自定义组件的onDraw" class="headerlink" title="自定义组件的onDraw()"></a>自定义组件的onDraw()</h2><p>1、避免大量创建临时对象，比如String，以免频繁触发GC；<br>2、考虑使用canvas.clipRect()绘制需要被绘制的区域。</p><h2 id="ListView"><a href="#ListView" class="headerlink" title="ListView"></a>ListView</h2><p>1、考虑使用ViewHolder；<br>2、或者RecycleView来代替</p><h2 id="Lint"><a href="#Lint" class="headerlink" title="Lint"></a>Lint</h2><p>Lint是一个代码扫描工具，能够帮助我们识别代码结构存在的问题。在布局文件上运行lint工具来搜索可能的视图层次结构优化是一种很好的做法。<br>步骤：Android Studio，Analyze -&gt; Inspect Code。<br>布局信息将显示在Android&gt; Lint&gt; Performance下：<br><img src="http://7q5c2h.com1.z0.glb.clouddn.com/rendering7.png?watermark/2/text/5ZC05bCP6b6Z5ZCM5a24/font/5qW35L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""><br>要查看更多详细信息，您可以单击每个项目来展开它，并在屏幕右侧的窗格中查看更多信息。<br>lint规则：</p><ul><li>Use compound drawables - A LinearLayout which contains an ImageView and a TextView can be more efficiently handled as a compound drawable.</li><li>Merge root frame - If a FrameLayout is the root of a layout and does not provide background or padding etc, it can be replaced with a merge tag which is slightly more efficient.</li><li>Useless leaf - A layout that has no children or no background can often be removed (since it is invisible) for a flatter and more efficient layout hierarchy.</li><li>Useless parent - A layout with children that has no siblings, is not a ScrollView or a root layout, and does not have a background, can be removed and have its children moved directly into the parent for a flatter and more efficient layout hierarchy.</li><li>Deep layouts - Layouts with too much nesting are bad for performance. Consider using flatter layouts such as RelativeLayout or GridLayout to improve performance. The default maximum depth is 10.</li></ul><p>Lint除了layout优化，还能检查编码、可访问性等问题。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://developer.android.google.cn/topic/performance/rendering/index.html" target="_blank" rel="noopener">官方Rendering</a></p><p><a href="https://developer.android.google.cn/training/improving-layouts/index.html" target="_blank" rel="noopener">官方Improving Layout Performance</a></p><p><a href="http://hukai.me/android-performance-render/" target="_blank" rel="noopener">Android性能优化之渲染篇</a></p><p><a href="http://ibigerbiger.me/2016/10/03/Android%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96(%E4%B8%80" target="_blank" rel="noopener">Android性能优化(一)-布局优化</a>-%E5%B8%83%E5%B1%80%E4%BC%98%E5%8C%96/)</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;为什么优化&quot;&gt;&lt;a href=&quot;#为什么优化&quot; class=&quot;headerlink&quot; title=&quot;为什么优化&quot;&gt;&lt;/a&gt;为什么优化&lt;/h1&gt;&lt;p&gt;卡顿现象，由于复杂的布局或界面过度绘制未能在每帧16ms内完成导致的。&lt;/p&gt;
&lt;h2 id=&quot;复杂的布局&quot;&gt;&lt;a href=&quot;#复杂的布局&quot; class=&quot;headerlink&quot; title=&quot;复杂的布局&quot;&gt;&lt;/a&gt;复杂的布局&lt;/h2&gt;&lt;p&gt;Android系统每隔16ms发出VSYNC信号，触发对UI进行渲染，要每次渲染都成功，这样就必须达到流畅的画面所需要的60fps，否则会发生丢帧的现象，丢帧越多，用户明确感到卡顿。&lt;br&gt;
    
    </summary>
    
      <category term="Performance" scheme="http://wuxiaolong.me/categories/Performance/"/>
    
    
      <category term="Rendering" scheme="http://wuxiaolong.me/tags/Rendering/"/>
    
  </entry>
  
  <entry>
    <title>Android APK瘦身实践</title>
    <link href="http://wuxiaolong.me/2017/03/19/ReduceAPKSize/"/>
    <id>http://wuxiaolong.me/2017/03/19/ReduceAPKSize/</id>
    <published>2017-03-19T12:02:55.000Z</published>
    <updated>2017-11-16T14:38:47.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="为什么瘦身"><a href="#为什么瘦身" class="headerlink" title="为什么瘦身"></a>为什么瘦身</h1><p>现在APK动不动就是几十兆，当用户连接到2G和3G网络，或者按流量收费的设备是多么的浪费，这篇文章介绍了如何对APK进行瘦身，帮助更多用户毫不犹顾忌地下载你们的APP。</p><h2 id="了解APK结构"><a href="#了解APK结构" class="headerlink" title="了解APK结构"></a>了解APK结构</h2><p>在讨论如何缩小应用程序的大小之前，先了解应用程序APK的结构，是有帮助的。APK文件包含ZIP文件，其中包含构成应用程序的所有文件。这些文件包括Java类文件，资源文件和已编译资源的文件。<br><a id="more"></a><br>APK包含以下目录：</p><ul><li>META-INF/:包含CERT.SF和CERT.RSA签名文件，以及MANIFEST.MF清单文件。</li><li>assets/:包含应用程序的资源，应用程序可以使用AssetManager对象检索该资源。</li><li>res/: 包含未编译到resources.arsc中的资源。</li><li>lib/:包含特定处理器的软件层的编译代码。此目录包含每个平台类型的子目录，如armeabi，armeabi-v7a，arm64-v8a，x86，x86_64和mips。</li></ul><p>APK也包含以下文件，其中，只有AndroidManifest.xml是必需的：</p><ul><li>resources.arsc:包含已编译的资源。此文件包含来自res / values /文件夹的所有配置的XML内容。包装工具提取此XML内容，将其编译为二进制形式，并归档内容。此内容包括语言字符串和样式，以及未直接包含在resources.arsc文件中的内容路径，例如布局文件和图像。</li><li>classes.dex:包含以Dalvik / ART虚拟机理解的DEX文件格式而编译的类。</li><li>AndroidManifest.xml:包含核心Android清单文件。此文件列出应用程序的名称，版本，访问权限和引用的库文件。该文件使用Android的二进制XML格式。</li></ul><h1 id="优化方案"><a href="#优化方案" class="headerlink" title="优化方案"></a>优化方案</h1><p>以我的个人APP【 <a href="http://app.meizu.com/apps/public/detail?package_name=com.android.xiaomolongstudio.weiyan" target="_blank" rel="noopener">微言</a> 】实践，未做任何处理，APK大小 <strong>11712</strong> KB= <strong>11.43</strong> MB。</p><h2 id="开启minifyEnabled混淆代码"><a href="#开启minifyEnabled混淆代码" class="headerlink" title="开启minifyEnabled混淆代码"></a>开启minifyEnabled混淆代码</h2><p>在app/build.gradle打开minifyEnabled：<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">android &#123;</div><div class="line">    buildTypes &#123;</div><div class="line">        release &#123;</div><div class="line">            minifyEnabled <span class="keyword">true</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>在app/proguard-rules.pro编写混淆规则，根据自己项目依赖的库一一混淆，这里就不提供具体混淆代码了。</p><p>经过混淆，APK大小 <strong>10906</strong> KB，效果很明显，一下子瘦了<strong>0.78</strong> MB。</p><h2 id="开启shrinkResources去除无用资源"><a href="#开启shrinkResources去除无用资源" class="headerlink" title="开启shrinkResources去除无用资源"></a>开启shrinkResources去除无用资源</h2><p>在app/build.gradle打开shrinkResources：</p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">android &#123;</div><div class="line">    buildTypes &#123;</div><div class="line">        release &#123;</div><div class="line">            minifyEnabled <span class="keyword">true</span></div><div class="line">            shrinkResources <span class="keyword">true</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>shrinkResources依赖于minifyEnabled，必须和minifyEnabled一起用，就是打开shrinkResources也必须打开minifyEnabled。</p><p>APK大小 <strong>10903</strong> KB。</p><h2 id="删除未使用到xml和图片"><a href="#删除未使用到xml和图片" class="headerlink" title="删除未使用到xml和图片"></a>删除未使用到xml和图片</h2><p>如何知道哪些xml和图片未被使用到？使用Android Studio的Lint，步骤：<br>Android Studio -&gt; Menu -&gt; Refactor -&gt; Remove Unused Resources<br>选择 Refactor 一键删除<br>选择 Perview 预览未使用到的资源</p><p>或者</p><p>点击菜单栏 Analyze -&gt;  Run Inspection by Name -&gt; unused resources -&gt;  Moudule ‘app’ -&gt; OK，这样会搜出来哪些未被使用到未使用到xml和图片，如下：<br><img src="http://7q5c2h.com1.z0.glb.clouddn.com/reduceAPKSize1.jpg" alt=""><br>经过删除，APK大小 <strong>10891</strong> KB。</p><h2 id="删除未使用到代码"><a href="#删除未使用到代码" class="headerlink" title="删除未使用到代码"></a>删除未使用到代码</h2><p>同样使用Android Studio的Lint，步骤：点击菜单栏 Analyze -&gt;  Run Inspection by Name -&gt; unused declaration -&gt;  Moudule ‘app’ -&gt; OK</p><p>经过一番清理，APK大小 <strong>10880</strong> KB，才瘦了11KB，我以为能瘦很多，不过，平时必须保持良好的编码习惯，哪些没有使用到的代码还是删删掉吧，不要想着以后还会用到。</p><p>重复操作上一步和这一步，会有意外的发现哦。</p><h2 id="png图片格式转成jpg"><a href="#png图片格式转成jpg" class="headerlink" title="png图片格式转成jpg"></a>png图片格式转成jpg</h2><p>将一些大图的格式转成jpg格式，将会有效减小图片的体积，我的APP大图不是很多。</p><p>更改格式后，APK大小 <strong>10762</strong> KB。</p><h2 id="使用vector"><a href="#使用vector" class="headerlink" title="使用vector"></a>使用vector</h2><p>微言是我很早就已经做得app，一开始图标都是图片，且每个drawable都有相应尺寸的图标，占了不少大小，后来部分用vector代替了图片。注意一点，Button在xml里设置app:srcCompat居然无效，只能在代码里设置：<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">button.setImageResource(R.drawable.ic_favorite_border_black_24dp)。</div></pre></td></tr></table></figure></p><p>APK大小 <strong>10754</strong> KB。</p><h2 id="使用shape作为背景"><a href="#使用shape作为背景" class="headerlink" title="使用shape作为背景"></a>使用shape作为背景</h2><p>很多点击效果可能会使用到图片，可以换成shape是实现，我查看了下，微言APP都是shape实现的，Good。</p><h2 id="使用TinyPng"><a href="#使用TinyPng" class="headerlink" title="使用TinyPng"></a>使用TinyPng</h2><p>如果对png图片格式转成jpg，减小效果还不满意，直接使用TinyPng智能有损压缩技术，网址：<a href="https://tinypng.com/" target="_blank" rel="noopener">https://tinypng.com/</a> ，压缩效果：<br><img src="http://7q5c2h.com1.z0.glb.clouddn.com/reduceAPKSize2.jpg" alt=""><br>对于图片资源很多的APP，APK瘦身效果不要太好。</p><p>APK大小 <strong>10341</strong> KB。</p><h2 id="配置resConfigs"><a href="#配置resConfigs" class="headerlink" title="配置resConfigs"></a>配置resConfigs</h2><p>如果APP支持中文，可以配置resConfigs，只支持中文<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">android &#123;</div><div class="line">    defaultConfig &#123;</div><div class="line">        ...</div><div class="line">        <span class="comment">//语言资源，只支持中文</span></div><div class="line">        resConfigs <span class="string">"zh"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>APK大小 <strong>10243</strong> KB。</p><h2 id="使用微信Android资源混淆工具"><a href="#使用微信Android资源混淆工具" class="headerlink" title="使用微信Android资源混淆工具"></a>使用微信Android资源混淆工具</h2><p>微信AndResGuard是一个帮助你缩小APK大小的工具，详情：<a href="https://github.com/shwenzhang/AndResGuard" target="_blank" rel="noopener">Android资源混淆工具使用说明</a>。<br>使用方法：</p><h3 id="Project-build-gradle"><a href="#Project-build-gradle" class="headerlink" title="Project/build.gradle"></a>Project/build.gradle</h3><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">buildscript &#123;</div><div class="line">    repositories &#123;</div><div class="line">        jcenter()</div><div class="line">    &#125;</div><div class="line">    dependencies &#123;</div><div class="line">        classpath <span class="string">'com.tencent.mm:AndResGuard-gradle-plugin:1.2.0'</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="app-build-gradle"><a href="#app-build-gradle" class="headerlink" title="app/build.gradle"></a>app/build.gradle</h3><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">apply plugin: <span class="string">'AndResGuard'</span></div><div class="line">def supportVersion = <span class="string">"25.0.0"</span></div><div class="line">android &#123;</div><div class="line">    ...</div><div class="line">    signingConfigs &#123;</div><div class="line">        release &#123;</div><div class="line">            <span class="function">storeFile <span class="title">file</span><span class="params">(<span class="string">'keystore/android.keystore'</span>)</span></span></div><div class="line">            storePassword '123456'</div><div class="line">            keyAlias 'android.keystore'</div><div class="line">            keyPassword '123456'</div><div class="line">        &#125;</div><div class="line">        debug &#123;</div><div class="line">            <span class="function">storeFile <span class="title">file</span><span class="params">(<span class="string">'keystore/android.keystore'</span>)</span></span></div><div class="line">            storePassword '123456'</div><div class="line">            keyAlias 'android.keystore'</div><div class="line">            keyPassword '123456'</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    buildTypes &#123;</div><div class="line">        release &#123;</div><div class="line">            ...</div><div class="line">            signingConfig signingConfigs.release</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">andResGuard &#123;</div><div class="line">    <span class="comment">// mappingFile = file("./resource_mapping.txt")</span></div><div class="line">    <span class="comment">//mappingFile用于增量更新，保持本次混淆与上次混淆结果一致；</span></div><div class="line">    mappingFile = <span class="keyword">null</span></div><div class="line">    <span class="comment">//uss7zip为true时，useSign必须为true；</span></div><div class="line">    use7zip = <span class="keyword">true</span></div><div class="line">    <span class="comment">//useSign为true时，需要配置signConfig；</span></div><div class="line">    useSign = <span class="keyword">true</span></div><div class="line">    <span class="comment">//打开这个开关，会keep住所有资源的原始路径，只混淆资源的名字;</span></div><div class="line">    keepRoot = <span class="keyword">false</span></div><div class="line">    <span class="comment">//whiteList添加在代码内部需要动态获取的资源id，不混淆这部分；</span></div><div class="line">    whiteList = [</div><div class="line">            <span class="comment">// for your icon</span></div><div class="line">            <span class="string">"R.drawable.icon"</span>,</div><div class="line">            <span class="comment">// for fabric</span></div><div class="line">            <span class="string">"R.string.com.crashlytics.*"</span>,</div><div class="line">            <span class="comment">// for umeng update</span></div><div class="line">            <span class="string">"R.string.umeng*"</span>,</div><div class="line">            <span class="string">"R.string.UM*"</span>,</div><div class="line">            <span class="string">"R.string.tb_*"</span>,</div><div class="line">            <span class="string">"R.layout.umeng*"</span>,</div><div class="line">            <span class="string">"R.layout.tb_*"</span>,</div><div class="line">            <span class="string">"R.drawable.umeng*"</span>,</div><div class="line">            <span class="string">"R.drawable.tb_*"</span>,</div><div class="line">            <span class="string">"R.anim.umeng*"</span>,</div><div class="line">            <span class="string">"R.color.umeng*"</span>,</div><div class="line">            <span class="string">"R.color.tb_*"</span>,</div><div class="line">            <span class="string">"R.style.*UM*"</span>,</div><div class="line">            <span class="string">"R.style.umeng*"</span>,</div><div class="line">            <span class="string">"R.id.umeng*"</span>,</div><div class="line">            <span class="comment">// umeng share for sina</span></div><div class="line">            <span class="string">"R.drawable.sina*"</span>,</div><div class="line">            <span class="comment">// for google-services.json</span></div><div class="line">            <span class="string">"R.string.google_app_id"</span>,</div><div class="line">            <span class="string">"R.string.gcm_defaultSenderId"</span>,</div><div class="line">            <span class="string">"R.string.default_web_client_id"</span>,</div><div class="line">            <span class="string">"R.string.ga_trackingId"</span>,</div><div class="line">            <span class="string">"R.string.firebase_database_url"</span>,</div><div class="line">            <span class="string">"R.string.google_api_key"</span>,</div><div class="line">            <span class="string">"R.string.google_crash_reporting_api_key"</span>,</div><div class="line">            <span class="comment">// umeng share for facebook</span></div><div class="line">            <span class="string">"R.layout.*facebook*"</span>,</div><div class="line">            <span class="string">"R.id.*facebook*"</span>,</div><div class="line">            <span class="comment">// umeng share for messager</span></div><div class="line">            <span class="string">"R.layout.*messager*"</span>,</div><div class="line">            <span class="string">"R.id.*messager*"</span>,</div><div class="line">            <span class="comment">// umeng share commond</span></div><div class="line">            <span class="string">"R.id.progress_bar_parent"</span>,</div><div class="line">            <span class="string">"R.id.webView"</span></div><div class="line">    ]</div><div class="line">    <span class="comment">//用来指定文件重打包时是否压缩指定文件;</span></div><div class="line">    compressFilePattern = [</div><div class="line">            <span class="string">"*.png"</span>,</div><div class="line">            <span class="string">"*.jpg"</span>,</div><div class="line">            <span class="string">"*.jpeg"</span>,</div><div class="line">            <span class="string">"*.gif"</span>,</div><div class="line">            <span class="string">"resources.arsc"</span></div><div class="line">    ]</div><div class="line">    <span class="comment">//sevenzip可使用artifacr或path，path指本地安装的7za（7zip命令行工具）。</span></div><div class="line">    sevenzip &#123;</div><div class="line">        artifact = <span class="string">'com.tencent.mm:SevenZip:1.2.0'</span></div><div class="line">        <span class="comment">//path = "/usr/local/bin/7za"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>AndResGuard打包命令行：gradlew resguardRelease，最终的混淆APK会生成在{App}/build/output/apk/AndResGuard目录下。</p><p>APK大小 <strong>10035</strong> KB= <strong>9.79</strong> MB。</p><h2 id="使用webp格式"><a href="#使用webp格式" class="headerlink" title="使用webp格式"></a>使用webp格式</h2><p>对于 res 文件夹，通常占空间最大的就是图片了。如果你的 Android Studio 为 2.3，并且项目的 minSdkVersion 为 18 或以上，应该使用 webp 而不是 png 图片。webp 图片有更小的体积，图片质量还没有什么损失。</p><p>我们可以选中 drawable 和 mipmap 文件夹，右键后选择 convert to webp，将图片转为 webp 格式。</p><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p><img src="http://7q5c2h.com1.z0.glb.clouddn.com/reduceAPKSize3.jpg" alt=""><br>最终APK瘦身 <strong>11.43 - 9.79 = 1.63</strong> MB，瘦身效果不是很明显，说明：<br>1、我的这个APP毕竟不是商业项目，本身就不大；<br>2、我的编码习惯可以，没有多少冗余代码和无用资源，哈哈。<br>大家可以将你们的APK按照这些方法过一遍，看能瘦多少。<br>瘦身还有其他方法，生命不息，折腾不止。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>官方文档Reduce APK Size<br><a href="https://developer.android.google.cn/topic/performance/reduce-apk-size.html" target="_blank" rel="noopener">https://developer.android.google.cn/topic/performance/reduce-apk-size.html</a></p><p>Android APP终极瘦身指南<br><a href="http://jayfeng.com/2016/03/01/Android-APP%E7%BB%88%E6%9E%81%E7%98%A6%E8%BA%AB%E6%8C%87%E5%8D%97/" target="_blank" rel="noopener">http://jayfeng.com/2016/03/01/Android-APP%E7%BB%88%E6%9E%81%E7%98%A6%E8%BA%AB%E6%8C%87%E5%8D%97/</a></p><p>AndResGuard资源混淆<br><a href="http://www.jianshu.com/p/7ffea26c9fd8" target="_blank" rel="noopener">http://www.jianshu.com/p/7ffea26c9fd8</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;为什么瘦身&quot;&gt;&lt;a href=&quot;#为什么瘦身&quot; class=&quot;headerlink&quot; title=&quot;为什么瘦身&quot;&gt;&lt;/a&gt;为什么瘦身&lt;/h1&gt;&lt;p&gt;现在APK动不动就是几十兆，当用户连接到2G和3G网络，或者按流量收费的设备是多么的浪费，这篇文章介绍了如何对APK进行瘦身，帮助更多用户毫不犹顾忌地下载你们的APP。&lt;/p&gt;
&lt;h2 id=&quot;了解APK结构&quot;&gt;&lt;a href=&quot;#了解APK结构&quot; class=&quot;headerlink&quot; title=&quot;了解APK结构&quot;&gt;&lt;/a&gt;了解APK结构&lt;/h2&gt;&lt;p&gt;在讨论如何缩小应用程序的大小之前，先了解应用程序APK的结构，是有帮助的。APK文件包含ZIP文件，其中包含构成应用程序的所有文件。这些文件包括Java类文件，资源文件和已编译资源的文件。&lt;br&gt;
    
    </summary>
    
      <category term="Performance" scheme="http://wuxiaolong.me/categories/Performance/"/>
    
    
      <category term="APK" scheme="http://wuxiaolong.me/tags/APK/"/>
    
  </entry>
  
  <entry>
    <title>Android APP启动优化</title>
    <link href="http://wuxiaolong.me/2017/03/13/appStart/"/>
    <id>http://wuxiaolong.me/2017/03/13/appStart/</id>
    <published>2017-03-13T13:34:46.000Z</published>
    <updated>2017-11-25T12:55:52.603Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是APP启动屏幕"><a href="#什么是APP启动屏幕" class="headerlink" title="什么是APP启动屏幕"></a>什么是APP启动屏幕</h1><p>可能你也发现了，点击桌面图标，有时候出现一个白屏，然后才进入主界面，这是因为从桌面点击APP图标启动应用开始，程序会显示一个启动窗口等待Activity的创建加载完毕再进行显示。<br><a id="more"></a><br>来看一下Google官方文档《<a href="https://developer.android.google.cn/topic/performance/launch-time.html" target="_blank" rel="noopener">Launch-Time Performance</a>》对应用启动方式的概述：</p><h2 id="冷启动"><a href="#冷启动" class="headerlink" title="冷启动"></a>冷启动</h2><p>冷启动指的是应用程序从头开始：系统的进程没有，直到此开始，创建了应用程序的进程。 在应用程序自设备启动以来第一次启动或系统杀死应用程序等情况下会发生冷启动。 这种类型的启动在最小化启动时间方面是最大的挑战，因为系统和应用程序比其他启动状态具有更多的工作。</p><h2 id="热启动"><a href="#热启动" class="headerlink" title="热启动"></a>热启动</h2><p>与冷启动相比，热启动应用程序要简单得多，开销更低。在热启动，系统会把你活动放到前台，如果所有应用程序的活动仍驻留在内存中，那么应用程序可以避免重复对象初始化，UI的布局和渲染。<br>热启动显示与冷启动场景相同的屏幕行为：系统进程显示空白屏幕，直到应用程序完成呈现活动。</p><h2 id="温启动"><a href="#温启动" class="headerlink" title="温启动"></a>温启动</h2><p>用户退出您的应用，但随后重新启动。该过程可能已继续运行，但应用程序必须通过调用onCreate（）从头开始重新创建活动。系统从内存中驱逐您的应用程序，然后用户重新启动它。进程和Activity需要重新启动，但任务可以从保存的实例状态包传递到onCreate（）中。</p><h1 id="为什么出现白屏"><a href="#为什么出现白屏" class="headerlink" title="为什么出现白屏"></a>为什么出现白屏</h1><p>冷启动白屏持续时间可能会很长，这可是个槽糕的体验，它的启动速度是由于以下引起的：<br>1、Application的onCreate流程，对于大型的APP来说，通常会在这里做大量的通用组件的初始化操作；<br>建议：很多第三方SDK都放在Application初始化，我们可以放到用到的地方才进行初始化操作。</p><p>2、Activity的onCreate流程，特别是UI的布局与渲染操作，如果布局过于复杂很可能导致严重的启动性能问题；<br>建议：Activity仅初始化那些立即需要的对象，xml布局减少冗余或嵌套布局。</p><p>优化APP启动速度意义重大，启动时间过长，可能会使用户直接卸载APP。</p><h1 id="优化方案"><a href="#优化方案" class="headerlink" title="优化方案"></a>优化方案</h1><p>优化方案主要是从主题切换的方向着手：</p><h2 id="直接干掉"><a href="#直接干掉" class="headerlink" title="直接干掉"></a>直接干掉</h2><p>既然有这个Activity启动界面，那能不能直接不要这个呢，当然是可以：<br>定义一个style：<br><figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"AppTheme.Launcher"</span>&gt;</span><span class="xml"></span></div><div class="line">    <span class="comment">&lt;!--关闭启动窗口--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowDisablePreview"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure></p><p>只需要再启动页面引用：<br><figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">activity</span></span></div><div class="line">    <span class="attr">android:name</span>=<span class="string">".MainActivity"</span></div><div class="line">    <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span></div><div class="line">    <span class="attr">android:theme</span>=<span class="string">"@style/AppTheme.Launcher"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></div></pre></td></tr></table></figure></p><p>最后在MainActivity恢复正常主题：<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">BaseActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setTheme(R.style.AppTheme);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>这样启动APP，就没有白屏，但会出现点击桌面图标而半天没有反应的现象，显然不好，很多APP把这个闪屏当做一个广告、品牌宣传的页面。</p><h2 id="Material-Design"><a href="#Material-Design" class="headerlink" title="Material Design"></a>Material Design</h2><p>其实Google针对APP闪屏，在Material Design规范<a href="https://material.io/guidelines/patterns/launch-screens.html" target="_blank" rel="noopener">launch-screens</a>，也给出了非常详细的设计定义，有两种方案：</p><h3 id="品牌展示"><a href="#品牌展示" class="headerlink" title="品牌展示"></a>品牌展示</h3><p><img src="http://7q5c2h.com1.z0.glb.clouddn.com/patterns-launch-screens-01.png" alt=""><br>屏幕提供短暂的品牌曝光，来看看如何实现的，定义一个style：<br><figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"AppTheme.Launcher"</span>&gt;</span><span class="xml"></span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowBackground"</span>&gt;</span>@drawable/branded_launch_screens<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure></p><p>drawable/branded_launch_screens<br><figure class="highlight xml"><table><tr><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">layer-list</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">android:opacity</span>=<span class="string">"opaque"</span>&gt;</div><div class="line">    <span class="comment">&lt;!--黑色背景颜色--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:drawable</span>=<span class="string">"@android:color/black"</span> /&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 产品logo--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">bitmap</span></span></div><div class="line">            <span class="attr">android:gravity</span>=<span class="string">"center"</span></div><div class="line">            <span class="attr">android:src</span>=<span class="string">"@mipmap/empty_image01"</span> /&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 右上角的图标元素 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">bitmap</span></span></div><div class="line">            <span class="attr">android:gravity</span>=<span class="string">"top|right"</span></div><div class="line">            <span class="attr">android:src</span>=<span class="string">"@mipmap/github"</span> /&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--最下面的文字--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:bottom</span>=<span class="string">"50dp"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">bitmap</span></span></div><div class="line">            <span class="attr">android:gravity</span>=<span class="string">"bottom"</span></div><div class="line">            <span class="attr">android:src</span>=<span class="string">"@mipmap/ic_launcher"</span> /&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">layer-list</span>&gt;</span></div></pre></td></tr></table></figure></p><p>其中android:opacity=”opaque”参数是为了防止在启动的时候出现背景的闪烁。关于layer-list介绍，见博客：用layer-list实现图片旋转叠加、错位叠加、阴影、按钮指示灯<a href="http://www.cnblogs.com/tianzhijiexian/p/3889770.html" target="_blank" rel="noopener">http://www.cnblogs.com/tianzhijiexian/p/3889770.html</a> ，也同样只需要再启动页面引用和最后在MainActivity恢复正常主题。</p><p>或者<br><figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"AppTheme.Splash"</span>&gt;</span><span class="xml"></span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowFullscreen"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowBackground"</span>&gt;</span>@mipmap/app_welcome<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure></p><p>这里 windowBackground 直接用图片替换，更加简单。</p><h3 id="主页预加载"><a href="#主页预加载" class="headerlink" title="主页预加载"></a>主页预加载</h3><p><img src="http://7q5c2h.com1.z0.glb.clouddn.com/patterns-launch-screens-03.png" alt=""><br>使用与主界面UI一致的占位内容，给用户感觉已经在加载中了，这里模拟了一个高度为25dp的状态栏和一个高度为56dp的标题栏，定义一个style：<br><figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"AppTheme.Launcher"</span>&gt;</span><span class="xml"></span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowBackground"</span>&gt;</span>@drawable/placeholder_ui<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure></p><p>drawable/placeholder_ui<br><figure class="highlight xml"><table><tr><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">layer-list</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">android:opacity</span>=<span class="string">"opaque"</span>&gt;</div><div class="line">    <span class="comment">&lt;!--状态栏颜色--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:drawable</span>=<span class="string">"@color/colorPrimaryDark"</span> /&gt;</span></div><div class="line">    <span class="comment">&lt;!--假装这里是个toolbar--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span></span></div><div class="line">        <span class="attr">android:drawable</span>=<span class="string">"@color/colorPrimary"</span></div><div class="line">        <span class="attr">android:top</span>=<span class="string">"25dp"</span> /&gt;</div><div class="line">    <span class="comment">&lt;!--状态栏25+toolbar56=距离top81--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span></span></div><div class="line">        <span class="attr">android:drawable</span>=<span class="string">"@android:color/white"</span></div><div class="line">        <span class="attr">android:top</span>=<span class="string">"81dp"</span> /&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">layer-list</span>&gt;</span></div></pre></td></tr></table></figure></p><h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><p><a href="https://github.com/WuXiaolong/AndroidSamples" target="_blank" rel="noopener">https://github.com/WuXiaolong/AndroidSamples</a></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>官方文档Launch-Time Performance<br><a href="https://developer.android.google.cn/topic/performance/launch-time.html" target="_blank" rel="noopener">https://developer.android.google.cn/topic/performance/launch-time.html</a></p><p>Android性能优化典范 - 第6季<br><a href="http://hukai.me/android-performance-patterns-season-6/" target="_blank" rel="noopener">http://hukai.me/android-performance-patterns-season-6/</a></p><p>Android 你应该知道的的应用冷启动过程分析和优化方案<br><a href="http://yifeng.studio/2016/11/15/android-optimize-for-cold-start/" target="_blank" rel="noopener">http://yifeng.studio/2016/11/15/android-optimize-for-cold-start/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;什么是APP启动屏幕&quot;&gt;&lt;a href=&quot;#什么是APP启动屏幕&quot; class=&quot;headerlink&quot; title=&quot;什么是APP启动屏幕&quot;&gt;&lt;/a&gt;什么是APP启动屏幕&lt;/h1&gt;&lt;p&gt;可能你也发现了，点击桌面图标，有时候出现一个白屏，然后才进入主界面，这是因为从桌面点击APP图标启动应用开始，程序会显示一个启动窗口等待Activity的创建加载完毕再进行显示。&lt;br&gt;
    
    </summary>
    
      <category term="Performance" scheme="http://wuxiaolong.me/categories/Performance/"/>
    
    
      <category term="AppStart" scheme="http://wuxiaolong.me/tags/AppStart/"/>
    
  </entry>
  
</feed>
