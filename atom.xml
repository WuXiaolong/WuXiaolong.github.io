<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>吴小龙同學</title>
  
  <subtitle>党要我帅，我不得不帅！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://wuxiaolong.me/"/>
  <updated>2018-10-15T13:28:04.718Z</updated>
  <id>http://wuxiaolong.me/</id>
  
  <author>
    <name>吴小龙同學</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Android APP 冷启动流程</title>
    <link href="http://wuxiaolong.me/2018/09/16/AndroidColdStart/"/>
    <id>http://wuxiaolong.me/2018/09/16/AndroidColdStart/</id>
    <published>2018-09-16T05:49:31.000Z</published>
    <updated>2018-10-15T13:28:04.718Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://wuxiaolong.github.io/images/AndroidColdStart.png" alt=""><br><a id="more"></a><br>说明：</p><p>1、基于 Android 8.0 源码；</p><p>2、整个流程是从点击桌面 icon 到 APP 显示；</p><p>3、当我画完这个时序图时，我已经忘记了，捂脸，所以还是自己看吧，按照时序图走一遍。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://wuxiaolong.github.io/images/AndroidColdStart.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="AOSP" scheme="http://wuxiaolong.me/categories/AOSP/"/>
    
    
      <category term="AOSP" scheme="http://wuxiaolong.me/tags/AOSP/"/>
    
  </entry>
  
  <entry>
    <title>Android 8.0 自适应图标</title>
    <link href="http://wuxiaolong.me/2018/05/14/AdaptiveIcons/"/>
    <id>http://wuxiaolong.me/2018/05/14/AdaptiveIcons/</id>
    <published>2018-05-14T05:20:36.000Z</published>
    <updated>2018-10-14T02:59:31.142Z</updated>
    
    <content type="html"><![CDATA[<p>项目中遇到一个问题，Android 8.0 系统上 APP 的 icon 显示的是默认的机器人的 icon，这是什么回事？原来 Android 8.0（API 级别 26）引入了自适应启动器图标，可以在不同设备模型中显示各种形状。下面看下官方酷炫动态图：</p><p><img src="https://developer.android.google.cn/guide/practices/ui_guidelines/images/NB_Icon_Mask_Shapes_Ext_01.gif" alt="适用于自适应图标线框的各种遮罩"> <img src="https://developer.android.google.cn/guide/practices/ui_guidelines/images/NB_Icon_Mask_Shapes_Ext_02.gif" alt="适用于自适应图标的各种蒙版"><br><a id="more"></a><br><strong>图1.</strong> 自适应图标支持各种设备之间不同的掩码。</p><p>可以通过定义 2 层来控制自适应启动器图标的外观，包括背景和前景。您必须提供图标图层作为可绘图，图标轮廓周围不能有蒙版或背景阴影。</p><p><img src="https://developer.android.google.cn/guide/practices/ui_guidelines/images/NB_Icon_Layers_3D_03_ext.gif" alt="创建自适应图标的等距插图"></p><p><strong>图2.</strong> 自适应图标使用 2 个图层和 1 个蒙版进行定义。</p><p>在 Android 7.1（API级别25）及更早版本中，启动器图标大小为 48 x 48 dp。必须使用以下准则来调整图标图层的大小：</p><ul><li>两层的尺寸必须为 108 x 108 dp。</li><li>图标的内部 72 x 72 dp 出现在蒙版视口内。</li><li>系统会在四面各留出 18 dp，以产生有趣的视觉效果，如视差或脉冲。</li></ul><p>我验证了，不是这些尺寸也是可以的，但我们还是严格按照这个准则来吧。</p><p><img src="https://developer.android.google.cn/guide/practices/ui_guidelines/images/Single_Icon_Parallax_Demo_01_2x_ext.gif" alt="适用于自适应图标的视差演示"> <img src="https://developer.android.google.cn/guide/practices/ui_guidelines/images/Single_Icon_Pickup_Drop_01_2x_ext.gif" alt="拾取动画演示应用于自适应图标"></p><p><strong>图3.</strong> 自适应图标支持各种视觉效果。</p><p><strong>注意：</strong> 如果您没有使用必要的图层更新启动器图标，则该图标与系统 UI 显示的其他图标看起来不一致，并且不支持视觉效果。</p><h1 id="用-XML-创建自适应图标"><a href="#用-XML-创建自适应图标" class="headerlink" title="用 XML 创建自适应图标"></a>用 XML 创建自适应图标</h1><p>我们首先创建一个 Sample 项目，如图：<br><img src="http://wuxiaolong.github.io/images/AdaptiveIcons1.png" alt=""></p><p>比以往多一个 res/mipmap-anydpi-v26 文件，打开，有背景和前景。</p><p>ic_launcher_background.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">vector</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">android:width</span>=<span class="string">"108dp"</span></div><div class="line">    <span class="attr">android:height</span>=<span class="string">"108dp"</span></div><div class="line">    <span class="attr">android:viewportHeight</span>=<span class="string">"108"</span></div><div class="line">    <span class="attr">android:viewportWidth</span>=<span class="string">"108"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">path</span></span></div><div class="line">        <span class="attr">android:fillColor</span>=<span class="string">"#26A69A"</span></div><div class="line">        <span class="attr">android:pathData</span>=<span class="string">"M0,0h108v108h-108z"</span> /&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">path</span></span></div><div class="line">        <span class="attr">android:fillColor</span>=<span class="string">"#00000000"</span></div><div class="line">        <span class="attr">android:pathData</span>=<span class="string">"M9,0L9,108"</span></div><div class="line">        <span class="attr">android:strokeColor</span>=<span class="string">"#33FFFFFF"</span></div><div class="line">        <span class="attr">android:strokeWidth</span>=<span class="string">"0.8"</span> /&gt;</div><div class="line">    <span class="comment">&lt;!--省略部分代码--&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">vector</span>&gt;</span></div></pre></td></tr></table></figure></p><p>ic_launcher_foreground.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">vector</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">xmlns:aapt</span>=<span class="string">"http://schemas.android.com/aapt"</span></div><div class="line">    <span class="attr">android:width</span>=<span class="string">"108dp"</span></div><div class="line">    <span class="attr">android:height</span>=<span class="string">"108dp"</span></div><div class="line">    <span class="attr">android:viewportHeight</span>=<span class="string">"108"</span></div><div class="line">    <span class="attr">android:viewportWidth</span>=<span class="string">"108"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">path</span></span></div><div class="line">        <span class="attr">android:fillType</span>=<span class="string">"evenOdd"</span></div><div class="line">        <span class="attr">android:pathData</span>=<span class="string">"M32,64C32,64 38.39,52.99 44.13,50.95C51.37,48.37 70.14,49.57 70.14,49.57L108.26,87.69L108,109.01L75.97,107.97L32,64Z"</span></div><div class="line">        <span class="attr">android:strokeColor</span>=<span class="string">"#00000000"</span></div><div class="line">        <span class="attr">android:strokeWidth</span>=<span class="string">"1"</span>&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">aapt:attr</span> <span class="attr">name</span>=<span class="string">"android:fillColor"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">gradient</span></span></div><div class="line">                <span class="attr">android:endX</span>=<span class="string">"78.5885"</span></div><div class="line">                <span class="attr">android:endY</span>=<span class="string">"90.9159"</span></div><div class="line">                <span class="attr">android:startX</span>=<span class="string">"48.7653"</span></div><div class="line">                <span class="attr">android:startY</span>=<span class="string">"61.0927"</span></div><div class="line">                <span class="attr">android:type</span>=<span class="string">"linear"</span>&gt;</div><div class="line">                <span class="tag">&lt;<span class="name">item</span></span></div><div class="line">                    <span class="attr">android:color</span>=<span class="string">"#44000000"</span></div><div class="line">                    <span class="attr">android:offset</span>=<span class="string">"0.0"</span> /&gt;</div><div class="line">                <span class="tag">&lt;<span class="name">item</span></span></div><div class="line">                    <span class="attr">android:color</span>=<span class="string">"#00000000"</span></div><div class="line">                    <span class="attr">android:offset</span>=<span class="string">"1.0"</span> /&gt;</div><div class="line">            <span class="tag">&lt;/<span class="name">gradient</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">aapt:attr</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">path</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--省略部分代码--&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">vector</span>&gt;</span></div></pre></td></tr></table></figure></p><p>它们都是 vector，<code>&lt;foreground&gt;</code>和<code>&lt;background&gt;</code> 是支持<code>android:drawable</code>属性，我直接换成 ic_launcher_background.png 和 ic_launcher_foreground.png，<code>&lt;foreground&gt;</code>和<code>&lt;background&gt;</code>也支持<code>@color/资源名</code>。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">adaptive-icon</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--&lt;background android:drawable="@color/colorAccent" /&gt;--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">background</span> <span class="attr">android:drawable</span>=<span class="string">"@drawable/ic_launcher_background"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">foreground</span> <span class="attr">android:drawable</span>=<span class="string">"@drawable/ic_launcher_foreground"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">adaptive-icon</span>&gt;</span></div></pre></td></tr></table></figure></p><p>然后清单使用<code>android:icon</code> 属性以指定可绘制资源，还可以使用该<code>android:roundIcon</code> 属性定义图标可绘制资源。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">application</span></span></div><div class="line">    …</div><div class="line">    <span class="attr">android:icon</span>=<span class="string">"@mipmap/ic_launcher"</span></div><div class="line">    <span class="attr">android:roundIcon</span>=<span class="string">"@mipmap/ic_launcher_round"</span></div><div class="line">    …&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">application</span>&gt;</span></div></pre></td></tr></table></figure></p><p>如果要将常规自适应启动器图标应用于快捷方式的相同蒙版和视觉效果，使用以下：</p><ul><li>对于静态快捷方式，请使用该<code>&lt;adaptive-icon&gt;</code>元素。</li><li>对于动态快捷方式，请在<code>createWithAdaptiveBitmap()</code> 创建方法时调用该 方法。</li></ul><p>大功告成，Android 8.0 上能自适应，以下是默认的图标。</p><p>注意：Android Studio 3.0 以下的编译器无法找到 adaptive-icon 标签，这点未验证。</p><h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><p>公众号「吴小龙同学」回复：AdaptiveIconsSample，获得完整 Sample 代码。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;项目中遇到一个问题，Android 8.0 系统上 APP 的 icon 显示的是默认的机器人的 icon，这是什么回事？原来 Android 8.0（API 级别 26）引入了自适应启动器图标，可以在不同设备模型中显示各种形状。下面看下官方酷炫动态图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://developer.android.google.cn/guide/practices/ui_guidelines/images/NB_Icon_Mask_Shapes_Ext_01.gif&quot; alt=&quot;适用于自适应图标线框的各种遮罩&quot;&gt; &lt;img src=&quot;https://developer.android.google.cn/guide/practices/ui_guidelines/images/NB_Icon_Mask_Shapes_Ext_02.gif&quot; alt=&quot;适用于自适应图标的各种蒙版&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Adaptive Icons" scheme="http://wuxiaolong.me/categories/Adaptive-Icons/"/>
    
    
      <category term="Adaptive Icons" scheme="http://wuxiaolong.me/tags/Adaptive-Icons/"/>
    
  </entry>
  
  <entry>
    <title>Android 从 Web 唤起 APP</title>
    <link href="http://wuxiaolong.me/2018/04/04/web2app/"/>
    <id>http://wuxiaolong.me/2018/04/04/web2app/</id>
    <published>2018-04-04T13:58:23.000Z</published>
    <updated>2018-10-14T03:09:48.634Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><img src="http://wuxiaolong.github.io/images/WebToAPP2.png" alt=""><br>知乎在手机浏览器打开，会有个 App 内打开的按钮，点击直接打开且跳转到该详情页，是不是有点神奇，是如何做到的呢？<br><a id="more"></a></p><h1 id="效果预览"><a href="#效果预览" class="headerlink" title="效果预览"></a>效果预览</h1><p><img src="http://wuxiaolong.github.io/images/WebToAPP0.gif" alt=""></p><h1 id="Uri-Scheme"><a href="#Uri-Scheme" class="headerlink" title="Uri Scheme"></a>Uri Scheme</h1><h2 id="配置-intent-filter"><a href="#配置-intent-filter" class="headerlink" title="配置 intent-filter"></a>配置 intent-filter</h2><p>AndroidManifest.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".MainActivity"</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 需要添加下面的intent-filter配置 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.VIEW"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.DEFAULT"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.BROWSABLE"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">data</span></span></div><div class="line">            <span class="attr">android:host</span>=<span class="string">"myhost"</span></div><div class="line">            <span class="attr">android:path</span>=<span class="string">"/main"</span></div><div class="line">            <span class="attr">android:port</span>=<span class="string">"1024"</span></div><div class="line">            <span class="attr">android:scheme</span>=<span class="string">"myscheme"</span> /&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></div></pre></td></tr></table></figure></p><h2 id="测试网页"><a href="#测试网页" class="headerlink" title="测试网页"></a>测试网页</h2><p>main 下新建 assets 文件，写了简单的 Html 网页用于 WebView 展示，来进行测试。</p><p>index.html：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是一个 WebView<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"market://details?id=com.tencent.mm"</span>&gt;</span>open app with market<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"myscheme://myhost:1024/main?key1=value1&amp;key2=value2"</span>&gt;</span>open app with Uri Scheme<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p><p>Web View 加载：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">webView.loadUrl(<span class="string">"file:///android_asset/index.html"</span>);</div></pre></td></tr></table></figure></p><h2 id="目标页面"><a href="#目标页面" class="headerlink" title="目标页面"></a>目标页面</h2><p>接受参数，做相应的处理。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">Intent intent = getIntent();</div><div class="line"><span class="keyword">if</span> (<span class="keyword">null</span> != intent &amp;&amp; <span class="keyword">null</span> != intent.getData()) &#123;</div><div class="line">    <span class="comment">// uri 就相当于 web 页面中的链接</span></div><div class="line">    Uri uri = intent.getData();</div><div class="line">    Log.e(TAG, <span class="string">"uri="</span> +uri);</div><div class="line">    String scheme = uri.getScheme();</div><div class="line">    String host = uri.getHost();</div><div class="line">    <span class="keyword">int</span> port = uri.getPort();</div><div class="line">    String path = uri.getPath();</div><div class="line">    String key1 = uri.getQueryParameter(<span class="string">"key1"</span>);</div><div class="line">    String key2 = uri.getQueryParameter(<span class="string">"key2"</span>);</div><div class="line">    Log.e(TAG, <span class="string">"scheme="</span> + scheme + <span class="string">",host="</span> + host</div><div class="line">            + <span class="string">",port="</span> + port + <span class="string">",path="</span> + path</div><div class="line">            + <span class="string">",query="</span> + uri.getQuery()</div><div class="line">            + <span class="string">",key1="</span> + key1 + <span class="string">"，key2="</span> + key2);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>打印消息如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">uri=myscheme:<span class="comment">//myhost:1024/main?key1=value1&amp;key2=value2</span></div><div class="line">scheme=myscheme,host=myhost,port=<span class="number">1024</span>,path=/main,query=key1=value1&amp;key2=value2,key1=value1，key2=value2</div></pre></td></tr></table></figure></p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>myscheme://myhost:1024/main?key1=value1&amp;key2=value2，通过一个链接，为什么能启动相应的 APP 呢？<a href="http://johnnyshieh.me/posts/web-evoke-app/" target="_blank" rel="noopener">Web 唤起 Android app 的实现及原理</a>，一文说到关键代码在 Android 6.0 的原生浏览器的 shouldOverrideUrlLoading 方法，核心实现在 <a href="http://androidxref.com/6.0.1_r10/xref/packages/apps/Browser/src/com/android/browser/UrlHandler.java" target="_blank" rel="noopener">UrlHandler</a> 这个类中。代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">final</span> <span class="keyword">static</span> String SCHEME_WTAI = <span class="string">"wtai://wp/"</span>;</div><div class="line"><span class="keyword">final</span> <span class="keyword">static</span> String SCHEME_WTAI_MC = <span class="string">"wtai://wp/mc;"</span>;</div><div class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">shouldOverrideUrlLoading</span><span class="params">(Tab tab, WebView view, String url)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (view.isPrivateBrowsingEnabled()) &#123;</div><div class="line">        <span class="comment">// Don't allow urls to leave the browser app when in</span></div><div class="line">        <span class="comment">// private browsing mode</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (url.startsWith(SCHEME_WTAI)) &#123;</div><div class="line">        <span class="comment">// wtai://wp/mc;number</span></div><div class="line">        <span class="comment">// number=string(phone-number)</span></div><div class="line">        <span class="keyword">if</span> (url.startsWith(SCHEME_WTAI_MC)) &#123;</div><div class="line">            Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_VIEW,</div><div class="line">                    Uri.parse(WebView.SCHEME_TEL +</div><div class="line">                            url.substring(SCHEME_WTAI_MC.length())));</div><div class="line">            mActivity.startActivity(intent);</div><div class="line">            <span class="comment">// before leaving BrowserActivity, close the empty child tab.</span></div><div class="line">            <span class="comment">// If a new tab is created through JavaScript open to load this</span></div><div class="line">            <span class="comment">// url, we would like to close it as we will load this url in a</span></div><div class="line">            <span class="comment">// different Activity.</span></div><div class="line">            mController.closeEmptyTab();</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//……</span></div><div class="line">    &#125;</div></pre></td></tr></table></figure></p><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p>公众号「吴小龙同学」回复「SchemeSample」，获取这次练习的完整示例。</p><h1 id="Deep-Links"><a href="#Deep-Links" class="headerlink" title="Deep Links"></a>Deep Links</h1><p><img src="http://wuxiaolong.github.io/images/WebToAPP1.png" alt=""></p><p>如图，在 Android M 之前，如果点击一个链接有多个 APP 符合，会弹出一个对话框，询问用户使用哪个应用打开 － 包括浏览器应用。谷歌在Android M 上实现了一个自动认证（auto-verify）机制，让开发者可以避开这个弹出框，使用户不必去选择一个列表，直接跳转到他们的 APP。</p><h1 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h1><p><a href="https://github.com/hehonghui/android-tech-frontier/blob/master/issue-15/Android-M%E7%9A%84App-Links%E5%AE%9E%E7%8E%B0%E8%AF%A6%E8%A7%A3.md" target="_blank" rel="noopener">Android M的App Links实现详解</a></p><p><a href="http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/0718/3200.html" target="_blank" rel="noopener">Android M App Links: 实现, 缺陷以及解决办法</a></p><p>我没有验证，因为我玩不起来，有条件更新下 Deep Links 这块内容，可以自己搭个本地服务器。</p><h2 id="弊端"><a href="#弊端" class="headerlink" title="弊端"></a>弊端</h2><h3 id="需要-Android-M"><a href="#需要-Android-M" class="headerlink" title="需要 Android M"></a>需要 Android M</h3><p>需要 Android 6.0（minSdkVersion 级别23）及更高版本上的才能使用。</p><h3 id="well-known-assetlinks-json"><a href="#well-known-assetlinks-json" class="headerlink" title=".well-known/assetlinks.json"></a>.well-known/assetlinks.json</h3><p>开发者必须维护一个与app相关联的网站，通过在以下位置托管数字资产链接 JSON 文件来声明您的网站与您的意图过滤器之间的关系：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://domain.name/.well-known/assetlinks.json</div></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.jianshu.com/p/1cd02fe1810f" target="_blank" rel="noopener">Android 使用Scheme实现从网页启动APP</a></p><p><a href="http://blog.zhaiyifan.cn/2016/02/04/deeplink-intro/" target="_blank" rel="noopener">Deep Link是什么</a></p><p><a href="https://segmentfault.com/a/1190000006101709" target="_blank" rel="noopener">Android移动开发者必须知道的Deep Linking技术</a></p><p><a href="https://developer.android.com/training/app-links/index.html" target="_blank" rel="noopener">Handling Android App Links</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://wuxiaolong.github.io/images/WebToAPP2.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;知乎在手机浏览器打开，会有个 App 内打开的按钮，点击直接打开且跳转到该详情页，是不是有点神奇，是如何做到的呢？&lt;br&gt;
    
    </summary>
    
      <category term="App Links" scheme="http://wuxiaolong.me/categories/App-Links/"/>
    
    
      <category term="App Links" scheme="http://wuxiaolong.me/tags/App-Links/"/>
    
  </entry>
  
  <entry>
    <title>Flutter 初尝：从 Java 无缝过渡</title>
    <link href="http://wuxiaolong.me/2018/03/08/Flutter/"/>
    <id>http://wuxiaolong.me/2018/03/08/Flutter/</id>
    <published>2018-03-08T09:04:12.000Z</published>
    <updated>2018-10-14T03:38:24.062Z</updated>
    
    <content type="html"><![CDATA[<h1 id="准备阶段"><a href="#准备阶段" class="headerlink" title="准备阶段"></a>准备阶段</h1><h2 id="下载-Flutter-SDK"><a href="#下载-Flutter-SDK" class="headerlink" title="下载 Flutter SDK"></a>下载 Flutter SDK</h2><p>如果不能科学上网，可以声明 PUB_HOSTED_URL 和 FLUTTER_STORAGE_BASE_URL 两个环境变量，执行如下两行命令，是为了让 Flutter 在安装过程中使用国内的镜像：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">export</span> PUB_HOSTED_URL=https://pub.flutter-io.cn</div><div class="line"><span class="built_in">export</span> FLUTTER_STORAGE_BASE_URL=https://storage.flutter-io.cn</div></pre></td></tr></table></figure></p><p>新建 Flutter 文件夹，克隆 Flutter SDK：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> -b beta https://github.com/flutter/flutter.git</div></pre></td></tr></table></figure></p><a id="more"></a><h2 id="配置-Flutter-环境"><a href="#配置-Flutter-环境" class="headerlink" title="配置 Flutter 环境"></a>配置 Flutter 环境</h2><p>我是 Mac 系统，Flutter SDK 下载完后的路径：Users/wuxiaolong/Flutter/flutter/ 。</p><h3 id="在命令行下，进入用户目录"><a href="#在命令行下，进入用户目录" class="headerlink" title="在命令行下，进入用户目录"></a>在命令行下，进入用户目录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> <span class="variable">$HOME</span></div></pre></td></tr></table></figure><h3 id="打开-bash-profile文件"><a href="#打开-bash-profile文件" class="headerlink" title="打开.bash_profile文件"></a>打开.bash_profile文件</h3><p>执行命令打开文件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">open -e .bash_profile</div></pre></td></tr></table></figure></p><p>打开文件后，添加 Flutter SDK 安装的路径：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">export</span> PATH=<span class="variable">$&#123;PATH&#125;</span>:/Users/wuxiaolong/Flutter/flutter/bin:<span class="variable">$PATH</span></div><div class="line">`</div></pre></td></tr></table></figure></p><h3 id="更新刚配置的环境变量"><a href="#更新刚配置的环境变量" class="headerlink" title="更新刚配置的环境变量"></a>更新刚配置的环境变量</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">source</span> .bash_profile</div></pre></td></tr></table></figure><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>终端直接输入  flutter，没有提示该命令找不到，则配置成功。</p><h2 id="flutter-doctor"><a href="#flutter-doctor" class="headerlink" title="flutter doctor"></a>flutter doctor</h2><p>命令行输入<code>flutter doctor</code>，安装 Futter 剩余依赖项。</p><h2 id="安装-Flutter-和-Dart-插件"><a href="#安装-Flutter-和-Dart-插件" class="headerlink" title="安装 Flutter 和 Dart 插件"></a>安装 Flutter 和 Dart 插件</h2><p>启动 Android Studio，搜索 Flutter 插件并单击 install，系统提示您安装 Dart 插件，点击 Yes 安装即可。</p><p><strong>提示</strong>：安装 Dart 插件可能会提示下载失败，多试几次。</p><h2 id="第一个项目"><a href="#第一个项目" class="headerlink" title="第一个项目"></a>第一个项目</h2><p>Android Studio - File - New - New Flutter Project，等待创建成功后，运行效果如下：<br><img src="http://wuxiaolong.github.io/images/Flutter0.png" alt=""></p><h1 id="Dart-基本语法"><a href="#Dart-基本语法" class="headerlink" title="Dart 基本语法"></a>Dart 基本语法</h1><p>Flutter 开发语言是 Dart，这个语言相信我们做原生 Android 的都能看懂，我在学习过程，感觉这不就是 Java 嘛，我直接按照 Java 思维去写，完全没问题。</p><ol><li><p>基础数据类型有 int、double、bool、String、List（数组）、Map；</p></li><li><p>声明变量可以使用 var，也可以使用 const 和 final；</p></li><li><p>const 和 final 定义的都是常量，值不能改变，并且在声明的时候就必须初始化，这是可以省略 var 或者其他类型；</p></li><li><p>函数可以有可选参数；</p></li><li><p>if-else、for 循环、while 循环、switch-case、try-catch 等知识与 Java  类似；</p></li></ol><p>更多详见官网：<a href="https://www.dartlang.org/" target="_blank" rel="noopener">https://www.dartlang.org/</a></p><h1 id="练手"><a href="#练手" class="headerlink" title="练手"></a>练手</h1><p>这里使用了豆瓣电影的 API，功能很简单，就一个列表和详情。</p><h2 id="效果预览"><a href="#效果预览" class="headerlink" title="效果预览"></a>效果预览</h2><p><img src="http://wuxiaolong.github.io/images/Flutter3.gif" alt=""></p><h2 id="遇到问题"><a href="#遇到问题" class="headerlink" title="遇到问题"></a>遇到问题</h2><p>学习新知识，第一步就是模仿，多看，多想，多实践，在这个过程我遇到一些问题：</p><ol><li><p>Flutter 怎么打印信息？<code>print(&#39;onclick&#39;);</code></p></li><li><p>Flutter 如何看报错信息？在 Android Studio 底栏 Run 非 LogCat；</p></li><li><p>网络请求怎么写？</p></li><li><p>接口数据如何解析的？</p></li><li><p>如何一进页面就请求接口？</p></li><li><p>网络图片怎么显示？</p></li><li><p>ListView 官网介绍的 Item 是通用的，如何定制？</p></li><li><p>跳转页面如何传参？传参后怎么用？</p></li></ol><p>等等，遇到一个问题，消灭一个。</p><h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><h2 id="源码地址"><a href="#源码地址" class="headerlink" title="源码地址"></a>源码地址</h2><p><a href="https://github.com/WuXiaolong/flutter_movie" target="_blank" rel="noopener">https://github.com/WuXiaolong/flutter_movie</a> ，该项目起始页面在 lib/main.dart，注意的点我也都加了注释，去吧，学习还是要靠自己，踏出第一步，实践起来。</p><h2 id="如何导入-Flutter-项目"><a href="#如何导入-Flutter-项目" class="headerlink" title="如何导入 Flutter 项目"></a>如何导入 Flutter 项目</h2><h3 id="下载-Flutter-项目"><a href="#下载-Flutter-项目" class="headerlink" title="下载 Flutter 项目"></a>下载 Flutter 项目</h3><p>下载完 Flutter 项目，直接 Android Studio - Open。</p><h3 id="配置-Flutter-SDK"><a href="#配置-Flutter-SDK" class="headerlink" title="配置 Flutter SDK"></a>配置 Flutter SDK</h3><p><img src="http://wuxiaolong.github.io/images/Flutter1.png" alt=""><br>如图，点击 Open Flutter setting，点击下拉按钮，选择 Flutter SDK 路径，点击 OK，会自动配置 Dart SDK 路径。</p><h3 id="pubspec-yaml-下载库"><a href="#pubspec-yaml-下载库" class="headerlink" title="pubspec.yaml 下载库"></a>pubspec.yaml 下载库</h3><p><img src="http://wuxiaolong.github.io/images/Flutter2.png" alt=""><br>如图，点击 Packages get，下载项目用到的依赖库，编译完成应该就能正常运行了。</p><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><ol><li><p>还是被 Flutter 惊艳到了，重拾当初学习 Android 的热情，却一不小心，我的肩痛又开始了；</p></li><li><p>Flutter UI 全是代码写的，不是 XML，复杂的 UI 实现有难度；</p></li><li><p>Flutter 联想功能较弱，需要先导入相应的包，才有相应的类联想；</p></li><li><p>新建了一个 package，将 dart 文件拖入，相关联包的路径会相应修改，但是我改了package 名，就无法相应修改，bug？</p></li><li><p>Flutter，我感觉可以从 Java 实现无缝过度；</p></li><li><p>I’m a iOS Developer.</p></li><li><p>Flutter 开源库远没有原生的丰富，目前还是 Beta 版，还是很值得期待，我会持续关注学习，先就酱紫吧。</p></li></ol><h1 id="相关阅读"><a href="#相关阅读" class="headerlink" title="相关阅读"></a>相关阅读</h1><p><a href="https://flutter.io/" target="_blank" rel="noopener">Flutter 官网</a></p><p><a href="http://wuxiaolong.me/2017/07/19/mac-adb-gradlew/">Mac 配置 adb 环境、gradlew：command not found</a></p><p><a href="https://github.com/CodemateLtd/FlutterMates" target="_blank" rel="noopener">FlutterMates</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;准备阶段&quot;&gt;&lt;a href=&quot;#准备阶段&quot; class=&quot;headerlink&quot; title=&quot;准备阶段&quot;&gt;&lt;/a&gt;准备阶段&lt;/h1&gt;&lt;h2 id=&quot;下载-Flutter-SDK&quot;&gt;&lt;a href=&quot;#下载-Flutter-SDK&quot; class=&quot;headerlink&quot; title=&quot;下载 Flutter SDK&quot;&gt;&lt;/a&gt;下载 Flutter SDK&lt;/h2&gt;&lt;p&gt;如果不能科学上网，可以声明 PUB_HOSTED_URL 和 FLUTTER_STORAGE_BASE_URL 两个环境变量，执行如下两行命令，是为了让 Flutter 在安装过程中使用国内的镜像：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;export&lt;/span&gt; PUB_HOSTED_URL=https://pub.flutter-io.cn&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;export&lt;/span&gt; FLUTTER_STORAGE_BASE_URL=https://storage.flutter-io.cn&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;新建 Flutter 文件夹，克隆 Flutter SDK：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;git &lt;span class=&quot;built_in&quot;&gt;clone&lt;/span&gt; -b beta https://github.com/flutter/flutter.git&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Flutter" scheme="http://wuxiaolong.me/categories/Flutter/"/>
    
    
      <category term="Flutter" scheme="http://wuxiaolong.me/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>Python 爬虫实战（二）：使用 requests-html</title>
    <link href="http://wuxiaolong.me/2018/02/25/PythonCrawler2/"/>
    <id>http://wuxiaolong.me/2018/02/25/PythonCrawler2/</id>
    <published>2018-02-25T14:33:46.000Z</published>
    <updated>2018-10-14T03:18:57.590Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://wuxiaolong.me/2017/12/10/PythonCrawler1/">Python 爬虫实战（一）：使用 requests 和 BeautifulSoup</a>，我们使用了 requests 做网络请求，拿到网页数据再用 BeautifulSoup 解析，就在前不久，<a href="https://github.com/requests/requests" target="_blank" rel="noopener">requests</a> 作者 <a href="https://github.com/kennethreitz" target="_blank" rel="noopener">kennethreitz</a> 出了一个新库 <a href="https://github.com/kennethreitz/requests-html" target="_blank" rel="noopener">requests-html</a>，Pythonic HTML Parsing for Humans™，它可以用于解析 HTML 文档的。requests-html 是基于现有的框架 PyQuery、Requests、lxml 等库进行了二次封装，更加方便开发者调用。<br><a id="more"></a></p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>Mac：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip3 install requests-html</div></pre></td></tr></table></figure></p><p>Windows：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install requests-html</div></pre></td></tr></table></figure></p><h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><p><img src="http://wuxiaolong.github.io/images/PythonCrawler1.png" alt=""></p><p>代码撸多了，让我们看会妹纸，爬的网站我选的是 <a href="http://www.win4000.com/zt/xinggan.html" target="_blank" rel="noopener">http://www.win4000.com/zt/xinggan.html</a> ，打开网站，观察到这是个列表，图片是缩略图，要想保存图片到本地，当然需要高清大图，因此得进入列表详情，进一步解析，完整代码如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> requests_html <span class="keyword">import</span> HTMLSession</div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">import</span> time</div><div class="line"></div><div class="line">session = HTMLSession()</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 解析图片列表</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_girl_list</span><span class="params">()</span>:</span></div><div class="line">    <span class="comment"># 返回一个 response 对象</span></div><div class="line">    response = session.get(<span class="string">'http://www.win4000.com/zt/xinggan.html'</span>)  <span class="comment"># 单位秒数</span></div><div class="line"></div><div class="line">    content = response.html.find(<span class="string">'div.Left_bar'</span>, first=<span class="keyword">True</span>)</div><div class="line"></div><div class="line">    li_list = content.find(<span class="string">'li'</span>)</div><div class="line"></div><div class="line">    <span class="keyword">for</span> li <span class="keyword">in</span> li_list:</div><div class="line">        url = li.find(<span class="string">'a'</span>, first=<span class="keyword">True</span>).attrs[<span class="string">'href'</span>]</div><div class="line">        get_girl_detail(url)</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 解析图片详细</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_girl_detail</span><span class="params">(url)</span>:</span></div><div class="line">    <span class="comment"># 返回一个 response 对象</span></div><div class="line">    response = session.get(url)  <span class="comment"># 单位秒数</span></div><div class="line">    content = response.html.find(<span class="string">'div.scroll-img-cont'</span>, first=<span class="keyword">True</span>)</div><div class="line">    li_list = content.find(<span class="string">'li'</span>)</div><div class="line">    <span class="keyword">for</span> li <span class="keyword">in</span> li_list:</div><div class="line">        img_url = li.find(<span class="string">'img'</span>, first=<span class="keyword">True</span>).attrs[<span class="string">'data-original'</span>]</div><div class="line">        img_url = img_url[<span class="number">0</span>:img_url.find(<span class="string">'_'</span>)] + <span class="string">'.jpg'</span></div><div class="line">        print(img_url + <span class="string">'.jpg'</span>)</div><div class="line">        save_image(img_url)</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 保持大图</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_image</span><span class="params">(img_url)</span>:</span></div><div class="line">    img_response = requests.get(img_url)</div><div class="line">    t = int(round(time.time() * <span class="number">1000</span>))  <span class="comment"># 毫秒级时间戳</span></div><div class="line">    f = open(<span class="string">'/Users/wuxiaolong/Desktop/Girl/%d.jpg'</span> % t, <span class="string">'ab'</span>)  <span class="comment"># 存储图片，多媒体文件需要参数b（二进制文件）</span></div><div class="line">    f.write(img_response.content)  <span class="comment"># 多媒体存储content</span></div><div class="line">    f.close()</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    get_girl_list()</div></pre></td></tr></table></figure></p><p>代码就这么多，是不是感觉很简单啊。</p><p><strong>说明：</strong></p><p>1、requests-html 与 BeautifulSoup 不同，可以直接通过标签来 find，一般如下：<br>标签<br>标签.someClass<br>标签#someID<br>标签[target=_blank]<br>参数 first 是 True，表示只返回 Element 找到的第一个，更多使用：<a href="http://html.python-requests.org/" target="_blank" rel="noopener">http://html.python-requests.org/</a> ；</p><p>2、这里保存本地路径 <code>/Users/wuxiaolong/Desktop/Girl/</code>我写死了，需要读者改成自己的，如果直接是文件名，保存路径将是项目目录下。</p><h1 id="遗留问题"><a href="#遗留问题" class="headerlink" title="遗留问题"></a>遗留问题</h1><p>示例所爬网站是分页的，没有做，可以定时循环来爬妹纸哦，有兴趣的读者自己玩下。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://github.com/kennethreitz/requests-html" target="_blank" rel="noopener">requests-html</a></p><p><a href="http://blog.csdn.net/qq_31845675/article/details/79501868" target="_blank" rel="noopener">今天用了一下Requests-HTML库（Python爬虫）</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://wuxiaolong.me/2017/12/10/PythonCrawler1/&quot;&gt;Python 爬虫实战（一）：使用 requests 和 BeautifulSoup&lt;/a&gt;，我们使用了 requests 做网络请求，拿到网页数据再用 BeautifulSoup 解析，就在前不久，&lt;a href=&quot;https://github.com/requests/requests&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;requests&lt;/a&gt; 作者 &lt;a href=&quot;https://github.com/kennethreitz&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;kennethreitz&lt;/a&gt; 出了一个新库 &lt;a href=&quot;https://github.com/kennethreitz/requests-html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;requests-html&lt;/a&gt;，Pythonic HTML Parsing for Humans™，它可以用于解析 HTML 文档的。requests-html 是基于现有的框架 PyQuery、Requests、lxml 等库进行了二次封装，更加方便开发者调用。&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://wuxiaolong.me/categories/Python/"/>
    
    
      <category term="Python" scheme="http://wuxiaolong.me/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Android 进程间通信</title>
    <link href="http://wuxiaolong.me/2018/02/15/AndroidIPC/"/>
    <id>http://wuxiaolong.me/2018/02/15/AndroidIPC/</id>
    <published>2018-02-15T14:19:14.000Z</published>
    <updated>2018-10-14T03:18:59.802Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>什么鬼！单例居然失效了，一个地方设置值，另个地方居然取不到，这怎么可能？没道理啊！排查半天，发现这两就不在一个进程里，才恍然大悟……</p></blockquote><h1 id="什么是进程"><a href="#什么是进程" class="headerlink" title="什么是进程"></a>什么是进程</h1><p>按照操作系统中的描述：进程一般指一个执行单元，在 PC 和移动设备上指一个程序或者一个应用。</p><h1 id="为什么要使用多进程"><a href="#为什么要使用多进程" class="headerlink" title="为什么要使用多进程"></a>为什么要使用多进程</h1><p>我们都知道，系统为 APP 每个进程分配的内存是有限的，如果想获取更多内存分配，可以使用多进程，将一些看不见的服务、比较独立而又相当占用内存的功能运行在另外一个进程当中。<br><a id="more"></a></p><h1 id="目录结构预览"><a href="#目录结构预览" class="headerlink" title="目录结构预览"></a>目录结构预览</h1><p>先放出最终实践后的目录结构，有个大概印象，后面一一介绍。<br><img src="http://wuxiaolong.github.io/images/AndroidProcess2.png" alt=""></p><p><img src="http://wuxiaolong.github.io/images/AndroidProcess3.png" alt=""></p><h1 id="如何使用多进程"><a href="#如何使用多进程" class="headerlink" title="如何使用多进程"></a>如何使用多进程</h1><p>AndroidManifest.xml 清单文件中注册 Activity、Service 等四大组件时，指定 android:process 属性即可开启多进程，如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;activity</div><div class="line">    android:name=<span class="string">".Process1Activity"</span></div><div class="line">    android:process=<span class="string">":process1"</span> /&gt;</div><div class="line">&lt;activity</div><div class="line">    android:name=<span class="string">".Process2Activity"</span></div><div class="line">    android:process=<span class="string">"com.wuxiaolong.androidprocesssample.process2"</span> /&gt;</div></pre></td></tr></table></figure><p><img src="http://wuxiaolong.github.io/images/AndroidProcess1.png" alt=""><br><strong>说明</strong>：</p><p>1、<code>com.wuxiaolong.androidprocesssample</code>，主进程，默认的是应用包名；</p><p>2、<code>android:process=&quot;:process1&quot;</code>，“：”开头，是简写，完整进程名包名 + <code>:process1</code>；</p><p>3、<code>android:process=&quot;com.wuxiaolong.androidprocesssample.process2&quot;</code>，以小写字母开头的，属于全局进程，其他应用可以通过 ShareUID 进行数据共享；</p><p>4、进程命名跟包名的命名规范一样。</p><h1 id="进程弊端"><a href="#进程弊端" class="headerlink" title="进程弊端"></a>进程弊端</h1><h2 id="Application-多次创建"><a href="#Application-多次创建" class="headerlink" title="Application 多次创建"></a>Application 多次创建</h2><p>我们自定义一个 Application 类，<code>onCreate</code> 方法进行打印 <code>Log.d(&quot;wxl&quot;, &quot;AndroidApplication onCreate&quot;);</code> ，然后启动 Process1Activity:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">com.wuxiaolong.androidprocesssample D/wxl: AndroidApplication onCreate</div><div class="line">com.wuxiaolong.androidprocesssample:process1 D/wxl: AndroidApplication onCreate</div></pre></td></tr></table></figure></p><p>看到确实被创建两次，原因见：<a href="http://www.rogerblog.cn/2016/03/17/android-proess/" target="_blank" rel="noopener">android:process 的坑，你懂吗？</a>多数情况下，我们都会在工程中自定义一个 Application 类，做一些全局性的初始化工作，因为我们要区分出来，让其在主进程进行初始化，网上解决方案：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onCreate();</div><div class="line">    String processName = AndroidUtil.getProcessName();</div><div class="line">    <span class="keyword">if</span> (getPackageName().equals(processName)) &#123;</div><div class="line">        <span class="comment">//初始化操作</span></div><div class="line">        Log.d(<span class="string">"wxl"</span>, <span class="string">"AndroidApplication onCreate="</span> + processName);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>AndroidUtil：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getProcessName</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        File file = <span class="keyword">new</span> File(<span class="string">"/proc/"</span> + android.os.Process.myPid() + <span class="string">"/"</span> + <span class="string">"cmdline"</span>);</div><div class="line">        BufferedReader mBufferedReader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(file));</div><div class="line">        String processName = mBufferedReader.readLine().trim();</div><div class="line">        mBufferedReader.close();</div><div class="line">        <span class="keyword">return</span> processName;</div><div class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="静态成员和单例模式失效"><a href="#静态成员和单例模式失效" class="headerlink" title="静态成员和单例模式失效"></a>静态成员和单例模式失效</h2><p>创建一个类 SingletonUtil：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonUtil</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingletonUtil singletonUtil;</div><div class="line">    <span class="keyword">private</span> String userId = <span class="string">"0"</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonUtil <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (singletonUtil == <span class="keyword">null</span>) &#123;</div><div class="line">            singletonUtil = <span class="keyword">new</span> SingletonUtil();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> singletonUtil;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUserId</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> userId;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserId</span><span class="params">(String userId)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.userId = userId;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>在 MainActivity 进行设置：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SingletonUtil.getInstance().setUserId(<span class="string">"007"</span>);</div></pre></td></tr></table></figure></p><p>Process1Activity 取值，打印：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Log.d(<span class="string">"wxl"</span>, <span class="string">"userId="</span> + SingletonUtil.getInstance().getUserId());</div></pre></td></tr></table></figure></p><p>发现打印 <code>userId=0</code>，单例模式失效了，因为这两个进程不在同一内存了，自然无法共享。</p><h1 id="进程间通信"><a href="#进程间通信" class="headerlink" title="进程间通信"></a>进程间通信</h1><h2 id="文件共享"><a href="#文件共享" class="headerlink" title="文件共享"></a>文件共享</h2><p>既然内存不能共享，是不是可以找个共同地方，是的，可以把要共享的数据保存 SD 卡，实现共享。首先将 SingletonUtil 实现 Serializable 序列化，将对象存入 SD 卡，然后需要用的地方，反序列化，从 SD 卡取出对象，完整代码如下：</p><h3 id="SingletonUtil"><a href="#SingletonUtil" class="headerlink" title="SingletonUtil"></a>SingletonUtil</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonUtil</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String ROOT_FILE_DIR = Environment.getExternalStorageDirectory() + File.separator + <span class="string">"User"</span> + File.separator;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String USER_STATE_FILE_NAME_DIR = <span class="string">"UserState"</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingletonUtil singletonUtil;</div><div class="line">    <span class="keyword">private</span> String userId = <span class="string">"0"</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonUtil <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (singletonUtil == <span class="keyword">null</span>) &#123;</div><div class="line">            singletonUtil = <span class="keyword">new</span> SingletonUtil();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> singletonUtil;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUserId</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> userId;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserId</span><span class="params">(String userId)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.userId = userId;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="序列化和反序列化"><a href="#序列化和反序列化" class="headerlink" title="序列化和反序列化"></a>序列化和反序列化</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AndroidUtil</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">createOrExistsDir</span><span class="params">(<span class="keyword">final</span> File file)</span> </span>&#123;</div><div class="line">        <span class="comment">// 如果存在，是目录则返回true，是文件则返回false，不存在则返回是否创建成功</span></div><div class="line">        <span class="keyword">return</span> file != <span class="keyword">null</span> &amp;&amp; (file.exists() ? file.isDirectory() : file.mkdirs());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 删除目录</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> dir 目录</div><div class="line">     * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125;: 删除成功&lt;br&gt;&#123;<span class="doctag">@code</span> false&#125;: 删除失败</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">deleteDir</span><span class="params">(<span class="keyword">final</span> File dir)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (dir == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        <span class="comment">// 目录不存在返回true</span></div><div class="line">        <span class="keyword">if</span> (!dir.exists()) <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        <span class="comment">// 不是目录返回false</span></div><div class="line">        <span class="keyword">if</span> (!dir.isDirectory()) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        <span class="comment">// 现在文件存在且是文件夹</span></div><div class="line">        File[] files = dir.listFiles();</div><div class="line">        <span class="keyword">if</span> (files != <span class="keyword">null</span> &amp;&amp; files.length != <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">for</span> (File file : files) &#123;</div><div class="line">                <span class="keyword">if</span> (file.isFile()) &#123;</div><div class="line">                    <span class="keyword">if</span> (!file.delete()) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (file.isDirectory()) &#123;</div><div class="line">                    <span class="keyword">if</span> (!deleteDir(file)) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> dir.delete();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 序列化，对象存入SD卡</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> obj          存储对象</div><div class="line">     * <span class="doctag">@param</span> destFileDir  SD卡目标路径</div><div class="line">     * <span class="doctag">@param</span> destFileName SD卡文件名</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">writeObjectToSDCard</span><span class="params">(Object obj, String destFileDir, String destFileName)</span> </span>&#123;</div><div class="line"></div><div class="line">        createOrExistsDir(<span class="keyword">new</span> File(destFileDir));</div><div class="line">        deleteDir(<span class="keyword">new</span> File(destFileDir + destFileName));</div><div class="line">        FileOutputStream fileOutputStream = <span class="keyword">null</span>;</div><div class="line">        ObjectOutputStream objectOutputStream = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            fileOutputStream = <span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(destFileDir, destFileName));</div><div class="line">            objectOutputStream = <span class="keyword">new</span> ObjectOutputStream(fileOutputStream);</div><div class="line">            objectOutputStream.writeObject(obj);</div><div class="line"></div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="keyword">if</span> (objectOutputStream != <span class="keyword">null</span>) &#123;</div><div class="line">                    objectOutputStream.close();</div><div class="line">                    objectOutputStream = <span class="keyword">null</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span> (fileOutputStream != <span class="keyword">null</span>) &#123;</div><div class="line">                    fileOutputStream.close();</div><div class="line">                    fileOutputStream = <span class="keyword">null</span>;</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 反序列化，从SD卡取出对象</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> destFileDir  SD卡目标路径</div><div class="line">     * <span class="doctag">@param</span> destFileName SD卡文件名</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">readObjectFromSDCard</span><span class="params">(String destFileDir, String destFileName)</span> </span>&#123;</div><div class="line">        FileInputStream fileInputStream = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">        Object object = <span class="keyword">null</span>;</div><div class="line">        ObjectInputStream objectInputStream = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            fileInputStream = <span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> File(destFileDir, destFileName));</div><div class="line">            objectInputStream = <span class="keyword">new</span> ObjectInputStream(fileInputStream);</div><div class="line">            object = objectInputStream.readObject();</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="keyword">if</span> (objectInputStream != <span class="keyword">null</span>) &#123;</div><div class="line">                    objectInputStream.close();</div><div class="line">                    objectInputStream = <span class="keyword">null</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span> (fileInputStream != <span class="keyword">null</span>) &#123;</div><div class="line">                    fileInputStream.close();</div><div class="line">                    fileInputStream = <span class="keyword">null</span>;</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> object;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>需要权限：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.WRITE_EXTERNAL_STORAGE"</span> /&gt;</span></div></pre></td></tr></table></figure><h3 id="MainActivity-序列写入"><a href="#MainActivity-序列写入" class="headerlink" title="MainActivity 序列写入"></a>MainActivity 序列写入</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">SingletonUtil singletonUtil = SingletonUtil.getInstance();</div><div class="line">singletonUtil.setUserId(<span class="string">"007"</span>);</div><div class="line">AndroidUtil.writeObjectToSDCard(singletonUtil, SingletonUtil.ROOT_FILE_DIR, SingletonUtil.USER_STATE_FILE_NAME_DIR);</div></pre></td></tr></table></figure><h3 id="Process1Activity-反序列化取值"><a href="#Process1Activity-反序列化取值" class="headerlink" title="Process1Activity 反序列化取值"></a>Process1Activity 反序列化取值</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Object object = AndroidUtil.readObjectFromSDCard(SingletonUtil.ROOT_FILE_DIR, SingletonUtil.USER_STATE_FILE_NAME_DIR);</div><div class="line"><span class="keyword">if</span> (object != <span class="keyword">null</span>) &#123;</div><div class="line">    SingletonUtil singletonUtil = (SingletonUtil) object;</div><div class="line">    Log.d(<span class="string">"wxl"</span>, <span class="string">"userId="</span> + singletonUtil.getUserId());<span class="comment">//打印：userId=007</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="AIDL"><a href="#AIDL" class="headerlink" title="AIDL"></a>AIDL</h2><p>AIDL，Android 接口定义语言，定义客户端与服务端进程间通信，服务端有处理多线程时，才有必要使用 AIDL，不然可以使用 Messenger ，后文介绍。</p><h3 id="单个应用，多个进程"><a href="#单个应用，多个进程" class="headerlink" title="单个应用，多个进程"></a>单个应用，多个进程</h3><h4 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h4><p>AIDL 传递数据有基本类型 int，long，boolean，float，double，也支持 String，CharSequence，List，Map，传递对象需要实现 Parcelable 接口，这时需要指定 in（客户端数据对象流向服务端）、out （数据对象由服务端流向客户端）。</p><p>1、Userbean.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserBean</span> <span class="keyword">implements</span> <span class="title">Parcelable</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> userId;</div><div class="line">    <span class="keyword">private</span> String userName;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getUserId</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> userId;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserId</span><span class="params">(<span class="keyword">int</span> userId)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.userId = userId;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUserName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> userName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserName</span><span class="params">(String userName)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.userName = userName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserBean</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">UserBean</span><span class="params">(Parcel in)</span> </span>&#123;</div><div class="line">        userId = in.readInt();</div><div class="line">        userName = in.readString();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * <span class="doctag">@return</span> 0 或 1 ，1 含有文件描述符</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">describeContents</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 系列化</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> dest  当前对象</div><div class="line">     * <span class="doctag">@param</span> flags 0 或 1，1 代表当前对象需要作为返回值，不能立即释放资源</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeToParcel</span><span class="params">(Parcel dest, <span class="keyword">int</span> flags)</span> </span>&#123;</div><div class="line">        dest.writeInt(userId);</div><div class="line">        dest.writeString(userName);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 反序列化</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Creator&lt;UserBean&gt; CREATOR = <span class="keyword">new</span> Creator&lt;UserBean&gt;() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> UserBean <span class="title">createFromParcel</span><span class="params">(Parcel in)</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> UserBean(in);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="keyword">public</span> UserBean[] newArray(<span class="keyword">int</span> size) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> UserBean[size];</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>2、UserBean.aidl</p><p>Userbean.java 同包下创建对应的 UserBean.aidl 文件，与 aidl 调用和交互。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// UserBean.aidl</span></div><div class="line"><span class="keyword">package</span> com.wuxiaolong.androidprocesssample;</div><div class="line"></div><div class="line">parcelable UserBean;</div></pre></td></tr></table></figure><p>3、IUserManager.aidl<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">// IUserManager.aidl</div><div class="line">package com.wuxiaolong.androidprocesssample;</div><div class="line"></div><div class="line">// Declare any non-default types here with import statements</div><div class="line">//手动导入</div><div class="line">import com.wuxiaolong.androidprocesssample.UserBean;</div><div class="line"></div><div class="line">interface IUserManager &#123;</div><div class="line"></div><div class="line">    //基本数据类型：int，long，boolean，float，double，String</div><div class="line">    void hello(String aString);</div><div class="line"></div><div class="line">    //非基本数据类型，传递对象</div><div class="line">    void getUser(in UserBean userBean);//in 客户端-&gt;服务端</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>4、服务类</p><p>新建 AIDLService 继承 Service，并且实现 onBind() 方法返回一个你实现生成的 Stub 类，把它暴露给客户端。Stub 定义了一些辅助的方法，最显著的就是 asInterface()，它是用来接收一个 IBinder，并且返回一个 Stub 接口的实例 。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AIDLService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Binder binder = <span class="keyword">new</span> IUserManager.Stub() &#123;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUser</span><span class="params">(UserBean userBean)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</div><div class="line">            Log.d(<span class="string">"wxl"</span>, userBean.getUserId() + <span class="string">","</span> + userBean.getUserName() + <span class="string">" from AIDL Service"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">(String aString)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</div><div class="line">            Log.d(<span class="string">"wxl"</span>, aString + <span class="string">" from AIDL Service"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="meta">@Nullable</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> binder;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>AndroidManifest 注册：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;service</div><div class="line">    android:name=<span class="string">".AIDLService"</span></div><div class="line">    android:process=<span class="string">":aidlRemote"</span> /&gt;</div></pre></td></tr></table></figure></p><p>以上创建完毕，build clean 下，会自动生成 aidl 对应的 java 类供客户端调用。</p><h4 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h4><p>1、app/build.gradle</p><p>需要指定 aidl 路径：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">android &#123;</div><div class="line">    <span class="comment">//……</span></div><div class="line">    sourceSets &#123;</div><div class="line">        main &#123;</div><div class="line">            java.srcDirs = [<span class="string">'src/main/java'</span>, <span class="string">'src/main/aidl'</span>]</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>2、启动服务，建立联系<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> ServiceConnection aidlServiceConnection = <span class="keyword">new</span> ServiceConnection() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceConnected</span><span class="params">(ComponentName name, IBinder service)</span> </span>&#123;</div><div class="line">            IUserManager remoteService = IUserManager.Stub.asInterface(service);</div><div class="line">            UserBean userBean = <span class="keyword">new</span> UserBean();</div><div class="line">            userBean.setUserId(<span class="number">1</span>);</div><div class="line">            userBean.setUserName(<span class="string">"WuXiaolong"</span>);</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                remoteService.getUser(userBean);</div><div class="line">                remoteService.hello(<span class="string">"Hello"</span>);</div><div class="line">            &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceDisconnected</span><span class="params">(ComponentName name)</span> </span>&#123;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, AIDLService.class);</div><div class="line">        bindService(intent, aidlServiceConnection, Context.BIND_AUTO_CREATE);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">        unbindService(aidlServiceConnection);</div><div class="line">        <span class="keyword">super</span>.onDestroy();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>打印：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">com.wuxiaolong.androidprocesssample:aidlRemote D/wxl: <span class="number">1</span>,WuXiaolong from AIDL Service</div><div class="line">com.wuxiaolong.androidprocesssample:aidlRemote D/wxl: Hello from AIDL Service</div></pre></td></tr></table></figure><h3 id="多个应用，多进程"><a href="#多个应用，多进程" class="headerlink" title="多个应用，多进程"></a>多个应用，多进程</h3><p>和上面基本差不多，把服务端和客户端分别创建的两个项目，可以互相通信，注意点：</p><p>1、服务端创建好的 aidl 文件，带包拷贝到客户端项目中；</p><p>2、客户端启动服务是隐式启动，Android 5.0 中对 service 隐式启动有限制，必须通过设置 action 和 package，代码如下：</p><p>AndroidManifest 注册：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">service</span> <span class="attr">android:name</span>=<span class="string">".AIDLService"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.AIDLService"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div></pre></td></tr></table></figure><p>启动服务：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Intent intent = <span class="keyword">new</span> Intent();</div><div class="line">intent.setAction(<span class="string">"android.intent.action.AIDLService"</span>);</div><div class="line">intent.setPackage(<span class="string">"com.wuxiaolong.aidlservice"</span>);</div><div class="line">bindService(intent, serviceConnection, Context.BIND_AUTO_CREATE);</div></pre></td></tr></table></figure><h2 id="使用-Messenger"><a href="#使用-Messenger" class="headerlink" title="使用 Messenger"></a>使用 Messenger</h2><p>Messenger 可以在不同的进程传递 Message 对象，而我们可以在 Message 对象中放入我们所需要的数据，这样就能实现进程间通信了。Messenger 底层实现是 AIDL，对 AIDL 做了封装， 不需要处理多线程，实现步骤也分为服务端和客户端，代码如下：</p><h3 id="服务端-1"><a href="#服务端-1" class="headerlink" title="服务端"></a>服务端</h3><p>MessengerService：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessengerService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Messenger messenger = <span class="keyword">new</span> Messenger(<span class="keyword">new</span> MessengerHandler());</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MessengerHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">            <span class="keyword">switch</span> (msg.what) &#123;</div><div class="line">                <span class="keyword">case</span> MainActivity.MSG_FROM_CLIENT:</div><div class="line">                    <span class="comment">//2、服务端接送消息</span></div><div class="line">                    Log.d(<span class="string">"wxl"</span>, <span class="string">"msg="</span> + msg.getData().getString(<span class="string">"msg"</span>));</div><div class="line"></div><div class="line">                    <span class="comment">//4、服务端回复消息给客户端</span></div><div class="line">                    Messenger serviceMessenger = msg.replyTo;</div><div class="line">                    Message replyMessage = Message.obtain(<span class="keyword">null</span>, MSG_FROM_SERVICE);</div><div class="line">                    Bundle bundle = <span class="keyword">new</span> Bundle();</div><div class="line">                    bundle.putString(<span class="string">"msg"</span>, <span class="string">"Hello from service."</span>);</div><div class="line">                    replyMessage.setData(bundle);</div><div class="line">                    <span class="keyword">try</span> &#123;</div><div class="line">                        serviceMessenger.send(replyMessage);</div><div class="line">                    &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</div><div class="line">                        e.printStackTrace();</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">super</span>.handleMessage(msg);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Nullable</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> messenger.getBinder();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>AndroidManafest.xml 注册：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">service</span></span></div><div class="line">    <span class="attr">android:name</span>=<span class="string">".MessengerService"</span></div><div class="line">    <span class="attr">android:process</span>=<span class="string">":messengerRemote"</span> /&gt;</div></pre></td></tr></table></figure><h3 id="客户端-1"><a href="#客户端-1" class="headerlink" title="客户端"></a>客户端</h3><p>MainActivity<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MSG_FROM_CLIENT = <span class="number">1000</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MSG_FROM_SERVICE = <span class="number">1001</span>;</div><div class="line">    <span class="keyword">private</span> Messenger clientMessenger;</div><div class="line">    <span class="keyword">private</span> ServiceConnection messengerServiceConnection = <span class="keyword">new</span> ServiceConnection() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceConnected</span><span class="params">(ComponentName name, IBinder service)</span> </span>&#123;</div><div class="line">            <span class="comment">//1、发送消息给服务端</span></div><div class="line">            clientMessenger = <span class="keyword">new</span> Messenger(service);</div><div class="line">            Message message = Message.obtain(<span class="keyword">null</span>, MSG_FROM_CLIENT);</div><div class="line">            Bundle bundle = <span class="keyword">new</span> Bundle();</div><div class="line">            bundle.putString(<span class="string">"msg"</span>, <span class="string">"Hello from client."</span>);</div><div class="line">            message.setData(bundle);</div><div class="line">            <span class="comment">//3、这句是服务端回复客户端使用</span></div><div class="line">            message.replyTo = getReplyMessenger;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                clientMessenger.send(message);</div><div class="line">            &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceDisconnected</span><span class="params">(ComponentName name)</span> </span>&#123;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Messenger getReplyMessenger = <span class="keyword">new</span> Messenger(<span class="keyword">new</span> MessengerHandler());</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MessengerHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">            <span class="keyword">switch</span> (msg.what) &#123;</div><div class="line">                <span class="keyword">case</span> MainActivity.MSG_FROM_SERVICE:</div><div class="line">                    <span class="comment">//5、服务端回复消息给客户端，客户端接送消息</span></div><div class="line">                    Log.d(<span class="string">"wxl"</span>, <span class="string">"msg="</span> + msg.getData().getString(<span class="string">"msg"</span>));</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">super</span>.handleMessage(msg);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"> </div><div class="line">        <span class="comment">// Messenger 进行通信</span></div><div class="line">        Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, MessengerService.class);</div><div class="line">        bindService(intent, messengerServiceConnection, Context.BIND_AUTO_CREATE);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">        unbindService(messengerServiceConnection);</div><div class="line">        <span class="keyword">super</span>.onDestroy();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>打印信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">com.wuxiaolong.androidprocesssample:remote D/wxl: msg=Hello from client.</div><div class="line">com.wuxiaolong.androidprocesssample D/wxl: msg=Hello from service.</div></pre></td></tr></table></figure><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>《Android开发艺术探索》一书关于 Android 进程间通信这块，还有 ContentProvider、Socket 方式，由于篇幅所限，这里不一一介绍了，有兴趣可以自行查看。如果需要这次 Sample 的源码，可在我的公众号「吴小龙同学」回复：「AndroidProcessSample」获取。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>《Android开发艺术探索》<br><a href="http://yifeng.studio/2017/06/16/android-multi-process-things/" target="_blank" rel="noopener">Android 中的多进程，你值得了解的一些知识</a><br><a href="http://blog.csdn.net/ydxlt/article/details/50812559" target="_blank" rel="noopener">Android使用AIDL实现跨进程通讯（IPC）</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;什么鬼！单例居然失效了，一个地方设置值，另个地方居然取不到，这怎么可能？没道理啊！排查半天，发现这两就不在一个进程里，才恍然大悟……&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;什么是进程&quot;&gt;&lt;a href=&quot;#什么是进程&quot; class=&quot;headerlink&quot; title=&quot;什么是进程&quot;&gt;&lt;/a&gt;什么是进程&lt;/h1&gt;&lt;p&gt;按照操作系统中的描述：进程一般指一个执行单元，在 PC 和移动设备上指一个程序或者一个应用。&lt;/p&gt;
&lt;h1 id=&quot;为什么要使用多进程&quot;&gt;&lt;a href=&quot;#为什么要使用多进程&quot; class=&quot;headerlink&quot; title=&quot;为什么要使用多进程&quot;&gt;&lt;/a&gt;为什么要使用多进程&lt;/h1&gt;&lt;p&gt;我们都知道，系统为 APP 每个进程分配的内存是有限的，如果想获取更多内存分配，可以使用多进程，将一些看不见的服务、比较独立而又相当占用内存的功能运行在另外一个进程当中。&lt;br&gt;
    
    </summary>
    
      <category term="IPC" scheme="http://wuxiaolong.me/categories/IPC/"/>
    
    
      <category term="IPC" scheme="http://wuxiaolong.me/tags/IPC/"/>
    
  </entry>
  
  <entry>
    <title>2018关键字</title>
    <link href="http://wuxiaolong.me/2018/01/02/2018key/"/>
    <id>http://wuxiaolong.me/2018/01/02/2018key/</id>
    <published>2018-01-02T09:43:42.000Z</published>
    <updated>2018-01-25T00:54:56.501Z</updated>
    
    <content type="html"><![CDATA[<h1 id="回顾-17-年"><a href="#回顾-17-年" class="headerlink" title="回顾 17 年"></a>回顾 17 年</h1><p>关键字式的年终总结我已经写了《<a href="http://wuxiaolong.me/2015/03/27/2015key/">2015关键字</a>》和 《<a href="http://wuxiaolong.me/2015/12/27/2016key/">2016关键字</a>》两年了，《2017 关键字》没有写，因为现在职业生涯遇到瓶颈，进步缓慢，年前定的指标完成度低，感觉没什么可写的。</p><p>现在回顾 2017 年，确实没什么能拿出手的，知乎上一个问题《作为程序员，2017 年你习得了哪些新技能？》，我回答如下：2017 年我是迷茫的，焦虑的，纠结要不要转型，往前端，还是后端？怎么转？后来自学入门了 Python，当拓展技术栈，了却我一直想写接口的夙愿。本职工作好像没什么实质进步，除了实践 Android 模块组件化、性能优化，参与面试，做面试官，负责 Android 端项目，带新人，还有其他的吗，带娃更加娴熟，算不算？<br><a id="more"></a><br>另外，17 年买了 MacBook Pro，完成了 16 年的指标。</p><h1 id="展望-18-年"><a href="#展望-18-年" class="headerlink" title="展望 18 年"></a>展望 18 年</h1><h2 id="高级程序员"><a href="#高级程序员" class="headerlink" title="高级程序员"></a>高级程序员</h2><p>自己差不多属于高级程序员了，这些年没算白混，但还不够，很多知识点知道，浮在表层，开发中一些不常用很快也就忘记了，新的一年，还得继续查缺补漏，深入。</p><h2 id="身体"><a href="#身体" class="headerlink" title="身体"></a>身体</h2><p>年纪大了，该注意起来了，15 年结完婚就很少运动，现在经常肩疼，周末偶尔去打打篮球，18 年，健身要列入日常。</p><h2 id="学历"><a href="#学历" class="headerlink" title="学历"></a>学历</h2><p>虽然说工作了更多地看重学历，但是一些公司学历是硬性条件，我也因此碰壁，想在学历方面晋升一下，不留遗憾。</p><h2 id="英语"><a href="#英语" class="headerlink" title="英语"></a>英语</h2><p>渣渣，不想多说了，年年目标都有英语这项，现在依旧是渣渣，根本没有行动起来，也没有坚持下来。</p><h2 id="书"><a href="#书" class="headerlink" title="书"></a>书</h2><p>人丑就应该多读点书，我发现我更加喜欢阅读电子版的，不管是什么，现在多看看书，积累点底蕴。</p><h2 id="投资理财"><a href="#投资理财" class="headerlink" title="投资理财"></a>投资理财</h2><p>这方面知识是我比较缺乏的，可以说一窍不通，最主要的原因是穷，还没有闲钱能做理财，18 年，要学学这方面的知识，存点钱，以备不时之需。</p><h2 id="Python、小程序"><a href="#Python、小程序" class="headerlink" title="Python、小程序"></a>Python、小程序</h2><p>持续关注，也许就转行了。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>17 年是迷茫的一年，希望 18 年不再迷茫，做爱做的事！</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;回顾-17-年&quot;&gt;&lt;a href=&quot;#回顾-17-年&quot; class=&quot;headerlink&quot; title=&quot;回顾 17 年&quot;&gt;&lt;/a&gt;回顾 17 年&lt;/h1&gt;&lt;p&gt;关键字式的年终总结我已经写了《&lt;a href=&quot;http://wuxiaolong.me/2015/03/27/2015key/&quot;&gt;2015关键字&lt;/a&gt;》和 《&lt;a href=&quot;http://wuxiaolong.me/2015/12/27/2016key/&quot;&gt;2016关键字&lt;/a&gt;》两年了，《2017 关键字》没有写，因为现在职业生涯遇到瓶颈，进步缓慢，年前定的指标完成度低，感觉没什么可写的。&lt;/p&gt;
&lt;p&gt;现在回顾 2017 年，确实没什么能拿出手的，知乎上一个问题《作为程序员，2017 年你习得了哪些新技能？》，我回答如下：2017 年我是迷茫的，焦虑的，纠结要不要转型，往前端，还是后端？怎么转？后来自学入门了 Python，当拓展技术栈，了却我一直想写接口的夙愿。本职工作好像没什么实质进步，除了实践 Android 模块组件化、性能优化，参与面试，做面试官，负责 Android 端项目，带新人，还有其他的吗，带娃更加娴熟，算不算？&lt;br&gt;
    
    </summary>
    
      <category term="Life" scheme="http://wuxiaolong.me/categories/Life/"/>
    
    
      <category term="key word" scheme="http://wuxiaolong.me/tags/key-word/"/>
    
  </entry>
  
  <entry>
    <title>Android NDK 入门与实践</title>
    <link href="http://wuxiaolong.me/2017/12/27/AndroidNDK/"/>
    <id>http://wuxiaolong.me/2017/12/27/AndroidNDK/</id>
    <published>2017-12-27T09:30:26.000Z</published>
    <updated>2018-10-14T03:22:03.041Z</updated>
    
    <content type="html"><![CDATA[<h1 id="NDK-是什么"><a href="#NDK-是什么" class="headerlink" title="NDK 是什么"></a>NDK 是什么</h1><p>NDK 全称 Native Development Kit，可以让您在 Android 应用中调用 C 或 C++ 代码的工具。</p><h1 id="NDK-好处"><a href="#NDK-好处" class="headerlink" title="NDK 好处"></a>NDK 好处</h1><p>1、NDK 可以生成 .so 文件, 方便代码共享；</p><p>2、增加反编译的难度；</p><p>3、提高性能。<br><a id="more"></a></p><h1 id="NDK-构建"><a href="#NDK-构建" class="headerlink" title="NDK 构建"></a>NDK 构建</h1><h2 id="版本说明"><a href="#版本说明" class="headerlink" title="版本说明"></a>版本说明</h2><ul><li><p>Android Studio：3.0.1</p></li><li><p>Android Plugin for Gradle： com.android.tools.build:gradle:3.0.1</p></li><li><p>Gradle：4.1</p></li></ul><h2 id="效果预览"><a href="#效果预览" class="headerlink" title="效果预览"></a>效果预览</h2><p><img src="http://wuxiaolong.github.io/images/AndroidNDK3.png" alt="图 1"></p><p>如图是使用命令 ndk-build，生成对应的 so 文件。</p><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>一开始我们需要在 jni 目录下新建 Android.mk、Application.mk、HelloCPP.cpp 文件。</p><h2 id="Android-mk"><a href="#Android-mk" class="headerlink" title="Android.mk"></a>Android.mk</h2><p>必须在 jni 文件夹内创建 Android.mk 配置文件， ndk-build 脚本将查看此文件，其中定义了模块及其名称、要编译的源文件、版本标志以及要链接的库。<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"># 构建系统提供的宏函数 my-dir 将返回当前目录（包含 Android.mk 文件本身的目录）的路径，基本上是固定的，不需要去动</div><div class="line">LOCAL_PATH := $(call my-dir)</div><div class="line"></div><div class="line"># 会清除很多 LOCAL_XXX 变量，不会清除 LOCAL_PATH，基本上是固定的，不需要去动</div><div class="line">include $(CLEAR_VARS)</div><div class="line"></div><div class="line"># 需要构建模块的名称，会自动生成相应的 libNDKSample.so 文件，每个模块名称必须唯一，且不含任何空格</div><div class="line">LOCAL_MODULE := NDKSample</div><div class="line"></div><div class="line"># 包含要构建到模块中的 C 或 C++ 源文件列表</div><div class="line">LOCAL_SRC_FILES := HelloCPP.cpp</div><div class="line"></div><div class="line"># 指定这个模块里会用到哪些原生 API，详见：https://developer.android.google.cn/ndk/guides/stable_apis.html</div><div class="line">LOCAL_LDLIBS := -llog</div><div class="line"></div><div class="line"># 帮助系统将所有内容连接到一起，固定的，不需要去动</div><div class="line">include $(BUILD_SHARED_LIBRARY)</div></pre></td></tr></table></figure></p><h2 id="Application-mk"><a href="#Application-mk" class="headerlink" title="Application.mk"></a>Application.mk</h2><p>用于描述应用需要的原生模块，模块可以是静态库、共享库或可执行文件。Application.mk 通常也位于 jni 目录下。<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># 选择不同的 ABI，多个使用空格作为分隔符，全部是all</div><div class="line">APP_ABI := all</div><div class="line"></div><div class="line"># 指定要使用的运行时</div><div class="line">APP_STL := gnustl_static</div></pre></td></tr></table></figure></p><h1 id="调用-C-或-C"><a href="#调用-C-或-C" class="headerlink" title="调用 C 或 C++"></a>调用 C 或 C++</h1><p>配置好 Android.mk 和 Application.mk，有两种方法可以调用 C 或 C++ 代码。现在我们写个方法，然后演示下 Android 这边的调用。</p><h2 id="HelloCPP-cpp"><a href="#HelloCPP-cpp" class="headerlink" title="HelloCPP.cpp"></a>HelloCPP.cpp</h2><p>简单返回一个字符串，C 或 C++ 这块我也不是很懂，能看懂大概意思，会调用就好了。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;jni.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">extern</span> <span class="string">"C"</span></div><div class="line"><span class="function">JNIEXPORT jstring JNICALL <span class="title">Java_com_wuxiaolong_ndksample_HelloLibrary_sayHello</span><span class="params">(JNIEnv *env, jobject instance)</span> </span>&#123;</div><div class="line">    <span class="comment">//从 C++ 传字符串到 Java</span></div><div class="line">    <span class="keyword">return</span> env-&gt;NewStringUTF(<span class="string">"Hello from C++"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>说明：</p><p>1、extern “C”：实现 C 和 C++ 的混合编程，用于 C++ 代码调用 C 的函数；</p><p>2、JNIEXPORT 和 JNICALL，用于标识函数用途的两个宏；</p><p>3、jstring，JNI 中的数据类型，对应 Java 中 String 类型，还有 8 种基本数据类型 jbyte、jchar、jshort、jint、jlong、jfloat、jdouble、jboolean，引用数据类型 jintArray、jshortArray、jlongArray 等。</p><p>4、函数命名规则：Java<em>类全路径</em>方法名，这里的类是那个调用 C 或 C++ 的类，像这里的 Java_com_wuxiaolong_ndksample_HelloLibrary_sayHello ；</p><p>5、函数至少有两个参数，第一个参数 ：JNIEnv* 是定义任意 native 函数的第一个参数（包括调用 JNI 的 RegisterNatives 函数注册的函数），指向 JVM 函数表的指针，函数表中的每一个入口指向一个 JNI 函数，每个函数用于访问 JVM 中特定的数据结构；第二个参数：调用 Java 中 native 方法的实例或 Class 对象，如果这个 native 方法是实例方法，则该参数是 jobject，如果是静态方法，则是 jclass。</p><h2 id="自动编译"><a href="#自动编译" class="headerlink" title="自动编译"></a>自动编译</h2><p>直接调用 C 或 C++ 代码，也可用于调试。</p><h3 id="build-gradle"><a href="#build-gradle" class="headerlink" title="build.gradle"></a>build.gradle</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">android &#123;</div><div class="line">    compileSdkVersion <span class="number">27</span></div><div class="line">    defaultConfig &#123;</div><div class="line">        <span class="comment">//……</span></div><div class="line">        externalNativeBuild &#123;</div><div class="line">            ndkBuild &#123;</div><div class="line">                <span class="comment">//指定 Application.mk 的路径</span></div><div class="line">                arguments <span class="string">"NDK_APPLICATION_MK:=src/main/jni/Application.mk"</span></div><div class="line">                <span class="comment">//指定生成哪些平台的 so 文件</span></div><div class="line">                <span class="comment">//abiFilters "armeabi-v7a", "armeabi"</span></div><div class="line">                <span class="comment">//cFlags 和 cppFlags 是用来设置环境变量的, 一般不需要动</span></div><div class="line">                cFlags <span class="string">"-DTEST_C_FLAG1"</span>, <span class="string">"-DTEST_C_FLAG2"</span></div><div class="line">                cppFlags <span class="string">"-DTEST_CPP_FLAG2"</span>, <span class="string">"-DTEST_CPP_FLAG2"</span></div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    externalNativeBuild &#123;</div><div class="line">        ndkBuild &#123;</div><div class="line">            <span class="comment">//指定 Android.mk 的路径</span></div><div class="line">            path <span class="string">"src/main/jni/Android.mk"</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>Sync Now，会看见项目多了 .externalNativeBuild 文件夹：<br><img src="http://wuxiaolong.github.io/images/AndroidNDK4.png" alt=""></p><h3 id="so-文件输出目录"><a href="#so-文件输出目录" class="headerlink" title="so 文件输出目录"></a>so 文件输出目录</h3><p>app/build/intermediates/ndkBuild/debug/obj/local/arm64-v8a/libNDKSample.so</p><h2 id="手动编译"><a href="#手动编译" class="headerlink" title="手动编译"></a>手动编译</h2><p>使用命令 ndk-build，也可以生成对应的 so 文件，然后项目中调用。弊端 C 或 C++ 代码改动了，需要再次编译。</p><h3 id="下载-NDK"><a href="#下载-NDK" class="headerlink" title="下载 NDK"></a>下载 NDK</h3><p><img src="http://wuxiaolong.github.io/images/AndroidNDK1.png" alt=""></p><h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><p>下载后 NDK 地址：/Users/wuxiaolong/Library/Android/sdk/ndk-bundle，进行 NDK 环境变量配置。</p><h3 id="NDK-编译"><a href="#NDK-编译" class="headerlink" title="NDK 编译"></a>NDK 编译</h3><p>进入 jni 目录，运行命令 ndk-build，如下：<br><img src="http://wuxiaolong.github.io/images/AndroidNDK2.png" alt=""></p><h3 id="so-文件输出目录-1"><a href="#so-文件输出目录-1" class="headerlink" title="so 文件输出目录"></a>so 文件输出目录</h3><p>会在 jni 同一目录生成 libs，里面有对应的 abi。</p><h3 id="build-gradle-1"><a href="#build-gradle-1" class="headerlink" title="build.gradle"></a>build.gradle</h3><p>需要 app/build.gradle 指定 so 文件路径方可调用。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">android &#123;</div><div class="line">    <span class="comment">//……</span></div><div class="line">    sourceSets.main &#123;</div><div class="line">        jni.srcDirs = []</div><div class="line">        jniLibs.srcDir <span class="string">'src/main/libs'</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="CMake"><a href="#CMake" class="headerlink" title="CMake"></a>CMake</h2><p>Android Studio 用于构建原生库的默认工具是 CMake，由于很多现有项目都使用构建工具包编译其原生代码，Android Studio 还支持 ndk-build，如果您在创建新的原生库，则应使用 CMake。</p><p>如果您的原生源文件还没有 CMake 构建脚本，则您需要自行创建一个并包含适当的 CMake 命令。CMake 构建脚本是一个纯文本文件，您必须将其命名为 CMakeLists.txt。本部分介绍了您应包含到构建脚本中的一些基本命令，用于在创建原生库时指示 CMake 应使用哪些源文件。</p><p>注：如果您的项目使用 ndk-build，则不需要创建 CMake 构建脚本。提供一个指向您的 Android.mk 文件的路径，将 Gradle 关联到您的原生库。</p><p>要创建一个可以用作 CMake 构建脚本的纯文本文件，请按以下步骤操作：</p><h3 id="安装-CMake；"><a href="#安装-CMake；" class="headerlink" title="安装 CMake；"></a>安装 CMake；</h3><p>Tools &gt; Android &gt; SDK Manager，点击 SDK Tools 标签，选中 CMake，点击 Apply 安装；</p><h3 id="新建-CMakeLists-txt"><a href="#新建-CMakeLists-txt" class="headerlink" title="新建 CMakeLists.txt"></a>新建 CMakeLists.txt</h3><p>CMakeLists.txt 主要用于声明CMake使用版本、so库名称、C/CPP文件路径等信息。</p><p>1、从 IDE 的左侧打开 Project 窗格并从下拉菜单中选择 Project 视图；</p><p>2、右键点击 您的模块 的根目录并选择 New &gt; File；</p><p>3、输入“CMakeLists.txt”作为文件名并点击 OK；</p><p>CMakeLists.txt 示例：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"># 设置构建本地库所需的最小版本</div><div class="line">cmake_minimum_required(VERSION 3.4.1)</div><div class="line"></div><div class="line"># 编译出一个动态库 HelloCPP，源文件只有 src/main/cpp/HelloCPP.cpp</div><div class="line">add_library( # 设置库的名称，即 SO 文件的名称</div><div class="line">             NDKSample</div><div class="line"></div><div class="line">             # STATIC：静态库，是目标文件的归档文件，在链接其它目标的时候使用。</div><div class="line">             # SHARED：动态库，会被动态链接，在运行时被加载。</div><div class="line">             # MODULE：模块库，是不会被链接到其它目标中的插件，但是可能会在运行时使用dlopen-系列的函数动态链接。</div><div class="line">             SHARED</div><div class="line"></div><div class="line">             # 要编译的源代码文件</div><div class="line">             src/main/cpp/HelloCPP.cpp )</div><div class="line"></div><div class="line"></div><div class="line"># 指定的是头文件的目录</div><div class="line"># include_directories(src/main/cpp/include/)</div><div class="line"></div><div class="line"></div><div class="line"># 添加 NDK API，Android NDK 提供了一套实用的原生 API 和库，通过将 NDK 库包含到项目的 CMakeLists.txt 脚本文件中。</div><div class="line">find_library( # 定位 Android 特定的日志支持库并将其路径存储在 log-lib 中</div><div class="line">              log-lib</div><div class="line"></div><div class="line">              # Specifies the name of the NDK library that</div><div class="line">              # CMake needs to locate.</div><div class="line">              log )</div><div class="line"></div><div class="line"># 为了确保您的原生库可以在 log 库中调用函数，您需要使用 CMake 构建脚本中的 target_link_libraries() 命令关联库。</div><div class="line">target_link_libraries( # Specifies the target library.</div><div class="line">                       NDKSample</div><div class="line"></div><div class="line">                       # Links the log library to the target library.</div><div class="line">                       $&#123;log-lib&#125; )</div></pre></td></tr></table></figure></p><h3 id="C-或-C-代码"><a href="#C-或-C-代码" class="headerlink" title="C 或 C++  代码"></a>C 或 C++  代码</h3><p>main 下面增加了 cpp 目录，即放置 C 或 C++ 代码的地方；</p><p>HelloCPP.cpp<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">#include &lt;jni.h&gt;</div><div class="line">#include &lt;string&gt;</div><div class="line"></div><div class="line">extern &quot;C&quot;</div><div class="line"></div><div class="line">JNIEXPORT jstring JNICALL</div><div class="line">Java_com_wuxiaolong_cmake_HelloLibrary_sayHello(JNIEnv *env, jobject) &#123;</div><div class="line">    //从 C++ 传字符串到 Java</div><div class="line">    std::string hello = &quot;Hello from C++ by cmake&quot;;</div><div class="line">    return env-&gt;NewStringUTF(hello.c_str());</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="app-build-gradle"><a href="#app-build-gradle" class="headerlink" title="app/build.gradle"></a>app/build.gradle</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">android &#123;</div><div class="line"></div><div class="line">    defaultConfig &#123;</div><div class="line">        <span class="comment">//……</span></div><div class="line">        externalNativeBuild &#123;</div><div class="line">            cmake &#123;</div><div class="line">                <span class="comment">//设置 C++ flag，可选配置，-frtti 表示项目支持RTTI；-fexceptions 表示当前项目支持C++异常处理</span></div><div class="line">                cppFlags <span class="string">"-frtti -fexceptions"</span></div><div class="line">                <span class="comment">//arguments 语法：-D + 变量，更多变量：https://developer.android.com/ndk/guides/cmake.html</span></div><div class="line">                arguments <span class="string">"-DANDROID_ARM_NEON=TRUE"</span></div><div class="line"></div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 指定 ABI</span></div><div class="line">        ndk &#123;</div><div class="line">            <span class="comment">// Specifies the ABI configurations of your native</span></div><div class="line">            <span class="comment">// libraries Gradle should build and package with your APK.</span></div><div class="line">            abiFilters <span class="string">'armeabi'</span>, <span class="string">'armeabi-v7a'</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line"></div><div class="line">    &#125;</div><div class="line">    externalNativeBuild &#123;</div><div class="line">        cmake &#123;</div><div class="line">            <span class="comment">//指明 CMakeList.txt 路径</span></div><div class="line">            path <span class="string">"CMakeLists.txt"</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="so-文件输出目录-2"><a href="#so-文件输出目录-2" class="headerlink" title="so 文件输出目录"></a>so 文件输出目录</h3><p>app/build/intermediates/cmake/</p><p>如果在 New Project 时，勾选 Include C++ support，会自动生成上面这些，有个示例。CMake 没有 Android.mk、Application.mk 文件了。</p><h2 id="HelloLibrary"><a href="#HelloLibrary" class="headerlink" title="HelloLibrary"></a>HelloLibrary</h2><p>创建 HelloLibrary 用于调用 C 或 C++ 代码。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloLibrary</span> </span>&#123;</div><div class="line">    <span class="keyword">static</span> &#123;</div><div class="line">        <span class="comment">//ndk-build，这里对应 Android.mk 里的 LOCAL_MODULE := NDKSample</span></div><div class="line">        <span class="comment">//CMake，这里对应 CMakeLists.txt 里的 add_library NDKSample</span></div><div class="line">        System.loadLibrary(<span class="string">"NDKSample"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//使用 native 关键字指示以原生代码形式实现的方法</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> String <span class="title">sayHello</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="调用-HelloLibrary"><a href="#调用-HelloLibrary" class="headerlink" title="调用 HelloLibrary"></a>调用 HelloLibrary</h2><p>可以在自己的 Activity 调用。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">TextView text = findViewById(R.id.text);</div><div class="line">text.setText(<span class="keyword">new</span> HelloLibrary().sayHello());</div></pre></td></tr></table></figure></p><h1 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h1><p>如果 C 或 C++ 那边代码出问题了，调试起来要命的，之前只能 log，现在 Android Studio 提供了打断点来 debug C 或 C++ 代码，需要使用 LLDB 来检测到 C 或 C++ 代码中的断点，这里要使用 externalNativeBuild 方式自动编译 C/C++ 代码，才能进入断点进行调试。</p><p><img src="http://wuxiaolong.github.io/images/AndroidNDK6.png" alt=""></p><h2 id="Native-模式"><a href="#Native-模式" class="headerlink" title="Native 模式"></a>Native 模式</h2><p><img src="http://wuxiaolong.github.io/images/AndroidNDK5.png" alt=""></p><p>选择 run 下拉 item，选 Edit Configurations，弹出配置窗体，1、添加；2、命令app-native，专门调试 C/C++；3、Module 还是选择 app；4、Debugger 选择 Native，只想使用 LLDB 来调试代码，忽略 Java 代码中的断点。</p><h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><p>如果需要这次 Sample 的源码，可在我的公众号「吴小龙同学」回复 NDKSample 获取。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://developer.android.google.cn/ndk/guides/index.html" target="_blank" rel="noopener">NDK 入门指南</a></p><p><a href="https://developer.android.google.cn/ndk/guides/android_mk.html" target="_blank" rel="noopener">Android.mk</a></p><p><a href="https://developer.android.google.cn/ndk/guides/application_mk.html" target="_blank" rel="noopener">Application.mk</a></p><p><a href="https://developer.android.google.cn/ndk/guides/abis.html" target="_blank" rel="noopener">ABI 管理</a></p><p><a href="http://jk2k.com/2016/09/how-to-use-ndk-and-generate-so-file-in-android-studio/" target="_blank" rel="noopener">Android NDK 介绍与使用示例</a></p><p><a href="https://xuhaoblog.com/2016/10/06/ndk/jni-2/" target="_blank" rel="noopener">NDK开发（二）JNI传递参数和返回值</a></p><p><a href="http://www.cnblogs.com/xiaoxiaoqingyi/p/7143536.html" target="_blank" rel="noopener">NDK开发，如何配置 debug环境</a></p><p><a href="https://developer.android.google.cn/studio/projects/add-native-code.html" target="_blank" rel="noopener">向您的项目添加 C 和 C++ 代码</a></p><p><a href="https://developer.android.google.cn/ndk/guides/cmake.html" target="_blank" rel="noopener">CMake</a></p><p><a href="https://www.zybuluo.com/khan-lau/note/254724" target="_blank" rel="noopener">CMAKE手册</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;NDK-是什么&quot;&gt;&lt;a href=&quot;#NDK-是什么&quot; class=&quot;headerlink&quot; title=&quot;NDK 是什么&quot;&gt;&lt;/a&gt;NDK 是什么&lt;/h1&gt;&lt;p&gt;NDK 全称 Native Development Kit，可以让您在 Android 应用中调用 C 或 C++ 代码的工具。&lt;/p&gt;
&lt;h1 id=&quot;NDK-好处&quot;&gt;&lt;a href=&quot;#NDK-好处&quot; class=&quot;headerlink&quot; title=&quot;NDK 好处&quot;&gt;&lt;/a&gt;NDK 好处&lt;/h1&gt;&lt;p&gt;1、NDK 可以生成 .so 文件, 方便代码共享；&lt;/p&gt;
&lt;p&gt;2、增加反编译的难度；&lt;/p&gt;
&lt;p&gt;3、提高性能。&lt;br&gt;
    
    </summary>
    
      <category term="NDK" scheme="http://wuxiaolong.me/categories/NDK/"/>
    
    
      <category term="NDK" scheme="http://wuxiaolong.me/tags/NDK/"/>
    
  </entry>
  
  <entry>
    <title>Python 爬虫实战（一）：使用 requests 和 BeautifulSoup</title>
    <link href="http://wuxiaolong.me/2017/12/10/PythonCrawler1/"/>
    <id>http://wuxiaolong.me/2017/12/10/PythonCrawler1/</id>
    <published>2017-12-10T05:33:59.000Z</published>
    <updated>2017-12-10T06:21:33.714Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python-基础"><a href="#Python-基础" class="headerlink" title="Python 基础"></a>Python 基础</h1><p>我之前写的《<a href="https://mp.weixin.qq.com/s/ZkOXwR3sjuUWiXTCYkbasA" target="_blank" rel="noopener">Python 3 极简教程.pdf</a>》，适合有点编程基础的快速入门，通过该系列文章学习，能够独立完成接口的编写，写写小东西没问题。</p><h1 id="requests"><a href="#requests" class="headerlink" title="requests"></a>requests</h1><p>requests，Python HTTP 请求库，相当于 Android 的 Retrofit，它的功能包括 Keep-Alive 和连接池、Cookie 持久化、内容自动解压、HTTP 代理、SSL 认证、连接超时、Session 等很多特性，同时兼容 Python2 和 Python3，GitHub：<a href="https://github.com/requests/requests" target="_blank" rel="noopener">https://github.com/requests/requests</a> 。<br><a id="more"></a></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>Mac：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip3 install requests</div></pre></td></tr></table></figure></p><p>Windows：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install requests</div></pre></td></tr></table></figure></p><h2 id="发送请求"><a href="#发送请求" class="headerlink" title="发送请求"></a>发送请求</h2><p>HTTP 请求方法有 get、post、put、delete。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> requests</div><div class="line"></div><div class="line"><span class="comment"># get 请求</span></div><div class="line">response = requests.get(<span class="string">'http://127.0.0.1:1024/developer/api/v1.0/all'</span>)</div><div class="line"></div><div class="line"><span class="comment"># post 请求</span></div><div class="line">response = requests.post(<span class="string">'http://127.0.0.1:1024/developer/api/v1.0/insert'</span>)</div><div class="line"></div><div class="line"><span class="comment"># put 请求</span></div><div class="line">response = requests.put(<span class="string">'http://127.0.0.1:1024/developer/api/v1.0/update'</span>)</div><div class="line"></div><div class="line"><span class="comment"># delete 请求</span></div><div class="line">response = requests.delete(<span class="string">'http://127.0.0.1:1024/developer/api/v1.0/delete'</span>)</div></pre></td></tr></table></figure></p><p>请求返回 Response 对象，Response 对象是对 HTTP 协议中服务端返回给浏览器的响应数据的封装，响应的中的主要元素包括：状态码、原因短语、响应首部、响应 URL、响应 encoding、响应体等等。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 状态码</span></div><div class="line">print(response.status_code)</div><div class="line"></div><div class="line"><span class="comment"># 响应 URL</span></div><div class="line">print(response.url)</div><div class="line"></div><div class="line"><span class="comment"># 响应短语</span></div><div class="line">print(response.reason)</div><div class="line"></div><div class="line"><span class="comment"># 响应内容</span></div><div class="line">print(response.json())</div></pre></td></tr></table></figure></p><h2 id="定制请求头"><a href="#定制请求头" class="headerlink" title="定制请求头"></a>定制请求头</h2><p>请求添加 HTTP 头部 Headers，只要传递一个 dict 给 headers 关键字参数就可以了。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">header = &#123;<span class="string">'Application-Id'</span>: <span class="string">'19869a66c6'</span>,</div><div class="line">          <span class="string">'Content-Type'</span>: <span class="string">'application/json'</span></div><div class="line">          &#125;</div><div class="line">response = requests.get(<span class="string">'http://127.0.0.1:1024/developer/api/v1.0/all/'</span>, headers=header)</div></pre></td></tr></table></figure></p><h2 id="构建查询参数"><a href="#构建查询参数" class="headerlink" title="构建查询参数"></a>构建查询参数</h2><p>想为 URL 的查询字符串(query string)传递某种数据，比如：<a href="http://127.0.0.1:1024/developer/api/v1.0/all?key1=value1&amp;key2=value2" target="_blank" rel="noopener">http://127.0.0.1:1024/developer/api/v1.0/all?key1=value1&amp;key2=value2</a> ，Requests 允许你使用 params 关键字参数，以一个字符串字典来提供这些参数。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">payload = &#123;<span class="string">'key1'</span>: <span class="string">'value1'</span>, <span class="string">'key2'</span>: <span class="string">'value2'</span>&#125;</div><div class="line">response = requests.get(<span class="string">"http://127.0.0.1:1024/developer/api/v1.0/all"</span>, params=payload)</div></pre></td></tr></table></figure></p><p>还可以将 list 作为值传入：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">payload = &#123;<span class="string">'key1'</span>: <span class="string">'value1'</span>, <span class="string">'key2'</span>: [<span class="string">'value2'</span>, <span class="string">'value3'</span>]&#125;</div><div class="line">response = requests.get(<span class="string">"http://127.0.0.1:1024/developer/api/v1.0/all"</span>, params=payload)</div><div class="line"></div><div class="line"><span class="comment"># 响应 URL</span></div><div class="line">print(response.url)<span class="comment"># 打印：http://127.0.0.1:1024/developer/api/v1.0/all?key1=value1&amp;key2=value2&amp;key2=value3</span></div></pre></td></tr></table></figure></p><h2 id="post-请求数据"><a href="#post-请求数据" class="headerlink" title="post 请求数据"></a>post 请求数据</h2><p>如果服务器要求发送的数据是表单数据，则可以指定关键字参数 data。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">payload = &#123;<span class="string">'key1'</span>: <span class="string">'value1'</span>, <span class="string">'key2'</span>: <span class="string">'value2'</span>&#125;</div><div class="line">response = requests.post(<span class="string">"http://127.0.0.1:1024/developer/api/v1.0/insert"</span>, data=payload)</div></pre></td></tr></table></figure></p><p>如果要求传递 json 格式字符串参数，则可以使用 json 关键字参数，参数的值都可以字典的形式传过去。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">obj = &#123;</div><div class="line">    <span class="string">"article_title"</span>: <span class="string">"小公务员之死2"</span></div><div class="line">&#125;</div><div class="line"><span class="comment"># response = requests.post('http://127.0.0.1:1024/developer/api/v1.0/insert', json=obj)</span></div></pre></td></tr></table></figure></p><h2 id="响应内容"><a href="#响应内容" class="headerlink" title="响应内容"></a>响应内容</h2><p>Requests 会自动解码来自服务器的内容。大多数 unicode 字符集都能被无缝地解码。请求发出后，Requests 会基于 HTTP 头部对响应的编码作出有根据的推测。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 响应内容</span></div><div class="line"><span class="comment"># 返回是 是 str 类型内容</span></div><div class="line"><span class="comment"># print(response.text())</span></div><div class="line"><span class="comment"># 返回是 JSON 响应内容</span></div><div class="line">print(response.json())</div><div class="line"><span class="comment"># 返回是二进制响应内容</span></div><div class="line"><span class="comment"># print(response.content())</span></div><div class="line"><span class="comment"># 原始响应内容，初始请求中设置了 stream=True</span></div><div class="line"><span class="comment"># response = requests.get('http://127.0.0.1:1024/developer/api/v1.0/all', stream=True)</span></div><div class="line"><span class="comment"># print(response.raw())</span></div></pre></td></tr></table></figure></p><h2 id="超时"><a href="#超时" class="headerlink" title="超时"></a>超时</h2><p>如果没有显式指定了 timeout 值，requests 是不会自动进行超时处理的。如果遇到服务器没有响应的情况时，整个应用程序一直处于阻塞状态而没法处理其他请求。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">response = requests.get(<span class="string">'http://127.0.0.1:1024/developer/api/v1.0/all'</span>, timeout=<span class="number">5</span>)  <span class="comment"># 单位秒数</span></div></pre></td></tr></table></figure></p><h2 id="代理设置"><a href="#代理设置" class="headerlink" title="代理设置"></a>代理设置</h2><p>如果频繁访问一个网站，很容易被服务器屏蔽掉，requests 完美支持代理。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 代理</span></div><div class="line">proxies = &#123;</div><div class="line">    <span class="string">'http'</span>: <span class="string">'http://127.0.0.1:1024'</span>,</div><div class="line">    <span class="string">'https'</span>: <span class="string">'http://127.0.0.1:4000'</span>,</div><div class="line">&#125;</div><div class="line">response = requests.get(<span class="string">'http://127.0.0.1:1024/developer/api/v1.0/all'</span>, proxies=proxies)</div></pre></td></tr></table></figure></p><h1 id="BeautifulSoup"><a href="#BeautifulSoup" class="headerlink" title="BeautifulSoup"></a>BeautifulSoup</h1><p>BeautifulSoup，Python Html 解析库，相当于 Java 的 jsoup。</p><h2 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h2><p>BeautifulSoup 3 目前已经停止开发，直接使用BeautifulSoup 4。</p><p>Mac：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip3 install beautifulsoup4</div></pre></td></tr></table></figure></p><p>Windows：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install beautifulsoup4</div></pre></td></tr></table></figure></p><h2 id="安装解析器"><a href="#安装解析器" class="headerlink" title="安装解析器"></a>安装解析器</h2><p>我用的是 html5lib，纯 Python 实现的。</p><p>Mac：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip3 install html5lib</div></pre></td></tr></table></figure></p><p>Windows：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install html5lib</div></pre></td></tr></table></figure></p><h2 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h2><p>BeautifulSoup 将复杂 HTML 文档转换成一个复杂的树形结构，每个节点都是 Python 对象。</p><h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_html_data</span><span class="params">()</span>:</span></div><div class="line">    html_doc = <span class="string">"""</span></div><div class="line">    &lt;html&gt;</div><div class="line">    &lt;head&gt;</div><div class="line">    &lt;title&gt;WuXiaolong&lt;/title&gt;</div><div class="line">    &lt;/head&gt;</div><div class="line">    &lt;body&gt;</div><div class="line">    &lt;p&gt;分享 Android 技术，也关注 Python 等热门技术。&lt;/p&gt;</div><div class="line">    &lt;p&gt;写博客的初衷：总结经验，记录自己的成长。&lt;/p&gt;</div><div class="line">    &lt;p&gt;你必须足够的努力，才能看起来毫不费力！专注！精致！</div><div class="line">    &lt;/p&gt;</div><div class="line">    &lt;p class="Blog"&gt;&lt;a href="http://wuxiaolong.me/"&gt;WuXiaolong's blog&lt;/a&gt;&lt;/p&gt;</div><div class="line">    &lt;p class="WeChat"&gt;&lt;a href="https://open.weixin.qq.com/qr/code?username=MrWuXiaolong"&gt;公众号：吴小龙同学&lt;/a&gt; &lt;/p&gt;</div><div class="line">    &lt;p class="GitHub"&gt;&lt;a href="http://example.com/tillie" class="sister" id="link3"&gt;GitHub&lt;/a&gt;&lt;/p&gt;</div><div class="line">    &lt;/body&gt;</div><div class="line">    &lt;/html&gt;   </div><div class="line">    """</div><div class="line">    soup = BeautifulSoup(html_doc, <span class="string">"html5lib"</span>)</div></pre></td></tr></table></figure><h3 id="tag"><a href="#tag" class="headerlink" title="tag"></a>tag</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">tag = soup.head</div><div class="line">print(tag)  <span class="comment"># &lt;head&gt;&lt;title&gt;WuXiaolong&lt;/title&gt;&lt;/head&gt;</span></div><div class="line">print(tag.name)  <span class="comment"># head</span></div><div class="line">print(tag.title)  <span class="comment"># &lt;title&gt;WuXiaolong&lt;/title&gt;</span></div><div class="line">print(soup.p)  <span class="comment"># &lt;p&gt;分享 Android 技术，也关注 Python 等热门技术。&lt;/p&gt;</span></div><div class="line">print(soup.a[<span class="string">'href'</span>])  <span class="comment"># 输出 a 标签的 href 属性：http://wuxiaolong.me/</span></div></pre></td></tr></table></figure><p>注意：tag 如果多个匹配，返回第一个，比如这里的 p 标签。</p><h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">print(soup.find(<span class="string">'p'</span>))  <span class="comment"># &lt;p&gt;分享 Android 技术，也关注 Python 等热门技术。&lt;/p&gt;</span></div></pre></td></tr></table></figure><p>find 默认也是返回第一个匹配的标签，没找到匹配的节点则返回 None。如果我想指定查找，比如这里的公众号，可以指定标签的如 class 属性值：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 因为 class 是 Python 关键字，所以这里指定为 class_。</span></div><div class="line">print(soup.find(<span class="string">'p'</span>, class_=<span class="string">"WeChat"</span>))</div><div class="line"><span class="comment"># &lt;p class="WeChat"&gt;&lt;a href="https://open.weixin.qq.com/qr/code?username=MrWuXiaolong"&gt;公众号&lt;/a&gt; &lt;/p&gt;</span></div></pre></td></tr></table></figure></p><p>查找所有的 P 标签：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> p <span class="keyword">in</span> soup.find_all(<span class="string">'p'</span>):</div><div class="line">    print(p.string)</div></pre></td></tr></table></figure></p><h1 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h1><p>前段时间，有用户反馈，我的个人 APP 挂了，虽然这个 APP 我已经不再维护，但是我也得起码保证它能正常运行。大部分人都知道这个 APP 数据是爬来的（详见：《<a href="http://mp.weixin.qq.com/s/tvYx2NbnFIM7aQ7QiBx_jQ" target="_blank" rel="noopener">手把手教你做个人app</a>》），数据爬来的好处之一就是不用自己管数据，弊端是别人网站挂了或网站的 HTML 节点变了，我这边就解析不到，就没数据。这次用户反馈，我在想要不要把他们网站数据直接爬虫了，正好自学 Python，练练手，嗯说干就干，本来是想着先用 Python 爬虫，MySQL 插入本地数据库，然后 Flask 自己写接口，用 Android 的 Retrofit 调，再用 bmob sdk 插入 bmob……哎，费劲，感觉行不通，后来我得知 bmob 提供了 RESTful，解决大问题，我可以直接 Python 爬虫插入就好了，这里我演示的是插入本地数据库，如果用 bmob，是调 bmob 提供的 RESTful 插数据。</p><h2 id="网站选定"><a href="#网站选定" class="headerlink" title="网站选定"></a>网站选定</h2><p>我选的演示网站：<a href="https://meiriyiwen.com/random" target="_blank" rel="noopener">https://meiriyiwen.com/random</a> ，大家可以发现，每次请求的文章都不一样，正好利用这点，我只要定时去请求，解析自己需要的数据，插入数据库就 OK 了。</p><h2 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h2><p>我直接用 NaviCat Premium 创建的，当然也可以用命令行。<br><img src="http://7q5c2h.com1.z0.glb.clouddn.com/Python3Learn8.png?imageView2/0/format/png/q/75|watermark/2/text/5ZC05bCP6b6Z5ZCM5a24/font/5a6L5L2T/fontsize/1200/fill/IzIxOTZGMw==/dissolve/100/gravity/SouthEast/dx/10/dy/10|imageslim" alt=""></p><h2 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h2><p>创建表 article，用的 pymysql，表需要 id，article_title，article_author，article_content 字段，代码如下，只需要调一次就好了。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> pymysql</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_table</span><span class="params">()</span>:</span></div><div class="line">    <span class="comment"># 建立连接</span></div><div class="line">    db = pymysql.connect(host=<span class="string">'localhost'</span>,</div><div class="line">                         user=<span class="string">'root'</span>,</div><div class="line">                         password=<span class="string">'root'</span>,</div><div class="line">                         db=<span class="string">'python3learn'</span>)</div><div class="line">    <span class="comment"># 创建名为 article 数据库语句</span></div><div class="line">    sql = <span class="string">'''create table if not exists article (</span></div><div class="line">    id int NOT NULL AUTO_INCREMENT, </div><div class="line">    article_title text,</div><div class="line">    article_author text,</div><div class="line">    article_content text,</div><div class="line">    PRIMARY KEY (`id`)</div><div class="line">    )'''</div><div class="line">    <span class="comment"># 使用 cursor() 方法创建一个游标对象 cursor</span></div><div class="line">    cursor = db.cursor()</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        <span class="comment"># 执行 sql 语句</span></div><div class="line">        cursor.execute(sql)</div><div class="line">        <span class="comment"># 提交事务</span></div><div class="line">        db.commit()</div><div class="line">        print(<span class="string">'create table success'</span>)</div><div class="line">    <span class="keyword">except</span> BaseException <span class="keyword">as</span> e:  <span class="comment"># 如果发生错误则回滚</span></div><div class="line">        db.rollback()</div><div class="line">        print(e)</div><div class="line"></div><div class="line">    <span class="keyword">finally</span>:</div><div class="line">        <span class="comment"># 关闭游标连接</span></div><div class="line">        cursor.close()</div><div class="line">        <span class="comment"># 关闭数据库连接</span></div><div class="line">        db.close()</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    create_table()</div></pre></td></tr></table></figure></p><h2 id="解析网站"><a href="#解析网站" class="headerlink" title="解析网站"></a>解析网站</h2><p>首先需要 requests 请求网站，然后 BeautifulSoup 解析自己需要的节点。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_html_data</span><span class="params">()</span>:</span></div><div class="line">    <span class="comment"># get 请求</span></div><div class="line">    response = requests.get(<span class="string">'https://meiriyiwen.com/random'</span>)</div><div class="line"></div><div class="line">    soup = BeautifulSoup(response.content, <span class="string">"html5lib"</span>)</div><div class="line">    article = soup.find(<span class="string">"div"</span>, id=<span class="string">'article_show'</span>)</div><div class="line">    article_title = article.h1.string</div><div class="line">    print(<span class="string">'article_title=%s'</span> % article_title)</div><div class="line">    article_author = article.find(<span class="string">'p'</span>, class_=<span class="string">"article_author"</span>).string</div><div class="line">    print(<span class="string">'article_author=%s'</span> % article.find(<span class="string">'p'</span>, class_=<span class="string">"article_author"</span>).string)</div><div class="line">    article_contents = article.find(<span class="string">'div'</span>, class_=<span class="string">"article_text"</span>).find_all(<span class="string">'p'</span>)</div><div class="line">    article_content = <span class="string">''</span></div><div class="line">    <span class="keyword">for</span> content <span class="keyword">in</span> article_contents:</div><div class="line">        article_content = article_content + str(content)</div><div class="line">        print(<span class="string">'article_content=%s'</span> % article_content)</div></pre></td></tr></table></figure></p><h2 id="插入数据库"><a href="#插入数据库" class="headerlink" title="插入数据库"></a>插入数据库</h2><p>这里做了一个筛选，默认这个网站的文章标题是唯一的，插入数据时，如果有了同样的标题就不插入。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> pymysql</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert_table</span><span class="params">(article_title, article_author, article_content)</span>:</span></div><div class="line">    <span class="comment"># 建立连接</span></div><div class="line">    db = pymysql.connect(host=<span class="string">'localhost'</span>,</div><div class="line">                         user=<span class="string">'root'</span>,</div><div class="line">                         password=<span class="string">'root'</span>,</div><div class="line">                         db=<span class="string">'python3learn'</span>,</div><div class="line">                         charset=<span class="string">"utf8"</span>)</div><div class="line">    <span class="comment"># 插入数据</span></div><div class="line">    query_sql = <span class="string">'select * from article where article_title=%s'</span></div><div class="line">    sql = <span class="string">'insert into article (article_title,article_author,article_content) values (%s, %s, %s)'</span></div><div class="line">    <span class="comment"># 使用 cursor() 方法创建一个游标对象 cursor</span></div><div class="line">    cursor = db.cursor()</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        query_value = (article_title,)</div><div class="line">        <span class="comment"># 执行 sql 语句</span></div><div class="line">        cursor.execute(query_sql, query_value)</div><div class="line">        results = cursor.fetchall()</div><div class="line">        <span class="keyword">if</span> len(results) == <span class="number">0</span>:</div><div class="line">            value = (article_title, article_author, article_content)</div><div class="line">            cursor.execute(sql, value)</div><div class="line">            <span class="comment"># 提交事务</span></div><div class="line">            db.commit()</div><div class="line">            print(<span class="string">'--------------《%s》 insert table success-------------'</span> % article_title)</div><div class="line">            <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            print(<span class="string">'--------------《%s》 已经存在-------------'</span> % article_title)</div><div class="line">            <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line"></div><div class="line">    <span class="keyword">except</span> BaseException <span class="keyword">as</span> e:  <span class="comment"># 如果发生错误则回滚</span></div><div class="line">        db.rollback()</div><div class="line">        print(e)</div><div class="line"></div><div class="line">    <span class="keyword">finally</span>:  <span class="comment"># 关闭游标连接</span></div><div class="line">        cursor.close()</div><div class="line">        <span class="comment"># 关闭数据库连接</span></div><div class="line">        db.close()</div></pre></td></tr></table></figure></p><h2 id="定时设置"><a href="#定时设置" class="headerlink" title="定时设置"></a>定时设置</h2><p>做了一个定时，过段时间就去爬一次。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> sched</div><div class="line"><span class="keyword">import</span> time</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 初始化 sched 模块的 scheduler 类</span></div><div class="line"><span class="comment"># 第一个参数是一个可以返回时间戳的函数，第二个参数可以在定时未到达之前阻塞。</span></div><div class="line">schedule = sched.scheduler(time.time, time.sleep)</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 被周期性调度触发的函数</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_time</span><span class="params">(inc)</span>:</span></div><div class="line">    <span class="comment"># to do something</span></div><div class="line">    print(<span class="string">'to do something'</span>)</div><div class="line">    schedule.enter(inc, <span class="number">0</span>, print_time, (inc,))</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 默认参数 60 s</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">start</span><span class="params">(inc=<span class="number">60</span>)</span>:</span></div><div class="line">    <span class="comment"># enter四个参数分别为：间隔事件、优先级（用于同时间到达的两个事件同时执行时定序）、被调用触发的函数，</span></div><div class="line">    <span class="comment"># 给该触发函数的参数（tuple形式）</span></div><div class="line">    schedule.enter(<span class="number">0</span>, <span class="number">0</span>, print_time, (inc,))</div><div class="line">    schedule.run()</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    <span class="comment"># 5 s 输出一次</span></div><div class="line">    start(<span class="number">5</span>)</div></pre></td></tr></table></figure></p><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> pymysql</div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</div><div class="line"><span class="keyword">import</span> sched</div><div class="line"><span class="keyword">import</span> time</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_table</span><span class="params">()</span>:</span></div><div class="line">    <span class="comment"># 建立连接</span></div><div class="line">    db = pymysql.connect(host=<span class="string">'localhost'</span>,</div><div class="line">                         user=<span class="string">'root'</span>,</div><div class="line">                         password=<span class="string">'root'</span>,</div><div class="line">                         db=<span class="string">'python3learn'</span>)</div><div class="line">    <span class="comment"># 创建名为 article 数据库语句</span></div><div class="line">    sql = <span class="string">'''create table if not exists article (</span></div><div class="line">    id int NOT NULL AUTO_INCREMENT, </div><div class="line">    article_title text,</div><div class="line">    article_author text,</div><div class="line">    article_content text,</div><div class="line">    PRIMARY KEY (`id`)</div><div class="line">    )'''</div><div class="line">    <span class="comment"># 使用 cursor() 方法创建一个游标对象 cursor</span></div><div class="line">    cursor = db.cursor()</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        <span class="comment"># 执行 sql 语句</span></div><div class="line">        cursor.execute(sql)</div><div class="line">        <span class="comment"># 提交事务</span></div><div class="line">        db.commit()</div><div class="line">        print(<span class="string">'create table success'</span>)</div><div class="line">    <span class="keyword">except</span> BaseException <span class="keyword">as</span> e:  <span class="comment"># 如果发生错误则回滚</span></div><div class="line">        db.rollback()</div><div class="line">        print(e)</div><div class="line"></div><div class="line">    <span class="keyword">finally</span>:</div><div class="line">        <span class="comment"># 关闭游标连接</span></div><div class="line">        cursor.close()</div><div class="line">        <span class="comment"># 关闭数据库连接</span></div><div class="line">        db.close()</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert_table</span><span class="params">(article_title, article_author, article_content)</span>:</span></div><div class="line">    <span class="comment"># 建立连接</span></div><div class="line">    db = pymysql.connect(host=<span class="string">'localhost'</span>,</div><div class="line">                         user=<span class="string">'root'</span>,</div><div class="line">                         password=<span class="string">'root'</span>,</div><div class="line">                         db=<span class="string">'python3learn'</span>,</div><div class="line">                         charset=<span class="string">"utf8"</span>)</div><div class="line">    <span class="comment"># 插入数据</span></div><div class="line">    query_sql = <span class="string">'select * from article where article_title=%s'</span></div><div class="line">    sql = <span class="string">'insert into article (article_title,article_author,article_content) values (%s, %s, %s)'</span></div><div class="line">    <span class="comment"># 使用 cursor() 方法创建一个游标对象 cursor</span></div><div class="line">    cursor = db.cursor()</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        query_value = (article_title,)</div><div class="line">        <span class="comment"># 执行 sql 语句</span></div><div class="line">        cursor.execute(query_sql, query_value)</div><div class="line">        results = cursor.fetchall()</div><div class="line">        <span class="keyword">if</span> len(results) == <span class="number">0</span>:</div><div class="line">            value = (article_title, article_author, article_content)</div><div class="line">            cursor.execute(sql, value)</div><div class="line">            <span class="comment"># 提交事务</span></div><div class="line">            db.commit()</div><div class="line">            print(<span class="string">'--------------《%s》 insert table success-------------'</span> % article_title)</div><div class="line">            <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            print(<span class="string">'--------------《%s》 已经存在-------------'</span> % article_title)</div><div class="line">            <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line"></div><div class="line">    <span class="keyword">except</span> BaseException <span class="keyword">as</span> e:  <span class="comment"># 如果发生错误则回滚</span></div><div class="line">        db.rollback()</div><div class="line">        print(e)</div><div class="line"></div><div class="line">    <span class="keyword">finally</span>:  <span class="comment"># 关闭游标连接</span></div><div class="line">        cursor.close()</div><div class="line">        <span class="comment"># 关闭数据库连接</span></div><div class="line">        db.close()</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_html_data</span><span class="params">()</span>:</span></div><div class="line">    <span class="comment"># get 请求</span></div><div class="line">    response = requests.get(<span class="string">'https://meiriyiwen.com/random'</span>)</div><div class="line"></div><div class="line">    soup = BeautifulSoup(response.content, <span class="string">"html5lib"</span>)</div><div class="line">    article = soup.find(<span class="string">"div"</span>, id=<span class="string">'article_show'</span>)</div><div class="line">    article_title = article.h1.string</div><div class="line">    print(<span class="string">'article_title=%s'</span> % article_title)</div><div class="line">    article_author = article.find(<span class="string">'p'</span>, class_=<span class="string">"article_author"</span>).string</div><div class="line">    print(<span class="string">'article_author=%s'</span> % article.find(<span class="string">'p'</span>, class_=<span class="string">"article_author"</span>).string)</div><div class="line">    article_contents = article.find(<span class="string">'div'</span>, class_=<span class="string">"article_text"</span>).find_all(<span class="string">'p'</span>)</div><div class="line">    article_content = <span class="string">''</span></div><div class="line">    <span class="keyword">for</span> content <span class="keyword">in</span> article_contents:</div><div class="line">        article_content = article_content + str(content)</div><div class="line">        print(<span class="string">'article_content=%s'</span> % article_content)</div><div class="line"></div><div class="line">    <span class="comment"># 插入数据库</span></div><div class="line">    insert_table(article_title, article_author, article_content)</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 初始化 sched 模块的 scheduler 类</span></div><div class="line"><span class="comment"># 第一个参数是一个可以返回时间戳的函数，第二个参数可以在定时未到达之前阻塞。</span></div><div class="line">schedule = sched.scheduler(time.time, time.sleep)</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 被周期性调度触发的函数</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_time</span><span class="params">(inc)</span>:</span></div><div class="line">    get_html_data()</div><div class="line">    schedule.enter(inc, <span class="number">0</span>, print_time, (inc,))</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 默认参数 60 s</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">start</span><span class="params">(inc=<span class="number">60</span>)</span>:</span></div><div class="line">    <span class="comment"># enter四个参数分别为：间隔事件、优先级（用于同时间到达的两个事件同时执行时定序）、被调用触发的函数，</span></div><div class="line">    <span class="comment"># 给该触发函数的参数（tuple形式）</span></div><div class="line">    schedule.enter(<span class="number">0</span>, <span class="number">0</span>, print_time, (inc,))</div><div class="line">    schedule.run()</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    start(<span class="number">60</span>*<span class="number">5</span>)</div></pre></td></tr></table></figure><p>问题：这只是对一篇文章爬虫，如果是那种文章列表，点击是文章详情，这种如何爬虫解析？首先肯定要拿到列表，再循环一个个解析文章详情插入数据库？还没有想好该如何做更好，留给后面的课题吧。</p><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>虽然我学 Python 纯属业余爱好，但是也要学以致用，不然这些知识很快就忘记了，期待下篇 Python 方面的文章。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="http://docs.python-requests.org/zh_CN/latest/user/quickstart.html" target="_blank" rel="noopener">快速上手 — Requests 2.18.1 文档</a></p><p><a href="http://mp.weixin.qq.com/s/HKBeOAbl4H7JsEInP6_-1A" target="_blank" rel="noopener">爬虫入门系列（二）：优雅的HTTP库requests</a></p><p><a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.zh.html" target="_blank" rel="noopener">Beautiful Soup 4.2.0 文档</a></p><p><a href="http://mp.weixin.qq.com/s/XMxACsYyk0m22dhjh-tDxw" target="_blank" rel="noopener">爬虫入门系列（四）：HTML文本解析库BeautifulSoup</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Python-基础&quot;&gt;&lt;a href=&quot;#Python-基础&quot; class=&quot;headerlink&quot; title=&quot;Python 基础&quot;&gt;&lt;/a&gt;Python 基础&lt;/h1&gt;&lt;p&gt;我之前写的《&lt;a href=&quot;https://mp.weixin.qq.com/s/ZkOXwR3sjuUWiXTCYkbasA&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Python 3 极简教程.pdf&lt;/a&gt;》，适合有点编程基础的快速入门，通过该系列文章学习，能够独立完成接口的编写，写写小东西没问题。&lt;/p&gt;
&lt;h1 id=&quot;requests&quot;&gt;&lt;a href=&quot;#requests&quot; class=&quot;headerlink&quot; title=&quot;requests&quot;&gt;&lt;/a&gt;requests&lt;/h1&gt;&lt;p&gt;requests，Python HTTP 请求库，相当于 Android 的 Retrofit，它的功能包括 Keep-Alive 和连接池、Cookie 持久化、内容自动解压、HTTP 代理、SSL 认证、连接超时、Session 等很多特性，同时兼容 Python2 和 Python3，GitHub：&lt;a href=&quot;https://github.com/requests/requests&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/requests/requests&lt;/a&gt; 。&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://wuxiaolong.me/categories/Python/"/>
    
    
      <category term="Python" scheme="http://wuxiaolong.me/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Android Studio 3.0 升级一些坑</title>
    <link href="http://wuxiaolong.me/2017/11/04/AndroidStudio3/"/>
    <id>http://wuxiaolong.me/2017/11/04/AndroidStudio3/</id>
    <published>2017-11-04T15:40:07.000Z</published>
    <updated>2018-10-15T13:45:52.643Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前几天，期待已久的 Android Studio 3.0 release 版来临了，根据以往经验，每次大版本升级肯定要折腾一番，况且公司最近项目紧，因此我没有着急升级。10 月 31 号项目交了第一个版本，有同事离职了，我接了 NDK 的锅，到现在终于有空了，手痒痒点了升级。</p></blockquote><h1 id="Android-Studio-3-0"><a href="#Android-Studio-3-0" class="headerlink" title="Android Studio 3.0"></a>Android Studio 3.0</h1><p>官方更新日志：<a href="https://developer.android.google.cn/studio/releases/index.html" target="_blank" rel="noopener">https://developer.android.google.cn/studio/releases/index.html</a> ，我截图了，用的 Chrome 自带翻译功能，有些翻译不到位，但比我这半吊子英语看省事多了。<br><a id="more"></a><br><img src="http://wuxiaolong.github.io/images/AndroidStudio3.0_8.png" alt=""><br><img src="http://wuxiaolong.github.io/images/AndroidStudio3.0_9.png" alt=""><br><img src="http://wuxiaolong.github.io/images/AndroidStudio3.0_10.png" alt=""></p><h1 id="增量升级"><a href="#增量升级" class="headerlink" title="增量升级"></a>增量升级</h1><p>点击 Check for Updates 增量更新：<br><img src="http://wuxiaolong.github.io/images/AndroidStudio3.0_1.png" alt=""><br>下载完成，会提示更新 您将 Gradle 更新至 4.1：<br><img src="http://wuxiaolong.github.io/images/AndroidStudio3.0_2.png" alt=""><br>这里建议您对老项目先暂时点击 Don’t remind me on this project，以防有坑。当然我不入地狱谁入地狱，我点 Update，于是问题来了，一直处于下载中，不过，莫担心，我下载好了，公众号聊天界面回复「<strong>gradle-4.1-all</strong>」，下载 gradle-4.1-all.zip 文件，放到：<br><img src="http://wuxiaolong.github.io/images/AndroidStudio3.0_3.png" alt=""><br>重启 Android Studio。</p><p>gradle 目录：</p><p>Mac系统默认：/Users/(用户名)/.gradle</p><p>Windows系统默认：C:\Users(用户名).gradle</p><h1 id="修改旧项目"><a href="#修改旧项目" class="headerlink" title="修改旧项目"></a>修改旧项目</h1><p>首先我们新建项目，看看发生了哪些变化。</p><p>1、app／build.gradle<br><img src="http://wuxiaolong.github.io/images/AndroidStudio3.0_4.png" alt=""><br>buildToolsVersion：这里没有构建工具的版本 buildToolsVersion 属性了，Android Studio 3.0 默认情况下，插件会自动为您使用的 Android 插件版本使用最低要求的构建工具版本；</p><p>implementation：由以前的 compile 改成了 implementation。老版本的构建关键字 compile 被废弃了，而是改成了这两个：api：同 compile 作用一样，即认为本 module 将会泄露其依赖的 module 的内容；<br>implementation：本 module 不会通过自身的接口向外部暴露其依赖 module 的内容。</p><p>2、项目 build.gradle<br><img src="http://wuxiaolong.github.io/images/AndroidStudio3.0_5.png" alt=""><br>google()：Android Studio 3.0 现在默认使用 Google 的 Maven 存储库，而不是依赖于 Android SDK Manager 来获取 Android 支持库，Google Play 服务，Firebase 和其他依赖项的更新；</p><p>build.gradle：指定的是Gradle插件的版本，由之前的 2.3.3 改成了 3.0.0。</p><p>3、gradle-wrapper.properties<br>gradle-wrapper.properties 中配置的是的 Gradle 的版本。<br><img src="http://wuxiaolong.github.io/images/AndroidStudio3.0_6.png" alt=""><br>可以对老项目就以上几点进行修改。</p><h1 id="butterknife"><a href="#butterknife" class="headerlink" title="butterknife"></a>butterknife</h1><p>如果您在 lib 里使用了 butterknife，会遇到以下错误：<br><img src="http://wuxiaolong.github.io/images/AndroidStudio3.0_7.png" alt=""><br>网上说将 apply plugin: ‘com.jakewharton.butterknife’ 注掉，是能解决问题，但是对于 lib 里使用了 butterknife 依旧报 R2 找不到，还得放开 apply plugin: ‘com.jakewharton.butterknife’，最后我只能退而求其次，将 build.gradle 中 3.0.0 改成之前的 2.3.3，解决。</p><h1 id="打包自定义-APK-文件名"><a href="#打包自定义-APK-文件名" class="headerlink" title="打包自定义 APK 文件名"></a>打包自定义 APK 文件名</h1><p>打包时，要是自定义输出 APK 文件名可以这样做：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">android &#123;</div><div class="line">    buildTypes &#123;</div><div class="line">        release &#123;</div><div class="line">            <span class="comment">//……</span></div><div class="line">            applicationVariants.all &#123; variant -&gt;</div><div class="line">                <span class="keyword">if</span> (variant.buildType.name == <span class="string">'release'</span>) &#123;</div><div class="line">                    variant.outputs.each &#123; output -&gt;</div><div class="line">                        def outputFile = output.<span class="function">outputFile</span></div><div class="line">                        <span class="title">if</span> <span class="params">(outputFile != <span class="keyword">null</span> &amp;&amp; outputFile.name.endsWith(<span class="string">'.apk'</span>)</span>) &#123;</div><div class="line">                            def fileName = <span class="string">"Sample_v$&#123;defaultConfig.versionName&#125;_$&#123;releaseTime()&#125;_$&#123;variant.flavorName&#125;.apk"</span></div><div class="line">                            output.outputFile = <span class="keyword">new</span> File(outputFile.parent, fileName)</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">def <span class="title">releaseTime</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Date().format(<span class="string">"yyyy-MM-dd"</span>, TimeZone.getTimeZone(<span class="string">"UTC"</span>))</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>使用 Gradle Plugin 3.0.0 时报错：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Cannot set the value of read-only property <span class="string">'outputFile'</span> <span class="keyword">for</span> ApkVariantOutputImpl_Decorated&#123;apkData=Main&#123;type=MAIN, fullName=release, filters=[]&#125;&#125; of type com.android.build.gradle.internal.api.ApkVariantOutputImpl. Open File</div></pre></td></tr></table></figure></p><p>需要修改 each() 和 outputFile() 方法为 all() 和 outputFileName，输出文件写法也有点不一样：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">buildTypes &#123;</div><div class="line">    release &#123;</div><div class="line">        <span class="comment">//……</span></div><div class="line">        applicationVariants.all &#123; variant -&gt;</div><div class="line">            <span class="keyword">if</span> (variant.buildType.name == <span class="string">'release'</span>) &#123;</div><div class="line">                variant.outputs.all &#123;</div><div class="line">                    def apkName = <span class="string">"gradle4android_v$&#123;variant.versionName&#125;"</span></div><div class="line">                    <span class="keyword">if</span> (!variant.flavorName.isEmpty()) &#123;</div><div class="line">                        apkName += <span class="string">"_$&#123;variant.flavorName&#125;"</span></div><div class="line">                    &#125;</div><div class="line">                    outputFileName = apkName + <span class="string">"_$&#123;releaseTime()&#125;.apk"</span></div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>输出的路径也有点不一样，根目录是 release，如果有渠道 xiaomi，那根目录是 xiaomi／release。</p><h1 id="style-attribute-‘-android-attr-windowEnterAnimation’-not-found"><a href="#style-attribute-‘-android-attr-windowEnterAnimation’-not-found" class="headerlink" title="style attribute ‘@android:attr/windowEnterAnimation’ not found."></a>style attribute ‘@android:attr/windowEnterAnimation’ not found.</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Error:(<span class="number">22</span>, <span class="number">5</span>) style attribute <span class="string">'@android:attr/windowEnterAnimation'</span> not found</div><div class="line">Error:(<span class="number">22</span>, <span class="number">5</span>) style attribute <span class="string">'@android:attr/windowExitAnimation'</span> not found</div><div class="line">Error:(<span class="number">31</span>, <span class="number">5</span>) style attribute <span class="string">'@android:attr/windowEnterAnimation'</span> not found</div><div class="line">Error:(<span class="number">31</span>, <span class="number">5</span>) style attribute <span class="string">'@android:attr/windowExitAnimation'</span> not found</div></pre></td></tr></table></figure><p>这是aapt2导致的，3.0默认启用了aapt2。<br>解决办法：在project的根目录下的gradle.properties最后添加关闭aapt2的代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">android.enableAapt2=<span class="keyword">false</span></div></pre></td></tr></table></figure></p><h1 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h1><p>build.gradle 和 gradle-wrapper.properties 区别，了解更多：<a href="https://developer.android.com/studio/releases/gradle-plugin.html" target="_blank" rel="noopener">https://developer.android.com/studio/releases/gradle-plugin.html</a></p><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>目前遇到这些坑，欢迎一起吐槽您在升级开发遇到的坑，这次升级又折腾了很久。另外如果需要gradle-4.1-all.zip 文件，公众号「吴小龙同学」聊天界面回复「<strong>gradle-4.1-all</strong>」获取。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;前几天，期待已久的 Android Studio 3.0 release 版来临了，根据以往经验，每次大版本升级肯定要折腾一番，况且公司最近项目紧，因此我没有着急升级。10 月 31 号项目交了第一个版本，有同事离职了，我接了 NDK 的锅，到现在终于有空了，手痒痒点了升级。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;Android-Studio-3-0&quot;&gt;&lt;a href=&quot;#Android-Studio-3-0&quot; class=&quot;headerlink&quot; title=&quot;Android Studio 3.0&quot;&gt;&lt;/a&gt;Android Studio 3.0&lt;/h1&gt;&lt;p&gt;官方更新日志：&lt;a href=&quot;https://developer.android.google.cn/studio/releases/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://developer.android.google.cn/studio/releases/index.html&lt;/a&gt; ，我截图了，用的 Chrome 自带翻译功能，有些翻译不到位，但比我这半吊子英语看省事多了。&lt;br&gt;
    
    </summary>
    
      <category term="Android Studio" scheme="http://wuxiaolong.me/categories/Android-Studio/"/>
    
    
      <category term="Android Studio 3.0" scheme="http://wuxiaolong.me/tags/Android-Studio-3-0/"/>
    
  </entry>
  
  <entry>
    <title>GitBook 使用</title>
    <link href="http://wuxiaolong.me/2017/09/05/GitBookGuide/"/>
    <id>http://wuxiaolong.me/2017/09/05/GitBookGuide/</id>
    <published>2017-09-05T02:54:17.000Z</published>
    <updated>2018-10-15T13:48:24.039Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>我想把我的博客总结归纳下，于是找到了 GitBook，多了一个写博客地方，我把它做为博客的备份。花了两三天学习了 GitBook，这里记录下。此教程基于 Mac，Windows 也差不多适用。</p></blockquote><h1 id="安装-Node-js"><a href="#安装-Node-js" class="headerlink" title="安装 Node.js"></a>安装 Node.js</h1><p>GitBook 是基于 Node.js 的命令行工具，下载安装 <a href="http://nodejs.org/" target="_blank" rel="noopener">Node.js</a>。<br><a id="more"></a><br>检测安装是否成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ node -v</div><div class="line">v6.11.0</div></pre></td></tr></table></figure><h1 id="Gitbook-安装"><a href="#Gitbook-安装" class="headerlink" title="Gitbook 安装"></a>Gitbook 安装</h1><p>Gitbook 是用 npm 安装的，命令行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install -g gitbook-cli</div></pre></td></tr></table></figure><p>检测安装是否成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ gitbook -V</div><div class="line">CLI version: 2.3.2</div><div class="line">GitBook version: 3.2.3</div></pre></td></tr></table></figure><p>更新最新版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ gitbook update</div></pre></td></tr></table></figure><p>卸载：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm uninstall -g gitbook</div></pre></td></tr></table></figure><h1 id="GitBook-Editor"><a href="#GitBook-Editor" class="headerlink" title="GitBook Editor"></a>GitBook Editor</h1><p>官方编辑器，下载 <a href="https://www.gitbook.com/editor" target="_blank" rel="noopener">https://www.gitbook.com/editor</a> ，大概如图：</p><p><img src="http://wuxiaolong.github.io/images/GitBook1.png" alt="">  </p><p>关于 GitBook Editor 怎么使用和注册 GitBook 等步骤较简单，这里略。</p><h1 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h1><h2 id="book-json"><a href="#book-json" class="headerlink" title="book.json"></a>book.json</h2><p>新建一个 book.json 文件，可以配置网站信息、在 plugins 和 pluginsConfig 字段添加插件等。</p><p>插件命名方式为：</p><p>gitbook-plugin-X: 插件；</p><p>gitbook-theme-X: 主题。</p><p>可以在 <a href="https://www.npmjs.com/" target="_blank" rel="noopener">npmjs</a> 或 <a href="https://plugins.gitbook.com/" target="_blank" rel="noopener">GitBook 插件</a> 直接搜索插件或者主题。<br>book.json 内容大概如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"gitbook"</span>: <span class="string">"3.2.3"</span>,</div><div class="line">    <span class="attr">"title"</span>: <span class="string">"吴小龙同學"</span>,</div><div class="line">    <span class="attr">"description"</span>: <span class="string">"http://wuxiaolong.me/"</span>,</div><div class="line">    <span class="attr">"author"</span>: <span class="string">"WuXiaolong"</span>,</div><div class="line">    <span class="attr">"language"</span>: <span class="string">"zh-hans"</span>,</div><div class="line">    <span class="attr">"links"</span>: &#123;</div><div class="line">        <span class="attr">"sidebar"</span>: &#123;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">     <span class="attr">"plugins"</span>: [<span class="string">"github"</span>,</div><div class="line">                 <span class="string">"donate"</span>,</div><div class="line">                 <span class="string">"splitter"</span>,</div><div class="line">                 <span class="string">"anchor-navigation-ex"</span>,</div><div class="line">                 <span class="string">"-sharing"</span>,</div><div class="line">                 <span class="string">"sharing-plus"</span>,</div><div class="line">                 <span class="string">"-highlight"</span>,</div><div class="line">                 <span class="string">"prism"</span></div><div class="line">                 ],</div><div class="line">     <span class="attr">"pluginsConfig"</span>: &#123;</div><div class="line">       <span class="attr">"sharing"</span>: &#123;</div><div class="line">            <span class="attr">"douban"</span>: <span class="literal">false</span>,</div><div class="line">            <span class="attr">"facebook"</span>: <span class="literal">false</span>,</div><div class="line">            <span class="attr">"google"</span>: <span class="literal">false</span>,</div><div class="line">            <span class="attr">"hatenaBookmark"</span>: <span class="literal">false</span>,</div><div class="line">            <span class="attr">"instapaper"</span>: <span class="literal">false</span>,</div><div class="line">            <span class="attr">"line"</span>: <span class="literal">false</span>,</div><div class="line">            <span class="attr">"linkedin"</span>: <span class="literal">false</span>,</div><div class="line">            <span class="attr">"messenger"</span>: <span class="literal">false</span>,</div><div class="line">            <span class="attr">"pocket"</span>: <span class="literal">false</span>,</div><div class="line">            <span class="attr">"qq"</span>: <span class="literal">false</span>,</div><div class="line">            <span class="attr">"qzone"</span>: <span class="literal">false</span>,</div><div class="line">            <span class="attr">"stumbleupon"</span>: <span class="literal">false</span>,</div><div class="line">            <span class="attr">"twitter"</span>: <span class="literal">false</span>,</div><div class="line">            <span class="attr">"viber"</span>: <span class="literal">false</span>,</div><div class="line">            <span class="attr">"vk"</span>: <span class="literal">false</span>,</div><div class="line">            <span class="attr">"weibo"</span>: <span class="literal">false</span>,</div><div class="line">            <span class="attr">"whatsapp"</span>: <span class="literal">false</span>,</div><div class="line">            <span class="attr">"all"</span>: [</div><div class="line">                <span class="string">"weibo"</span>,<span class="string">"qq"</span>,<span class="string">"qzone"</span>,<span class="string">"google"</span>,<span class="string">"douban"</span></div><div class="line">            ]</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">"github"</span>: &#123;</div><div class="line">            <span class="attr">"url"</span>: <span class="string">"https://github.com/WuXiaolong"</span></div><div class="line">        &#125;,</div><div class="line">        <span class="attr">"donate"</span>: &#123;</div><div class="line">            <span class="attr">"wechat"</span>: <span class="string">"http://wuxiaolong.github.io/images/wechatpay.JPG"</span>,</div><div class="line">            <span class="attr">"title"</span>: <span class="string">""</span>,</div><div class="line">            <span class="attr">"button"</span>: <span class="string">"赏"</span>,</div><div class="line">            <span class="attr">"wechatText"</span>: <span class="string">"微信打赏"</span></div><div class="line">        &#125;,</div><div class="line">        <span class="attr">"anchor-navigation-ex"</span>: &#123;</div><div class="line">            <span class="attr">"associatedWithSummary"</span>:<span class="literal">false</span>,</div><div class="line">            <span class="attr">"showLevel"</span>:<span class="literal">true</span>,</div><div class="line">            <span class="attr">"multipleH1"</span>: <span class="literal">true</span>,</div><div class="line">            <span class="attr">"mode"</span>: <span class="string">"float"</span>,</div><div class="line"></div><div class="line">             <span class="attr">"pageTop"</span>: &#123;</div><div class="line">                  <span class="attr">"showLevelIcon"</span>: <span class="literal">false</span>,</div><div class="line">                  <span class="attr">"level1Icon"</span>: <span class="string">"fa fa-hand-o-right"</span>,</div><div class="line">                  <span class="attr">"level2Icon"</span>: <span class="string">"fa fa-hand-o-right"</span>,</div><div class="line">                  <span class="attr">"level3Icon"</span>: <span class="string">"fa fa-hand-o-right"</span></div><div class="line">    &#125;</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">"theme-default"</span>: &#123;</div><div class="line">            <span class="attr">"showLevel"</span>: <span class="literal">true</span></div><div class="line">        &#125;,</div><div class="line">        <span class="attr">"fontsettings"</span>: &#123;</div><div class="line">            <span class="attr">"theme"</span>: <span class="string">"white"</span>,</div><div class="line">            <span class="attr">"family"</span>: <span class="string">"serif"</span>,</div><div class="line">            <span class="attr">"size"</span>: <span class="number">2</span></div><div class="line">        &#125;,</div><div class="line">        <span class="attr">"prism"</span>: &#123;</div><div class="line">            <span class="attr">"css"</span>: [</div><div class="line">             <span class="string">"prismjs/themes/prism-tomorrow.css"</span></div><div class="line">            ]</div><div class="line">  &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>说明</strong>：</p><ul><li><a href="https://www.npmjs.com/package/gitbook-plugin-github" target="_blank" rel="noopener">github</a>：添加 GitHub 图标；</li><li><a href="https://www.npmjs.com/package/gitbook-plugin-donate" target="_blank" rel="noopener">Donate</a>：添加赞赏按钮；</li><li><a href="">splitter</a>：使侧边栏的宽度可以自由调节；</li><li><a href="">anchor-navigation-ex</a>：添加Toc到侧边悬浮导航以及回到顶部按钮；</li><li><a href="https://www.npmjs.com/package/gitbook-plugin-theme-default" target="_blank" rel="noopener">theme-default</a>：将 showLevel 设为 true， 就可以显示标题前面的数字索引，默认不显示。</li></ul><h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ gitbook install ./</div></pre></td></tr></table></figure><p>不要忘记这步，根目录 node_modules 文件下能看到安装那些插件。</p><p>或单独安装插件:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install gitbook-plugin-anchor-navigation-ex --save</div></pre></td></tr></table></figure><h2 id="默认插件"><a href="#默认插件" class="headerlink" title="默认插件"></a>默认插件</h2><p>GitBook 默认带有5个插件：</p><p>highlight</p><p>search</p><p><a href="https://www.npmjs.com/package/gitbook-plugin-sharing" target="_blank" rel="noopener">sharing</a></p><p><a href="https://www.npmjs.com/package/gitbook-plugin-fontsettings" target="_blank" rel="noopener">fontsettings</a></p><p>livereload</p><p>如果要去除自带的插件，可以在插件名称前面加 -：</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">"plugins": [</div><div class="line">"-search"</div><div class="line">]</div></pre></td></tr></table></figure><p>如果想配置直接在 pluginsConfig 配置。</p><h1 id="GitBook-输出"><a href="#GitBook-输出" class="headerlink" title="GitBook 输出"></a>GitBook 输出</h1><h2 id="本地预览"><a href="#本地预览" class="headerlink" title="本地预览"></a>本地预览</h2><p>进入你的 GitBook 书籍目录，右击 - 服务 - 新建位于文件夹位置的终端窗口，输入命令行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ gitbook serve</div></pre></td></tr></table></figure><p>然后浏览器打开 <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> 就能预览了，control + c 停止。</p><h2 id="输出静态网站"><a href="#输出静态网站" class="headerlink" title="输出静态网站"></a>输出静态网站</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ gitbook build</div></pre></td></tr></table></figure><p>以上都会在书籍目录生成 _book，前者能实时预览。</p><h1 id="输出-PDF-文件"><a href="#输出-PDF-文件" class="headerlink" title="输出 PDF 文件"></a>输出 PDF 文件</h1><h2 id="下载-Calibre"><a href="#下载-Calibre" class="headerlink" title="下载 Calibre"></a>下载 Calibre</h2><p>生成 PDF 文件依赖于 ebook-convert，需要安装 <a href="https://calibre-ebook.com/" target="_blank" rel="noopener">Calibre</a>;</p><h2 id="配置-Calibre-环境变量"><a href="#配置-Calibre-环境变量" class="headerlink" title="配置 Calibre 环境变量"></a>配置 Calibre 环境变量</h2><p>如何配置环境变量参考<a href="http://wuxiaolong.me/2017/07/19/mac-adb-gradlew/">这里</a>，在 .bash_profile 文件加入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># Calibre</div><div class="line">export PATH=/Applications/calibre.app/Contents/MacOS:$PATH</div></pre></td></tr></table></figure><p>更新刚配置的环境变量：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">source</span> .bash_profile</div></pre></td></tr></table></figure><p>查看所有的配置路径：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">echo</span> <span class="variable">$PATH</span></div></pre></td></tr></table></figure><h2 id="输出-PDF-文件-1"><a href="#输出-PDF-文件-1" class="headerlink" title="输出 PDF 文件"></a>输出 PDF 文件</h2><p>命令行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ gitbook pdf</div></pre></td></tr></table></figure><p>将在根目录下生成了 book.pdf 文件</p><h1 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h1><p><img src="http://wuxiaolong.github.io/images/GitBook2.png" alt=""><br>如图，GitBook Editor - Book - Repository Settings，设置需要上传的远程 git，可以是 GitBook，GitHub 等。</p><h1 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h1><h2 id="设置-GitBook-域名"><a href="#设置-GitBook-域名" class="headerlink" title="设置 GitBook 域名"></a>设置 GitBook 域名</h2><p>YourBook - SETTINGS - Domains，如图：</p><p><img src="http://wuxiaolong.github.io/images/GitBook3.png" alt=""></p><p>在 Domain for content 填入自己的域名，因为我已经 Github page 中设置了 Hexo 博客，因此这里用的子域名。</p><h2 id="配置-DNS"><a href="#配置-DNS" class="headerlink" title="配置 DNS"></a>配置 DNS</h2><p>DNS 之前用的<a href="https://www.dnspod.cn/" target="_blank" rel="noopener">dnspod</a>:</p><p><img src="http://wuxiaolong.github.io/images/GitBook4.png" alt=""></p><p>解析类型选择 CNAME，将域名指向一个域名，实现与被指向域名相同的访问效果，主机记录这里值为 book，也可以其他，这样解析后的二级域名为 book<br>.wuxiaolong.me；记录值填写服务商提供的域名，这里填写 www.gitbooks.io。</p><p>注：最后我还是删了，因为我的域名没有备案，微信会有「非微信官方网页」提示，蛋疼。</p><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>1、建议使用 GitBook Editor 在线编辑，我本地编辑老是崩溃，不知道是他们软件问题还是我电脑问题，在线编辑还有个好处，插件不用下载；</p><p>2、遗留两个问题没有解决，如图：</p><p><img src="http://wuxiaolong.github.io/images/GitBook5.png" alt=""></p><p>第一问题：这里是自动生成的，我能改成其他地址吗？</p><p>第二问题：发现没，英文全是大写，能写什么就显示什么吗？</p><p>望知道的小伙伴告知下，多谢！</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://toolchain.gitbook.com/" target="_blank" rel="noopener">GitBook Document</a></li><li><a href="http://www.baidusdu.com/2015/12/14/Mac-下-GitBook-的安装与使用/" target="_blank" rel="noopener">Mac 下 GitBook 的安装与使用</a></li><li><a href="http://gitbook.zhangjikai.com/" target="_blank" rel="noopener">gitbook-use</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;我想把我的博客总结归纳下，于是找到了 GitBook，多了一个写博客地方，我把它做为博客的备份。花了两三天学习了 GitBook，这里记录下。此教程基于 Mac，Windows 也差不多适用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;安装-Node-js&quot;&gt;&lt;a href=&quot;#安装-Node-js&quot; class=&quot;headerlink&quot; title=&quot;安装 Node.js&quot;&gt;&lt;/a&gt;安装 Node.js&lt;/h1&gt;&lt;p&gt;GitBook 是基于 Node.js 的命令行工具，下载安装 &lt;a href=&quot;http://nodejs.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Node.js&lt;/a&gt;。&lt;br&gt;
    
    </summary>
    
      <category term="GitBook" scheme="http://wuxiaolong.me/categories/GitBook/"/>
    
    
      <category term="GitBook" scheme="http://wuxiaolong.me/tags/GitBook/"/>
    
  </entry>
  
  <entry>
    <title>Android 轮播图从 0 到 1</title>
    <link href="http://wuxiaolong.me/2017/08/27/banner/"/>
    <id>http://wuxiaolong.me/2017/08/27/banner/</id>
    <published>2017-08-27T12:48:07.000Z</published>
    <updated>2018-10-15T13:49:13.551Z</updated>
    
    <content type="html"><![CDATA[<h1 id="漏洞百出"><a href="#漏洞百出" class="headerlink" title="漏洞百出"></a>漏洞百出</h1><p>轮播图是 Android 常用功能之一，效果大概是这样的：<br><a id="more"></a><br><img src="http://wuxiaolong.github.io/images/banner.png" alt=""></p><p>之前我封装写了一个，基本达到了要求，是继承了 Fragment（当时脑袋肯定锈掉了），里面 Viewpager add Fragment，这次项目多处有轮播图，发现之前封装的不够用，简直漏洞百出：<br>1、比如底部 point 的位置，之前固定在中间，现在可能要放在右下角，point 最好也能动态改图片；<br>2、现在项目跟微信一样，底部 tab 切换，中间是 Fragment 替换，发现轮播图有问题，Fragment A 循环的 point 的 positoin 居然影响到了 Fragment B，照理，这是两个 BannerFragment，不会影响的啊，报以下错误：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java.lang.IllegalStateException: The application's PagerAdapter changed the adapter's contents without calling PagerAdapter#notifyDataSetChanged!</div></pre></td></tr></table></figure></p><p>经过排查，找到了原因，因为 Viewpager add Fragment 我全部放在一个类，因此：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Object&gt; bannerList = <span class="keyword">new</span> ArrayList&lt;&gt;();</div></pre></td></tr></table></figure></p><p>这里 static 坏事了，之前一个 banner 没有暴露出来。<br>3、继承了 Fragment，引用比较麻烦，Fragment 有两者引用方法，xml 和代码，两者方式 addData 却报错；<br>4、banner 没有写点击回调。</p><h1 id="再次封装"><a href="#再次封装" class="headerlink" title="再次封装"></a>再次封装</h1><p>综合以上问题，我进行了优化，继承 LinearLayout，当一个控件来引用，省去不必要的麻烦，底部 point 的位置可以设置：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pointLayout.setGravity(bannerPointGravity);</div></pre></td></tr></table></figure></p><p>另外自定义了属性，动态设置 point 大小和图片，轮播图循环时间，也能代码设置，完整代码示例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by WuXiaolong on 2017/8/24.</div><div class="line"> * 个人博客：http：//wuxiaolong.me</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BannerLayout</span> <span class="keyword">extends</span> <span class="title">LinearLayout</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> ViewPager bannerViewPager;</div><div class="line">    <span class="keyword">private</span> LinearLayout bannerPointLayout;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mPosition = <span class="number">0</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mBannerCount = <span class="number">1</span>;</div><div class="line">    <span class="keyword">private</span> Context context;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> bannerPointSize;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> bannerPointGravity;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> bannerPointDrawableSelected, bannerPointDrawableUnselected;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> bannerDelaySecond;</div><div class="line">    <span class="keyword">private</span> OnBannerClickListener onBannerClickListener;</div><div class="line">    <span class="keyword">private</span> Handler handler = <span class="keyword">new</span> Handler();</div><div class="line">    <span class="keyword">private</span> Runnable runnable;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BannerLayout</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>(context, <span class="keyword">null</span>);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BannerLayout</span><span class="params">(Context context, @Nullable AttributeSet attrs)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs);</div><div class="line">        initView(context, attrs);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BannerLayout</span><span class="params">(Context context, @Nullable AttributeSet attrs, <span class="keyword">int</span> defStyleAttr)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs, defStyleAttr);</div><div class="line">        initView(context, attrs);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initView</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.context = context;</div><div class="line"></div><div class="line">        TypedArray typedArray = context.obtainStyledAttributes(attrs, R.styleable.BannerLayout);</div><div class="line">        bannerPointSize = typedArray.getDimensionPixelSize(R.styleable.BannerLayout_bannerPointSize, <span class="number">10</span>);</div><div class="line">        bannerPointGravity = typedArray.getInt(R.styleable.BannerLayout_bannerPointGravity, Gravity.CENTER);</div><div class="line">        bannerDelaySecond = typedArray.getInt(R.styleable.BannerLayout_bannerDelaySecond, <span class="number">3</span>);</div><div class="line">        bannerPointDrawableSelected = typedArray.getResourceId(R.styleable.BannerLayout_bannerPointDrawableSelected, R.mipmap.point01);</div><div class="line">        bannerPointDrawableUnselected = typedArray.getResourceId(R.styleable.BannerLayout_bannerPointDrawableUnselected, R.mipmap.point02);</div><div class="line">        typedArray.recycle();</div><div class="line">        View view = View.inflate(context, R.layout.custom_banner_layout, <span class="keyword">null</span>);</div><div class="line">        addView(view);</div><div class="line"></div><div class="line">        bannerViewPager = (ViewPager) view.findViewById(R.id.bannerViewPager);</div><div class="line">        bannerPointLayout = (LinearLayout) view.findViewById(R.id.bannerPointLayout);</div><div class="line"></div><div class="line">        bannerPointLayout.setGravity(bannerPointGravity);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">(List&lt;Object&gt; bannerList)</span> </span>&#123;</div><div class="line"></div><div class="line">        bannerShutdown();</div><div class="line">        mBannerCount = bannerList.size();</div><div class="line">        BannerPagerAdapter bannerPagerAdapter = <span class="keyword">new</span> BannerPagerAdapter(context, bannerList);</div><div class="line">        bannerViewPager.setAdapter(bannerPagerAdapter);</div><div class="line">        bannerViewPager.addOnPageChangeListener(<span class="keyword">new</span> ViewPager.OnPageChangeListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageScrolled</span><span class="params">(<span class="keyword">int</span> position, <span class="keyword">float</span> positionOffset, <span class="keyword">int</span> positionOffsetPixels)</span> </span>&#123;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageSelected</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">                addPointLayout(position);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageScrollStateChanged</span><span class="params">(<span class="keyword">int</span> state)</span> </span>&#123;</div><div class="line">                <span class="keyword">if</span> (state == <span class="number">1</span>) &#123;</div><div class="line">                    <span class="comment">//手动拖动，移除定时</span></div><div class="line">                    bannerShutdown();</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    bannerStart();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        addPointLayout(<span class="number">0</span>);</div><div class="line">        bannerStart();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addPointLayout</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (mBannerCount == <span class="number">1</span>) &#123;</div><div class="line">            bannerPointLayout.setVisibility(GONE);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            bannerPointLayout.setVisibility(VISIBLE);</div><div class="line">            bannerPointLayout.removeAllViews();</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mBannerCount; i++) &#123;</div><div class="line">                ImageView imageView = <span class="keyword">new</span> ImageView(context);</div><div class="line">                LayoutParams layoutParams = <span class="keyword">new</span> LayoutParams(bannerPointSize, bannerPointSize);</div><div class="line">                layoutParams.setMargins(<span class="number">10</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line">                imageView.setLayoutParams(layoutParams);</div><div class="line"></div><div class="line">                <span class="keyword">if</span> (position == i) &#123;</div><div class="line">                    imageView.setImageResource(bannerPointDrawableSelected);</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    imageView.setImageResource(bannerPointDrawableUnselected);</div><div class="line">                &#125;</div><div class="line">                bannerPointLayout.addView(imageView);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bannerStart</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (runnable == <span class="keyword">null</span>) &#123;</div><div class="line">            runnable = <span class="keyword">new</span> Runnable() &#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                    mPosition = bannerViewPager.getCurrentItem();</div><div class="line">                    <span class="keyword">if</span> (mPosition &lt; mBannerCount - <span class="number">1</span>) &#123;</div><div class="line">                        mPosition++;</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        mPosition = <span class="number">0</span>;</div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                    bannerViewPager.setCurrentItem(mPosition);</div><div class="line">                    handler.postDelayed(<span class="keyword">this</span>, bannerDelaySecond * <span class="number">1000</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;;</div><div class="line">            handler.postDelayed(runnable, bannerDelaySecond * <span class="number">1000</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bannerShutdown</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (handler != <span class="keyword">null</span> &amp;&amp; runnable != <span class="keyword">null</span>) &#123;</div><div class="line">            handler.removeCallbacks(runnable);</div><div class="line">            runnable = <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">BannerPagerAdapter</span> <span class="keyword">extends</span> <span class="title">PagerAdapter</span> </span>&#123;</div><div class="line">        <span class="keyword">private</span> List&lt;Object&gt; bannerList = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        <span class="keyword">private</span> Context context;</div><div class="line"></div><div class="line">        BannerPagerAdapter(Context context, List&lt;Object&gt; bannerList) &#123;</div><div class="line">            <span class="keyword">this</span>.context = context;</div><div class="line">            <span class="keyword">this</span>.bannerList.clear();</div><div class="line">            <span class="keyword">this</span>.bannerList.addAll(bannerList);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> bannerList.size();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isViewFromObject</span><span class="params">(View view, Object object)</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> view == object;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> Object <span class="title">instantiateItem</span><span class="params">(ViewGroup container, <span class="keyword">final</span> <span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">            ViewGroup.LayoutParams layoutParams = <span class="keyword">new</span> ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);</div><div class="line">            ImageView imageView = <span class="keyword">new</span> ImageView(context);</div><div class="line">            imageView.setScaleType(ImageView.ScaleType.CENTER_CROP);</div><div class="line">            Object object = bannerList.get(position);</div><div class="line">            ImageLoaderUtil.load(context, object, R.mipmap.horizontal_default, imageView);</div><div class="line">            imageView.setOnClickListener(<span class="keyword">new</span> OnClickListener() &#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">                    <span class="keyword">if</span> (onBannerClickListener != <span class="keyword">null</span>) &#123;</div><div class="line">                        onBannerClickListener.onBannerClick(position);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">            container.addView(imageView, layoutParams);</div><div class="line">            <span class="keyword">return</span> imageView;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroyItem</span><span class="params">(ViewGroup container, <span class="keyword">int</span> position, Object object)</span> </span>&#123;</div><div class="line">            container.removeView((View) object);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OnBannerClickListener</span> </span>&#123;</div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">onBannerClick</span><span class="params">(<span class="keyword">int</span> position)</span></span>;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">dp2px</span><span class="params">(<span class="keyword">float</span> var0)</span> </span>&#123;</div><div class="line">        <span class="keyword">float</span> var1 = context.getResources().getDisplayMetrics().density;</div><div class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>) (var0 * var1 + <span class="number">0.5F</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> BannerLayout <span class="title">setBannerPointSize</span><span class="params">(<span class="keyword">int</span> bannerPointSize)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.bannerPointSize = dp2px(bannerPointSize);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> BannerLayout <span class="title">setBannerPointGravity</span><span class="params">(<span class="keyword">int</span> bannerPointGravity)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.bannerPointGravity = bannerPointGravity;</div><div class="line">        bannerPointLayout.setGravity(bannerPointGravity);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> BannerLayout <span class="title">setBannerPointDrawableSelected</span><span class="params">(<span class="keyword">int</span> bannerPointDrawableSelected)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.bannerPointDrawableSelected = bannerPointDrawableSelected;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> BannerLayout <span class="title">setBannerPointDrawableUnselected</span><span class="params">(<span class="keyword">int</span> bannerPointDrawableUnselected)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.bannerPointDrawableUnselected = bannerPointDrawableUnselected;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> BannerLayout <span class="title">setBannerDelaySecond</span><span class="params">(<span class="keyword">int</span> bannerDelaySecond)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.bannerDelaySecond = bannerDelaySecond;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> BannerLayout <span class="title">setOnBannerClickListener</span><span class="params">(OnBannerClickListener onBannerClickListener)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.onBannerClickListener = onBannerClickListener;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>其中自定义属性的attrs.xml：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">declare-styleable</span> <span class="attr">name</span>=<span class="string">"BannerLayout"</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!--轮播图点的大小--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"bannerPointSize"</span> <span class="attr">format</span>=<span class="string">"dimension"</span> /&gt;</span></div><div class="line">        <span class="comment">&lt;!--轮播图点的位置，分别有左中右--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"bannerPointGravity"</span> <span class="attr">format</span>=<span class="string">"enum"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">enum</span> <span class="attr">name</span>=<span class="string">"left"</span> <span class="attr">value</span>=<span class="string">"3"</span> /&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">enum</span> <span class="attr">name</span>=<span class="string">"center"</span> <span class="attr">value</span>=<span class="string">"17"</span> /&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">enum</span> <span class="attr">name</span>=<span class="string">"right"</span> <span class="attr">value</span>=<span class="string">"5"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">attr</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!--轮播图点选中的图片--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"bannerPointDrawableSelected"</span> <span class="attr">format</span>=<span class="string">"reference"</span> /&gt;</span></div><div class="line">        <span class="comment">&lt;!--轮播图点未选中的图片--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"bannerPointDrawableUnselected"</span> <span class="attr">format</span>=<span class="string">"reference"</span> /&gt;</span></div><div class="line">        <span class="comment">&lt;!--轮播图循环时间，单位秒--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"bannerDelaySecond"</span> <span class="attr">format</span>=<span class="string">"integer"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">declare-styleable</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></div></pre></td></tr></table></figure></p><h1 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h1><p>xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">com.wuxiaolong.bannersample.BannerLayout</span></span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/bannerView"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"198dp"</span></div><div class="line">    <span class="attr">app:bannerDelaySecond</span>=<span class="string">"3"</span></div><div class="line">    <span class="attr">app:bannerPointDrawableSelected</span>=<span class="string">"@drawable/gray_radius"</span></div><div class="line">    <span class="attr">app:bannerPointDrawableUnselected</span>=<span class="string">"@drawable/white_radius"</span></div><div class="line">    <span class="attr">app:bannerPointGravity</span>=<span class="string">"right"</span></div><div class="line">    <span class="attr">app:bannerPointSize</span>=<span class="string">"10dp"</span> /&gt;</div></pre></td></tr></table></figure></p><p>调用：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> BannerLayout bannerView;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        bannerView = (BannerLayout) findViewById(R.id.bannerView);</div><div class="line">        List&lt;Object&gt; bannerList = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        bannerList.add(R.mipmap.horizontal_default);</div><div class="line">        bannerList.add(<span class="string">"http://pic1.win4000.com/wallpaper/5/598161750eddb.jpg"</span>);</div><div class="line">        bannerList.add(<span class="string">"http://pic1.win4000.com/wallpaper/4/597efb5b6aae8.jpg"</span>);</div><div class="line">        bannerView.setBannerPointSize(<span class="number">10</span>);</div><div class="line">        bannerView.setBannerPointGravity(Gravity.CENTER);</div><div class="line">        bannerView.setBannerPointDrawableSelected(R.drawable.gray_radius);</div><div class="line">        bannerView.setBannerPointDrawableUnselected(R.mipmap.point01);</div><div class="line">        bannerView.setBannerDelaySecond(<span class="number">5</span>);</div><div class="line">        <span class="comment">//banner 设置方法完毕时最后调用 start 方法</span></div><div class="line">        bannerView.start(bannerList);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onStop</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onStop();</div><div class="line">        bannerView.bannerShutdown();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>如果以上还满足不了你的需求，可以使用 GitHub上的库 <a href="https://github.com/youth5201314/banner" target="_blank" rel="noopener">banner</a>，它丰富了 pointLayout，可能是文字，它还依赖了<a href="https://github.com/ToxicBakery/ViewPagerTransforms" target="_blank" rel="noopener">ViewPagerTransforms</a>，因此 ViewPager 切换有各种炫酷效果，不过我觉得有些多余，主要还是轮播。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;漏洞百出&quot;&gt;&lt;a href=&quot;#漏洞百出&quot; class=&quot;headerlink&quot; title=&quot;漏洞百出&quot;&gt;&lt;/a&gt;漏洞百出&lt;/h1&gt;&lt;p&gt;轮播图是 Android 常用功能之一，效果大概是这样的：&lt;br&gt;
    
    </summary>
    
      <category term="Banner" scheme="http://wuxiaolong.me/categories/Banner/"/>
    
    
      <category term="Banner" scheme="http://wuxiaolong.me/tags/Banner/"/>
    
  </entry>
  
  <entry>
    <title>Android 组件化探索与思考</title>
    <link href="http://wuxiaolong.me/2017/08/01/ModularExploree/"/>
    <id>http://wuxiaolong.me/2017/08/01/ModularExploree/</id>
    <published>2017-08-01T04:39:55.000Z</published>
    <updated>2018-10-15T13:58:15.844Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>开发中，我习惯性会把一个模块的功能放在一个包下，便于查找，但烦于耦合性太高，后期维护太费劲，因此对项目进行组件化拆分势在必行。组件化好处：便于开发，团队成员只关注自己的开发的小模块，降低耦合性，后期维护方便等。相当于先有很多小组件，各自开发，最后组装，成一个 app。<br><a id="more"></a></p><h2 id="关系图"><a href="#关系图" class="headerlink" title="关系图"></a>关系图</h2><p><img src="http://wuxiaolong.github.io/images/ModularSample.png" alt=""><br>app：壳工程；<br>module1：组件1；<br>module2：组件2；<br>resource：专门放资源文件；<br>router：路由，所有页面请求都由它中转；<br>common：第三方库，公用工具、自定义 View等。</p><h2 id="效果预览"><a href="#效果预览" class="headerlink" title="效果预览"></a>效果预览</h2><p><img src="http://wuxiaolong.github.io/images/ModularSample.gif" alt=""><br>组件化过程很容易想到一些问题，比如 module1 我想单独调试怎么做？module1 有页面需要跳转到module2怎么办等。接下来，我一一探索，提供解决方案。</p><h1 id="全局设置-Gradle"><a href="#全局设置-Gradle" class="headerlink" title="全局设置 Gradle"></a>全局设置 Gradle</h1><p>如果有很多项目，可以设置全局来统一管理版本号或依赖库，这样就不用一个个去改了，根目录下 build.gradle 添加：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">def androidSupportVersion = <span class="string">'27.1.0'</span></div><div class="line"></div><div class="line">ext &#123;</div><div class="line">    <span class="comment">//编译的 SDK 版本，如API20</span></div><div class="line">    compileSdkVersion = <span class="number">27</span></div><div class="line">    <span class="comment">//构建工具的版本，其中包括了打包工具aapt、dx等,如API20对应的build-tool的版本就是20.0.0</span></div><div class="line">    <span class="comment">//buildToolsVersion = "26.0.0"</span></div><div class="line">    <span class="comment">//兼容的最低 SDK 版本</span></div><div class="line">    minSdkVersion = <span class="number">14</span></div><div class="line">    <span class="comment">//向前兼容，保存新旧两种逻辑，并通过 if-else 方法来判断执行哪种逻辑</span></div><div class="line">    targetSdkVersion = <span class="number">27</span></div><div class="line">    appcompatV7 = <span class="string">"com.android.support:appcompat-v7:$androidSupportVersion"</span></div><div class="line">    constraintLayout = <span class="string">'com.android.support.constraint:constraint-layout:1.0.2'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>其中module/build.gradle：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">android &#123;</div><div class="line">    compileSdkVersion rootProject.ext.compileSdkVersion</div><div class="line">    buildToolsVersion rootProject.ext.buildToolsVersion</div><div class="line">    <span class="comment">//……</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h1 id="资源名重名"><a href="#资源名重名" class="headerlink" title="资源名重名"></a>资源名重名</h1><p>每个 module 都有 app<em>name，为了不让资源名重名，可以在每个组件的 build.gradle 中增加 resourcePrefix “xxx</em>“，固定每个组件的资源前缀。但是 resourcePrefix 这个值只能限定 xml 里面的资源，并不能限定图片资源，所有图片资源仍然需要你手动去修改资源名。<del>不过我更建议把图片、 strings、 colors、dimens 等资源放到 common 去，可以防止不同的资源名字却对应了同一资源值。<br>为什么叫 common，任何项目都能用，开发中发现把资源文件放在 common 明显不合理，专门建了个 resource 放资源文件，因此 resourcePrefix “xxx_” 也变得意义不大了。另外各个 module 中的 layout 的名字可能一样，其实我们按照一个规则来，比如只有一个 MainActivity，自然对应的 layout 名不一样。</del><br>PS：我最后还是用的前一种方案，这里是要权衡资源有可能重复还是能让每个模块都能独立运行资源更加清晰？</p><h1 id="组件单独调试"><a href="#组件单独调试" class="headerlink" title="组件单独调试"></a>组件单独调试</h1><h2 id="application-与-library-切换"><a href="#application-与-library-切换" class="headerlink" title="application 与 library 切换"></a>application 与 library 切换</h2><p>module1 在开发阶段应该 application，等 release 后才是 library，这里可以设置一个变量控制下，在根项目 gradle.properties 加入：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># 组件单独调试开关，true 可以，false 不可以，需要点击 "Sync Project"。</div><div class="line">isDebug=false</div></pre></td></tr></table></figure></p><p>module1/build.gradle：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (isDebug.toBoolean()) &#123;</div><div class="line">    apply plugin: <span class="string">'com.android.application'</span></div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    apply plugin: <span class="string">'com.android.library'</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">android &#123;</div><div class="line">    <span class="comment">//……    </span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="applicationId"><a href="#applicationId" class="headerlink" title="applicationId"></a>applicationId</h2><p>开发阶段，module1 还必须有个 applicationId：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">android &#123;</div><div class="line">     <span class="comment">//……</span></div><div class="line">    defaultConfig &#123;</div><div class="line">        <span class="comment">// 作为library时不能有applicationId,只有作为一个独立应用时才能够如下设置</span></div><div class="line">        <span class="keyword">if</span> (isDebug.toBoolean())&#123;</div><div class="line">            applicationId <span class="string">"com.wuxiaolong.module1"</span></div><div class="line">        &#125;</div><div class="line">        <span class="comment">//……</span></div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="入口类"><a href="#入口类" class="headerlink" title="入口类"></a>入口类</h2><p>到这里还不行，还得有 AndroidManifest 设置入口类，release 后这个 AndroidManifest 不需要打包进去，新建文件 debug，然后在 build.gradle 指定路径：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">android &#123;</div><div class="line">    <span class="comment">//……  </span></div><div class="line">    sourceSets &#123;</div><div class="line">        main &#123;</div><div class="line">            <span class="keyword">if</span> (isDebug.toBoolean()) &#123;</div><div class="line">                manifest.srcFile <span class="string">'src/main/debug/AndroidManifest.xml'</span></div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                manifest.srcFile <span class="string">'src/main/release/AndroidManifest.xml'</span></div><div class="line">                java &#123;</div><div class="line">                    <span class="comment">//release 时 debug 目录下文件不需要合并到主工程</span></div><div class="line">                    exclude <span class="string">'debug/**'</span></div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>另外，module 可能会需要使用到自定义的 Application，release 同样也不需要打包进去，不然合并会有冲突。</p><h1 id="组件间通信"><a href="#组件间通信" class="headerlink" title="组件间通信"></a>组件间通信</h1><p>组件间通信包括两个场景：（1）UI 跳转；（2）调用组件某个类的某个方法。<br>这里涉及路由，何为路由，就是页面请求，都交给它处理。网上有很多路由库，我这里选的是阿里的 <a href="https://github.com/alibaba/ARouter" target="_blank" rel="noopener">ARouter</a>，ARouter 能解决上面的问题，但是也遗留一个问题，我独立运行 module1 时，想访问 module2 页面就做不到了，Router 不支持跨进程访问，这个问题待定，也可能是我使用 ARouter 姿势不对，如果您能做到，望告知。</p><h2 id="ARouter-使用"><a href="#ARouter-使用" class="headerlink" title="ARouter 使用"></a>ARouter 使用</h2><p>1、common<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">    <span class="comment">//arouter</span></div><div class="line">    compile rootProject.ext.arouterApi</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>2、组件<br>app 和 module 都需要加入：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">android &#123;</div><div class="line">    defaultConfig &#123;</div><div class="line">        <span class="comment">//arouter</span></div><div class="line">        javaCompileOptions &#123;</div><div class="line">            annotationProcessorOptions &#123;</div><div class="line">                arguments = [moduleName: project.getName()]</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">dependencies &#123;</div><div class="line">    <span class="comment">//arouter</span></div><div class="line">    annotationProcessor rootProject.ext.arouterCompiler</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>3、使用<br>sample 列出了组件跳转、组件跳转-带参数、获取 Frgment、调用组件某个类的使用方法，详见我的 GitHub 分享。<br>ARouter 详细使用请阅读 <a href="https://github.com/alibaba/ARouter" target="_blank" rel="noopener">ARouter</a>，不得不吐槽，文档写的不是一般的烂。</p><h1 id="library-重复依赖"><a href="#library-重复依赖" class="headerlink" title="library 重复依赖"></a>library 重复依赖</h1><p>module1 和 module2 分别都依赖了 common，会不会导致 library 重复依赖呢，想必大家也有这个疑问了，实际上在 release 构建 APP 的过程中 Gradle 会自动将重复的 aar 包排除，APP 中也就不会存在相同的代码了，可以打包反编译验证下，我试了，确实没有重复依赖。</p><h1 id="ButterKnife"><a href="#ButterKnife" class="headerlink" title="ButterKnife"></a>ButterKnife</h1><h2 id="Attribute-value-must-be-constant"><a href="#Attribute-value-must-be-constant" class="headerlink" title="Attribute value must be constant"></a>Attribute value must be constant</h2><p>在 Android Studio 的 library 的 module 中无法使用 ButterKnife。<br>网上说用 R2 替代（为什么能用 R2？），但都没有说 R2 怎么生成的？这篇<a href="http://www.see-source.com/blog/300000113/1324.html" target="_blank" rel="noopener">《butterknife在library中使用问题处理》</a>文章说使用 android-apt，确实可行，但是带来一个新坑，发现 apply plugin: ‘android-apt’ 与 arouter 冲突，这时候 arouter 失效了。正确姿势，用 Android ButterKnife Zelezny 插件生成，手动改成 R2，clean 下就 OK，感谢群里的小伙伴提示。</p><h2 id="OnClick-方法"><a href="#OnClick-方法" class="headerlink" title="OnClick 方法"></a>OnClick 方法</h2><p>ButterKnife 还有个坑，OnClick 方法中同样使用 R2，但是找 id 的时候使用 R，然而 library 中是不能使用 switch- case 找 id 的（原因：<a href="http://www.jianshu.com/p/89687f618837" target="_blank" rel="noopener">《在Android library中不能使用switch-case语句访问资源ID的原因分析及解决方案》</a>），可以使用 if-else：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@OnClick</span>(&#123;R2.id.module1_button, R2.id.module1_button2&#125;)</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onViewClicked</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">      <span class="keyword">int</span> id = view.getId();</div><div class="line">      Log.d(<span class="string">"wxl"</span>,<span class="string">"id="</span>+id);</div><div class="line">      <span class="keyword">if</span> (id == R.id.module1_button) &#123;</div><div class="line">          toastShow(<span class="string">"module1_button"</span>);</div><div class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (id == R.id.module1_button2) &#123;</div><div class="line">          toastShow(<span class="string">"module1_button2"</span>);</div><div class="line">      &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p><p>当你写 switch- case 时，Android Studio 也有提示，可以一键转换成 if-else。</p><h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><p><a href="https://github.com/WuXiaolong/ModularSample" target="_blank" rel="noopener">https://github.com/WuXiaolong/ModularSample</a></p><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><ul><li>撸了一次组件化，感觉自己好菜比，好多东西还需要学习，遗留：（1）、每个 module 的配置最好有个固定模版，这样新建 module 就不用一一配置了；（2）、关于注解与依赖注入，不明不白，导致组件间通信花费了太多时间，后续要系统学习下这块知识。</li><li>组件单独运行有个弊端，比如 userId 很多模块都需要用到，单独运行肯定拿不到，目前的做法是将这个 userId 先写死，这是组件化带来的问题。</li><li>业务无关的组件，比如分享，可以单独出来，其他项目都是能用的，这不就是 umeng 分享了吗？</li><li>可能还有未知的坑，大家可以 Star <a href="https://github.com/WuXiaolong/ModularSample" target="_blank" rel="noopener">ModularSample</a>，我会持续更新。</li><li>网上组件化文章不少，但优秀的文章屈指可数，很多只是讲组件化思想，点到即止，最讨厌这种半藏着半掖式分享，感觉他们在耍流氓。对于那些无私愿意分享的人，我一直都是很钦佩的，因为有他们，让我们这些后人在开发的路上不孤单无助。</li><li>熟悉我的朋友，可能知道我在无锡，二线城市，总感觉技术很落后，所以我一直要保持学习，不知道组件化是不是在大城市在项目中运用很普遍？据说所知，无锡组件化用的很少，理论上在一线城市会处在技术前沿。</li><li>很多朋友说我文章总是会一个难点讲的通俗易懂，其实不知道我在易懂的背后做了多少实践做支撑，实践得真理，我是相信这句话的。</li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="http://blog.csdn.net/guiying712/article/details/55213884" target="_blank" rel="noopener">Android组件化方案</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;开发中，我习惯性会把一个模块的功能放在一个包下，便于查找，但烦于耦合性太高，后期维护太费劲，因此对项目进行组件化拆分势在必行。组件化好处：便于开发，团队成员只关注自己的开发的小模块，降低耦合性，后期维护方便等。相当于先有很多小组件，各自开发，最后组装，成一个 app。&lt;br&gt;
    
    </summary>
    
      <category term="Modular" scheme="http://wuxiaolong.me/categories/Modular/"/>
    
    
      <category term="Modular" scheme="http://wuxiaolong.me/tags/Modular/"/>
    
  </entry>
  
  <entry>
    <title>Mac 配置 adb 环境、gradlew：command not found</title>
    <link href="http://wuxiaolong.me/2017/07/19/mac-adb-gradlew/"/>
    <id>http://wuxiaolong.me/2017/07/19/mac-adb-gradlew/</id>
    <published>2017-07-19T12:17:30.000Z</published>
    <updated>2017-12-04T06:44:22.710Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>今年 6 月 15 日，我痛下决心，买了心仪已久的 MacBook Pro，《<a href="http://mp.weixin.qq.com/s/AXobpEbNEbhLLGzeQTrrrg" target="_blank" rel="noopener">2017 款 MacBook Pro 初体验</a>》，Mac 小白，这篇文章是踩坑后的记录，也将持续记录，好记忆真不如烂笔头，现在会设置了，一个月过后呢，而且我年纪也大了。</p></blockquote><a id="more"></a><h1 id="配置-adb-环境"><a href="#配置-adb-环境" class="headerlink" title="配置 adb 环境"></a>配置 adb 环境</h1><p>windows 下安装 apk，可能直接点击应用宝就安装了，Mac  没有应用宝，因为只能用 adb 命令行安装，却发现 adb 命令行找不到，算了，搁置了几天，之后安装 APK 很是麻烦，又不能拷到 SD 卡上，最终还是 Google，解决了这个问题。</p><h2 id="在命令行下，进入用户目录"><a href="#在命令行下，进入用户目录" class="headerlink" title="在命令行下，进入用户目录"></a>在命令行下，进入用户目录</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cd $HOME</div></pre></td></tr></table></figure><h2 id="bash-profile文件"><a href="#bash-profile文件" class="headerlink" title=".bash_profile文件"></a>.bash_profile文件</h2><p>输入下行命令获取当前文件列表：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ls -al</div></pre></td></tr></table></figure></p><p>查看文件列表，如果文件已经存在，则进行下一步。如果没有 .bash_profile 文件，执行以下命令新建：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">touch .bash_profile</div></pre></td></tr></table></figure></p><h2 id="打开-bash-profile文件"><a href="#打开-bash-profile文件" class="headerlink" title="打开.bash_profile文件"></a>打开.bash_profile文件</h2><p>执行下行命令打开文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">open -e .bash_profile</div></pre></td></tr></table></figure></p><p>说明：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">open .bash_profile：打开文件</div><div class="line">touch .bash_profile：如果文件不存在就创建文件</div><div class="line">open -e bash_profile：编辑文件</div></pre></td></tr></table></figure><p>打开文件后，添加 sdk 的安装路径，如果你是安装的 Android Studio 而且没有手动去变换路径的话，直接复制下面两行命令后将用户名改为自己电脑的即可。如果自己修改了路径，则找到 /Android/sdk/platform-tools 和 /Android/sdk/tools 的路径，替换即可。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">export PATH=$&#123;PATH&#125;:/Users/用户名/Library/Android/sdk/platform-tools</div><div class="line">export PATH=$&#123;PATH&#125;:/Users/用户名/Library/Android/sdk/tools</div></pre></td></tr></table></figure></p><h2 id="更新刚配置的环境变量"><a href="#更新刚配置的环境变量" class="headerlink" title="更新刚配置的环境变量"></a>更新刚配置的环境变量</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">source .bash_profile</div></pre></td></tr></table></figure><h2 id="查看配置结果"><a href="#查看配置结果" class="headerlink" title="查看配置结果"></a>查看配置结果</h2><p>命令行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb version</div></pre></td></tr></table></figure></p><p>显示 adb 版本号即为设置成功：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Android Debug Bridge version 1.0.39</div><div class="line">Revision 3db08f2c6889-android</div></pre></td></tr></table></figure></p><h2 id="查看所有的配置路径"><a href="#查看所有的配置路径" class="headerlink" title="查看所有的配置路径"></a>查看所有的配置路径</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">echo $PATH</div></pre></td></tr></table></figure><h1 id="gradlew-command-not-found"><a href="#gradlew-command-not-found" class="headerlink" title="gradlew: command not found"></a>gradlew: command not found</h1><h2 id="问题1"><a href="#问题1" class="headerlink" title="问题1"></a>问题1</h2><p>今天我想用命令行 gradlew assembleRelease 来打个 aar 文件出来，结果报：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bash: gradlew: command not found</div></pre></td></tr></table></figure></p><h2 id="问题2"><a href="#问题2" class="headerlink" title="问题2"></a>问题2</h2><p>Google，原来 Mac 需要前面加 ./，结果又报新的错误：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bash: ./gradlew: Permission denied</div></pre></td></tr></table></figure></p><p>貌似没有权限，再次 Google，网上都在说，尝试在 gradlew 文件上设置执行标志：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chmod +x gradlew</div></pre></td></tr></table></figure></p><p>却没说在那里设置，哪有gradlew 文件啊？实际在 Android Studio  的 Terminal 设置。</p><p>除掉这个标志，直接 -。</p><h2 id="问题3"><a href="#问题3" class="headerlink" title="问题3"></a>问题3</h2><p>env: bash\r: No such file or directory</p><p>在mac环境中运行 ./gradlew 命令出现 env: bash\r: No such file or directory</p><p>原因：该项目创建很久了，该gradlew太旧了，复制一个 gradlew 文件过来即可</p><h2 id="问题4"><a href="#问题4" class="headerlink" title="问题4"></a>问题4</h2><p>到这里，你以为就能运行了吗，No，这时候继续报错：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">No Java runtime present, requesting install.</div></pre></td></tr></table></figure></p><p>是啊，我安装 Android Studio，运行，居然可以，不用安装 JDK 吗，当时还想 Mac 这么好，JDK 都自带了，那为什么现在提示需要安装 JDK 呢，我看了项目的 JDK 路径，原来 Mac 版 Android Studio 已经自带 JDK 了，难道需要配置下 JDK 环境？Google Mac JDK环境配置，网上教程，都是配置另外安装的 JDK，我需要配置 Android Studio 下 JDK。<br>按照上面的 adb 环境配置步骤，打开 .bash_profile，添加如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">#jdk安装路径   </div><div class="line">export JAVA_HOME=/Applications/Android\ Studio.app/Contents/jre/jdk/Contents/Home </div><div class="line">export PATH=$JAVA_HOME/bin:$PATH</div></pre></td></tr></table></figure></p><p>注意：目录 Android Studio 有空格，搜到 stackoverflow，加了\。</p><p>执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java -version</div></pre></td></tr></table></figure></p><p>返回如下，说明配置成功：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">openjdk version &quot;1.8.0_112-release&quot;</div><div class="line">OpenJDK Runtime Environment (build 1.8.0_112-release-b06)</div><div class="line">OpenJDK 64-Bit Server VM (build 25.112-b06, mixed mode)</div></pre></td></tr></table></figure></p><p>这样配置完毕，命令行 gradlew assembleRelease 正常执行，解决之。</p><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>问题一个接着一个，我都不想搞了，但一直以来，一个经验告诉我，遇到问题，不回避，解决才是王道，现在不解决，下次再遇到，还是回避不了。其实这些问题前人都遇到过，感谢他们无私分享，让我们遇到问题不再无助，不觉得孤独。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="http://answerzhao.github.io/2016/09/15/mac%E4%B8%8Badb%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%92%8C%E5%B8%B8%E7%94%A8adb%E5%91%BD%E4%BB%A4/" target="_blank" rel="noopener">mac下adb环境配置和常用adb命令</a></p><p><a href="https://gxnotes.com/article/33908.html" target="_blank" rel="noopener">gradlew：权限被拒绝</a></p><p><a href="http://www.cnblogs.com/havenshen/p/3490448.html" target="_blank" rel="noopener">mac OS X 10.9.1 配置jdk环境变量</a></p><p><a href="https://stackoverflow.com/questions/43211282/using-jdk-that-is-bundled-inside-android-studio-as-java-home-on-mac" target="_blank" rel="noopener">Using JDK that is bundled inside Android Studio as JAVA_HOME on Mac</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;今年 6 月 15 日，我痛下决心，买了心仪已久的 MacBook Pro，《&lt;a href=&quot;http://mp.weixin.qq.com/s/AXobpEbNEbhLLGzeQTrrrg&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;2017 款 MacBook Pro 初体验&lt;/a&gt;》，Mac 小白，这篇文章是踩坑后的记录，也将持续记录，好记忆真不如烂笔头，现在会设置了，一个月过后呢，而且我年纪也大了。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Mac" scheme="http://wuxiaolong.me/categories/Mac/"/>
    
    
      <category term="Mac" scheme="http://wuxiaolong.me/tags/Mac/"/>
    
      <category term="adb" scheme="http://wuxiaolong.me/tags/adb/"/>
    
      <category term="gradlew" scheme="http://wuxiaolong.me/tags/gradlew/"/>
    
  </entry>
  
  <entry>
    <title>Kotlin for Android（四）Retrofit + RxJava</title>
    <link href="http://wuxiaolong.me/2017/06/03/kotlin4/"/>
    <id>http://wuxiaolong.me/2017/06/03/kotlin4/</id>
    <published>2017-06-03T14:14:11.000Z</published>
    <updated>2017-06-03T14:48:02.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>如果您之前学习 Android MVP ，很可能是从 AndroidMVPSample<br>(<a href="https://github.com/WuXiaolong/AndroidMVPSample" target="_blank" rel="noopener">https://github.com/WuXiaolong/AndroidMVPSample</a> )开始的，此Sample最初是 Android MVP 示例，后来融合 Retrofit 和 RxJava，分别演示了普通写法(Retrofit)、普通写法(Retrofit+Rxjava)、MVP+Retrofit+Rxjava，跟它一样，我写了 Kotlin 版 Retrofit +RxJava 来练手，还是以天气示例。</p></blockquote><a id="more"></a><h1 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h1><p>build.gradle<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">buildscript &#123;</div><div class="line">    ext.kotlin_version = <span class="string">'1.1.2-4'</span></div><div class="line">    ext.retrofit_version = <span class="string">'2.0.2'</span></div><div class="line">    ext.rxkotlin_version = <span class="string">'0.60.0'</span></div><div class="line">    ext.rxandroid_version = <span class="string">'1.2.1'</span></div><div class="line"></div><div class="line">    dependencies &#123;</div><div class="line">        classpath <span class="string">'com.android.tools.build:gradle:2.3.1'</span></div><div class="line">        <span class="comment">//编译 Kotlin 源代码和模块.</span></div><div class="line">        classpath <span class="string">"org.jetbrains.kotlin:kotlin-gradle-plugin:<span class="variable">$kotlin_version</span>"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>app/build.gradle<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"> apply plugin: <span class="string">'com.android.application'</span></div><div class="line">apply plugin: <span class="string">'kotlin-android'</span></div><div class="line"></div><div class="line">android &#123;</div><div class="line">    <span class="comment">//……</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">dependencies &#123;</div><div class="line">    </div><div class="line">    <span class="comment">//针对 JDK 7 或 JDK 8</span></div><div class="line">    compile <span class="string">"org.jetbrains.kotlin:kotlin-stdlib-jre7:<span class="variable">$kotlin_version</span>"</span></div><div class="line">    </div><div class="line">    <span class="comment">//Retrofit</span></div><div class="line">    compile <span class="string">"com.squareup.retrofit2:retrofit:<span class="variable">$retrofit_version</span>"</span></div><div class="line">    compile <span class="string">"com.squareup.okhttp3:logging-interceptor:<span class="variable">$logging_interceptor_version</span>"</span></div><div class="line">    compile <span class="string">"com.squareup.retrofit2:converter-gson:<span class="variable">$retrofit_version</span>"</span></div><div class="line">    compile <span class="string">"com.squareup.retrofit2:adapter-rxjava:<span class="variable">$retrofit_version</span>"</span></div><div class="line">   </div><div class="line">    <span class="comment">//RxJava</span></div><div class="line">    compile <span class="string">"io.reactivex:rxkotlin:<span class="variable">$rxkotlin_version</span>"</span></div><div class="line">    compile <span class="string">"io.reactivex:rxandroid:<span class="variable">$rxandroid_version</span>"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h1 id="网络权限"><a href="#网络权限" class="headerlink" title="网络权限"></a>网络权限</h1><p>AndroidManifest.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.INTERNET"</span> /&gt;</span></div></pre></td></tr></table></figure></p><h1 id="WeatherinfoModel"><a href="#WeatherinfoModel" class="headerlink" title="WeatherinfoModel"></a>WeatherinfoModel</h1><p>天气接口：<a href="http://www.weather.com.cn/adat/sk/101190201.html" target="_blank" rel="noopener">http://www.weather.com.cn/adat/sk/101190201.html</a><br>当我们使用 Gson 来解析 json 到我们的类中，这些属性的名字必须要与json中的名字一样，哎，我又忘记这点，因此浪费了很多时间排错。<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">WeatherinfoModel</span> <span class="keyword">constructor</span></span>(<span class="keyword">val</span> weatherinfo: WeatherinfoBean) &#123;</div><div class="line"></div><div class="line">    <span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">WeatherinfoBean</span></span>(</div><div class="line">            <span class="keyword">val</span> city: String,</div><div class="line">            <span class="keyword">val</span> cityid: String</div><div class="line">    )</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h1 id="ApiStores"><a href="#ApiStores" class="headerlink" title="ApiStores"></a>ApiStores</h1><p>网络请求 url 都放这里:<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">ApiStores</span> </span>&#123;</div><div class="line">    <span class="keyword">companion</span> <span class="keyword">object</span> &#123;</div><div class="line">        <span class="comment">//baseUrl</span></div><div class="line">        <span class="keyword">val</span> API_SERVER_URL = <span class="string">"http://www.weather.com.cn/"</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//加载天气</span></div><div class="line">    <span class="meta">@GET(<span class="meta-string">"adat/sk/&#123;cityId&#125;.html"</span>)</span></div><div class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">loadData</span><span class="params">(<span class="meta">@Path(<span class="meta-string">"cityId"</span>)</span> cityId: <span class="type">String</span>)</span></span>: Observable&lt;WeatherinfoModel&gt;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h1 id="ApiClient"><a href="#ApiClient" class="headerlink" title="ApiClient"></a>ApiClient</h1><p>Retrofit 初始化、配置：<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//object声明单例模式</span></div><div class="line"><span class="keyword">object</span> ApiClient &#123;</div><div class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">retrofit</span><span class="params">()</span></span>: ApiStores &#123;</div><div class="line">        <span class="keyword">val</span> builder = OkHttpClient.Builder()</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (BuildConfig.DEBUG) &#123;</div><div class="line">            <span class="comment">// Log信息拦截器</span></div><div class="line">            <span class="keyword">val</span> loggingInterceptor = HttpLoggingInterceptor()</div><div class="line">            loggingInterceptor.level = HttpLoggingInterceptor.Level.BODY</div><div class="line">            <span class="comment">//设置 Debug Log 模式</span></div><div class="line">            builder.addInterceptor(loggingInterceptor)</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">val</span> okHttpClient = builder.build()</div><div class="line">        <span class="keyword">val</span> retrofit = Retrofit.Builder()</div><div class="line">                .baseUrl(ApiStores.API_SERVER_URL)</div><div class="line">                .addConverterFactory(GsonConverterFactory.create())</div><div class="line">                .addCallAdapterFactory(RxJavaCallAdapterFactory.create())</div><div class="line">                .client(okHttpClient)</div><div class="line">                .build()</div><div class="line">        <span class="comment">//ApiStores::class.java取得对象的 Java 类</span></div><div class="line">        <span class="keyword">return</span> retrofit.create(ApiStores::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>)</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h1 id="ApiCallback"><a href="#ApiCallback" class="headerlink" title="ApiCallback"></a>ApiCallback</h1><p>还是做了回调：<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ApiCallback</span>&lt;<span class="type">M</span>&gt; : <span class="type">Subscriber</span>&lt;<span class="type">M</span>&gt;</span>() &#123;</div><div class="line">    <span class="keyword">abstract</span> <span class="function"><span class="keyword">fun</span> <span class="title">onSuccess</span><span class="params">(model: <span class="type">M</span>)</span></span></div><div class="line">    <span class="keyword">abstract</span> <span class="function"><span class="keyword">fun</span> <span class="title">onFailure</span><span class="params">(msg: <span class="type">String</span>?)</span></span></div><div class="line">    <span class="keyword">abstract</span> <span class="function"><span class="keyword">fun</span> <span class="title">onFinish</span><span class="params">()</span></span></div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCompleted</span><span class="params">()</span></span> &#123;</div><div class="line">        onFinish()</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onNext</span><span class="params">(m: <span class="type">M</span>)</span></span> &#123;</div><div class="line">        onSuccess(m)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onError</span><span class="params">(e: <span class="type">Throwable</span>?)</span></span> &#123;</div><div class="line">        <span class="comment">//这块应该可以优化 </span></div><div class="line">        <span class="keyword">if</span> (e <span class="keyword">is</span> HttpException) &#123;</div><div class="line">            <span class="keyword">val</span> httpException = e</div><div class="line">            <span class="comment">//httpException.response().errorBody().string()</span></div><div class="line">            <span class="keyword">val</span> code = httpException.code()</div><div class="line">            <span class="keyword">var</span> msg = httpException.message</div><div class="line">            Log.d(<span class="string">"wxl"</span>, <span class="string">"code="</span> + code)</div><div class="line">            <span class="keyword">if</span> (code == <span class="number">504</span>) &#123;</div><div class="line">                msg = <span class="string">"网络不给力"</span></div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (code == <span class="number">502</span> || code == <span class="number">404</span>) &#123;</div><div class="line">                msg = <span class="string">"服务器异常，请稍后再试"</span></div><div class="line">            &#125;</div><div class="line">            onFailure(msg)</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            onFailure(e.toString())</div><div class="line">        &#125;</div><div class="line">        onFinish()</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h1 id="BaseActivity"><a href="#BaseActivity" class="headerlink" title="BaseActivity"></a>BaseActivity</h1><p>建了基类，可以把一些公用的方法放到这里，方便：<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseActivity</span> : <span class="type">AppCompatActivity</span></span>() &#123;</div><div class="line">    <span class="keyword">val</span> mCompositeSubscription: CompositeSubscription = CompositeSubscription()</div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onDestroy</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">if</span> (mCompositeSubscription.hasSubscriptions()) &#123;</div><div class="line">            <span class="comment">//取消注册，以避免内存泄露</span></div><div class="line">            mCompositeSubscription.unsubscribe()</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">super</span>.onDestroy()</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">open</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;M&gt;</span> <span class="title">addSubscription</span><span class="params">(observable: <span class="type">Observable</span>&lt;<span class="type">M</span>&gt;, subscriber: <span class="type">Subscriber</span>&lt;<span class="type">M</span>&gt;)</span></span> &#123;</div><div class="line">        mCompositeSubscription.add(</div><div class="line">                observable.subscribeOn(Schedulers.io())</div><div class="line">                        .observeOn(AndroidSchedulers.mainThread())</div><div class="line">                        .subscribe(subscriber))</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h1 id="MainActivity"><a href="#MainActivity" class="headerlink" title="MainActivity"></a>MainActivity</h1><p>请求接口：<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//冒号表示继承</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> : <span class="type">BaseActivity</span></span>() &#123;</div><div class="line">    <span class="comment">//问号表示该变量可以为空</span></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</div><div class="line">        setContentView(R.layout.activity_main)</div><div class="line"></div><div class="line">        <span class="comment">//object为对象表达式</span></div><div class="line">        addSubscription(ApiClient.retrofit().loadData(<span class="string">"101190201"</span>), <span class="keyword">object</span> : ApiCallback&lt;WeatherinfoModel&gt;() &#123;</div><div class="line">            <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onSuccess</span><span class="params">(model: <span class="type">WeatherinfoModel</span>)</span></span> &#123;</div><div class="line">                Log.d(<span class="string">"wxl"</span>, <span class="string">"city="</span> + model.weatherinfo.city + <span class="string">",cityid="</span> + model.weatherinfo.cityid)<span class="comment">//输出“city=无锡,cityid=101190201”</span></div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onFailure</span><span class="params">(msg: <span class="type">String</span>?)</span></span> &#123;</div><div class="line">                Log.d(<span class="string">"wxl"</span>, <span class="string">"onFailure="</span> + msg)</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onFinish</span><span class="params">()</span></span> &#123;</div><div class="line">                Log.d(<span class="string">"wxl"</span>, <span class="string">"onFinish"</span>)</div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://medium.com/@juanchosaravia/keddit-part-6-api-retrofit-kotlin-d309074af0" target="_blank" rel="noopener">Keddit — Part 6: API — Retrofit &amp; Kotlin</a></p><p><a href="http://mio4kon.com/2016/08/17/Kotlin%20for%20Android%E5%AE%9E%E8%B7%B5/" target="_blank" rel="noopener">Kotlin for Android 实践</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;如果您之前学习 Android MVP ，很可能是从 AndroidMVPSample&lt;br&gt;(&lt;a href=&quot;https://github.com/WuXiaolong/AndroidMVPSample&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/WuXiaolong/AndroidMVPSample&lt;/a&gt; )开始的，此Sample最初是 Android MVP 示例，后来融合 Retrofit 和 RxJava，分别演示了普通写法(Retrofit)、普通写法(Retrofit+Rxjava)、MVP+Retrofit+Rxjava，跟它一样，我写了 Kotlin 版 Retrofit +RxJava 来练手，还是以天气示例。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Kotlin" scheme="http://wuxiaolong.me/categories/Kotlin/"/>
    
    
      <category term="Kotlin" scheme="http://wuxiaolong.me/tags/Kotlin/"/>
    
  </entry>
  
  <entry>
    <title>Kotlin for Android（三）类和对象</title>
    <link href="http://wuxiaolong.me/2017/06/01/kotlin3/"/>
    <id>http://wuxiaolong.me/2017/06/01/kotlin3/</id>
    <published>2017-06-01T14:40:28.000Z</published>
    <updated>2017-06-01T08:26:26.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>久等了，关于 Kotlin 的类和对象涉及的知识有点多，我又顺便练手写了 Kotlin 版 Retrofit +RxJava，近期整理一并分享出来。</p></blockquote><h1 id="类"><a href="#类" class="headerlink" title="类"></a>类</h1><p>使用 <strong>class</strong> 关键字声明类。<br><a id="more"></a><br>类声明由<strong>类名</strong>、<strong>类头</strong>（指定其类型参数、主构造函数等）和由大括号包围的<strong>类体</strong>构成。<br>一个类可以有一个主构造函数和一个或多个次构造函数。</p><h2 id="主构造函数"><a href="#主构造函数" class="headerlink" title="主构造函数"></a>主构造函数</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//类名:WeatherinfoModel</span></div><div class="line"><span class="comment">//主构造函数:constructor(val weatherinfo: WeatherinfoBean)</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">WeatherinfoModel</span> <span class="keyword">public</span> <span class="keyword">constructor</span></span>(<span class="keyword">val</span> weatherinfo: WeatherinfoBean) &#123;</div><div class="line">    <span class="comment">//类体</span></div><div class="line">    init &#123;</div><div class="line">        <span class="comment">//主构造函数不能包含任何的代码，</span></div><div class="line">        <span class="comment">//初始化的代码可以放到 init 块中</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>如果主构造函数没有任何注解或者可见性修饰符（private、 protected、 internal 和 public），可以省略这个 constructor 关键字。</p><h2 id="次构造函数"><a href="#次构造函数" class="headerlink" title="次构造函数"></a>次构造函数</h2><p>类也可以声明前缀有 constructor 的次构造函数：<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>(parent: Person) &#123;</div><div class="line">        parent.children.add(<span class="keyword">this</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="创建类的实例"><a href="#创建类的实例" class="headerlink" title="创建类的实例"></a>创建类的实例</h2><p>Kotlin 并没有 new 关键字，简单粗暴：<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> person = Person()</div></pre></td></tr></table></figure></p><h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><p>声明一个显式的父类：<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">Base</span> </span>&#123;</div><div class="line">    <span class="keyword">open</span> <span class="function"><span class="keyword">fun</span> <span class="title">v</span><span class="params">()</span></span> &#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>子类冒号继承，override 标注在子类中覆盖：<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> : <span class="type">Base &#123;</span></span></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">v</span><span class="params">()</span></span> &#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>如果类没有主构造函数，那么每个次构造函数必须 使用 super 关键字初始化其基类型：<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyView</span> : <span class="type">View &#123;</span></span></div><div class="line">    <span class="keyword">constructor</span>(ctx: Context) : <span class="keyword">super</span>(ctx)</div><div class="line"></div><div class="line">    <span class="keyword">constructor</span>(ctx: Context, attrs: AttributeSet) : <span class="keyword">super</span>(ctx, attrs)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h1 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h1><h2 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ApiCallback</span>&lt;<span class="type">M</span>&gt;</span>(m:M)&#123;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="泛型函数"><a href="#泛型函数" class="headerlink" title="泛型函数"></a>泛型函数</h2><p>类型参数要放在函数名称之前：<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="type">&lt;M&gt;</span> <span class="title">addSubscription</span><span class="params">(observable: <span class="type">Observable</span>&lt;<span class="type">M</span>&gt;, subscriber: <span class="type">Subscriber</span>&lt;<span class="type">M</span>&gt;)</span></span> &#123;</div><div class="line"><span class="comment">// ……</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h1 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h1><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ApiCallback</span>&lt;<span class="type">M</span>&gt; </span>&#123;</div><div class="line">    <span class="keyword">abstract</span> <span class="function"><span class="keyword">fun</span> <span class="title">onSuccess</span><span class="params">(model: <span class="type">M</span>)</span></span></div><div class="line">    <span class="keyword">abstract</span> <span class="function"><span class="keyword">fun</span> <span class="title">onFailure</span><span class="params">(msg: <span class="type">String</span>?)</span></span></div><div class="line">    <span class="keyword">abstract</span> <span class="function"><span class="keyword">fun</span> <span class="title">onFinish</span><span class="params">()</span></span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>1、抽象方法必须为 public 或者 protected，缺省情况下默认为 public；<br>2、抽象类不能用来创建对象；<br>3、如果一个类继承于一个抽象类，则子类必须实现父类的抽象方法。如果子类没有实现父类的抽象方法，则必须将子类也定义为为 abstract 类。如果抽象类中含有抽象属性，再实现子类中必须将抽象属性初始化，除非子类也为抽象类。</p><h2 id="抽象方法"><a href="#抽象方法" class="headerlink" title="抽象方法"></a>抽象方法</h2><p>1、抽象方法必须用 abstract 关键字进行修饰；<br>2、抽象方法默认被 open 修饰，可以不用手动添加 open；<br>3、抽象方法没有具体的实现；<br>4、含有抽象方法的类成为抽象类，必须由 abtract 关键字修饰。</p><h2 id="抽象属性"><a href="#抽象属性" class="headerlink" title="抽象属性"></a>抽象属性</h2><p>抽象属性就是在 var 或 val 前被 abstract 修饰。</p><h1 id="嵌套类"><a href="#嵌套类" class="headerlink" title="嵌套类"></a>嵌套类</h1><p>类里面可以嵌套在其他类：<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</div><div class="line">    <span class="keyword">val</span> a: String = <span class="string">"a"</span></div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</div><div class="line">        <span class="keyword">val</span> b: String = <span class="string">"b"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>访问：<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> a = A.B().b<span class="comment">//a输出为“b”</span></div></pre></td></tr></table></figure></p><p>如果想让类 B 能访问类 A 的成员，可以加 inner 标记：<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</div><div class="line">    <span class="keyword">val</span> a: String = <span class="string">"a"</span></div><div class="line"></div><div class="line">    inner <span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</div><div class="line">        <span class="keyword">val</span> b: String = a</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>访问：<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> a = A().B().b<span class="comment">//a输出为“a”</span></div></pre></td></tr></table></figure></p><h1 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h1><p>有时候，我们需要创建一个对某个类做轻微改动的类的对象，而不是为之显式声明新的子类。</p><h2 id="对象表达式"><a href="#对象表达式" class="headerlink" title="对象表达式"></a>对象表达式</h2><p>抽象类不能用来创建对象，可以创建一个继承自某个（或某些）类型的匿名内部类的对象:<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">ApiClient.retrofit().loadData(<span class="string">"101190201"</span>), <span class="keyword">object</span> : ApiCallback&lt;WeatherinfoModel&gt;() &#123;</div><div class="line">            <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onSuccess</span><span class="params">(model: <span class="type">WeatherinfoModel</span>)</span></span> &#123;</div><div class="line">                <span class="comment">//……</span></div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onFailure</span><span class="params">(msg: <span class="type">String</span>?)</span></span> &#123;</div><div class="line">                <span class="comment">//……</span></div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onFinish</span><span class="params">()</span></span> &#123;</div><div class="line">                <span class="comment">//……</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div></pre></td></tr></table></figure></p><h2 id="对象声明"><a href="#对象声明" class="headerlink" title="对象声明"></a>对象声明</h2><p><strong>单例模式</strong><br>在 object 关键字后跟一个名称，声明单例模式：<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">object</span> ApiClient &#123;</div><div class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">retrofit</span><span class="params">()</span></span>: ApiStores &#123;</div><div class="line">        <span class="comment">//……</span></div><div class="line">        <span class="keyword">return</span> retrofit.create(ApiStores::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>)</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>引用该对象：<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ApiClient.retrofit()</div></pre></td></tr></table></figure></p><p><strong>伴生对象</strong><br>使用 companion 关键字标记：<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ApiStores</span> </span>&#123;</div><div class="line">    <span class="keyword">companion</span> <span class="keyword">object</span> A &#123;</div><div class="line">        <span class="comment">//baseUrl</span></div><div class="line">        <span class="keyword">val</span> API_SERVER_URL = <span class="string">"http://www.weather.com.cn/"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>这样就能直接访问该伴生对象的成员：<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> url = ApiStores.API_SERVER_URL</div></pre></td></tr></table></figure></p><p>可以省略伴生对象的名称 A，伴生对象也适合接口。</p><h1 id="数据类"><a href="#数据类" class="headerlink" title="数据类"></a>数据类</h1><p>数据类提供了访问它们属性 getter 和 setter，toString()等：<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">WeatherinfoModel</span> <span class="keyword">constructor</span></span>(<span class="keyword">val</span> weatherinfo: WeatherinfoBean) &#123;</div><div class="line">    </div><div class="line">    <span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">WeatherinfoBean</span></span>(</div><div class="line">            <span class="keyword">val</span> city: String,</div><div class="line">            <span class="keyword">val</span> cityid: String</div><div class="line">    )</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>数据类必须满足以下要求：</p><p>1、主构造函数需要至少有一个参数；<br>2、主构造函数的所有参数需要标记为 val 或 var；<br>3、数据类不能是抽象、开放、密封或者内部的；<br>4、在 1.1 之前，数据类只能实现接口。</p><h2 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h2><p>在很多情况下，我们只需要改变一个对象某些属性，其余部分保持不变，这里可以用到数据类的 copy，以上面的 WeatherinfoModel 为例，Retrofit 请求成功，我有个回调：<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onSuccess</span><span class="params">(model: <span class="type">WeatherinfoModel</span>)</span></span> &#123;</div><div class="line">    Log.d(<span class="string">"wxl"</span>,model.toString())<span class="comment">//输出“WeatherinfoModel(weatherinfo=WeatherinfoBean(city=无锡, cityid=101190201))”</span></div><div class="line">    Log.d(<span class="string">"wxl"</span>, <span class="string">"city="</span> + model.weatherinfo.city + <span class="string">",cityid="</span> + model.weatherinfo.cityid)<span class="comment">//输出“city=无锡,cityid=101190201”</span></div><div class="line">    <span class="keyword">val</span> weatherinfoBean = model.weatherinfo.copy(city = <span class="string">"上海"</span>)</div><div class="line">    <span class="keyword">val</span> weatherinfoModel = WeatherinfoModel(weatherinfoBean)</div><div class="line">    Log.d(<span class="string">"wxl"</span>, <span class="string">"city1="</span> + weatherinfoModel.weatherinfo.city + <span class="string">",cityid1="</span> + weatherinfoModel.weatherinfo.cityid)<span class="comment">//输出“city1=上海,cityid1=101190201”</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h1 id="委托"><a href="#委托" class="headerlink" title="委托"></a>委托</h1><p>所谓委托模式 ，就是为其他对象提供一种代理以控制对这个对象的访问，在 Java 开发过程中，是继承模式之外的很好的解决问题的方案。<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Base</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">print</span><span class="params">()</span></span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>(<span class="keyword">val</span> a: <span class="built_in">Int</span>) : Base &#123;</div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">print</span><span class="params">()</span></span> &#123;</div><div class="line">        Log.d(<span class="string">"wxl"</span>, <span class="string">"a="</span> + a)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>(<span class="keyword">val</span> base: Base):Base <span class="keyword">by</span> base</div></pre></td></tr></table></figure></p><p>调用：<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> a = A(<span class="number">1</span>)</div><div class="line">Log.d(<span class="string">"wxl"</span>, <span class="string">"a="</span> + B(a).print())</div></pre></td></tr></table></figure></p><p>类 B 居然能调用类 A 方法，关键字 by 表示 base 将会在 B 中内部存储, 并且编译器将生成转发给 base 的所有 Base 的方法。</p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>其实看官方文档挺枯燥的，又有点云里雾里，当试着敲了一遍 Kotlin 版 Retrofit + RxJava，再回头看，有目标性，效率也是杠杠的。建议读者自己再仔细看看官方文档，这里的记录是我个人的理解，已经简化了，用作备忘。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;久等了，关于 Kotlin 的类和对象涉及的知识有点多，我又顺便练手写了 Kotlin 版 Retrofit +RxJava，近期整理一并分享出来。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;类&quot;&gt;&lt;a href=&quot;#类&quot; class=&quot;headerlink&quot; title=&quot;类&quot;&gt;&lt;/a&gt;类&lt;/h1&gt;&lt;p&gt;使用 &lt;strong&gt;class&lt;/strong&gt; 关键字声明类。&lt;br&gt;
    
    </summary>
    
      <category term="Kotlin" scheme="http://wuxiaolong.me/categories/Kotlin/"/>
    
    
      <category term="Kotlin" scheme="http://wuxiaolong.me/tags/Kotlin/"/>
    
  </entry>
  
  <entry>
    <title>Kotlin for Android（二）基础语法</title>
    <link href="http://wuxiaolong.me/2017/05/23/kotlin2/"/>
    <id>http://wuxiaolong.me/2017/05/23/kotlin2/</id>
    <published>2017-05-23T12:29:54.000Z</published>
    <updated>2017-06-01T08:03:34.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>通过这篇博客，让我们对 Kotlin 语法有个大概了解。</p></blockquote><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><p>变量有可变和不可变，可以用 var 和 val 声明。<br><a id="more"></a><br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> s = <span class="string">"Sample"</span> <span class="comment">// 自动推断出字符串</span></div><div class="line"><span class="keyword">val</span> i = <span class="number">23</span> <span class="comment">// 整型，立即赋值</span></div></pre></td></tr></table></figure></p><p>也可以指定类型：<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> s: String = <span class="string">"Sample"</span> <span class="comment">//指定String类型</span></div><div class="line"><span class="keyword">val</span> activity: Context = <span class="keyword">this</span></div></pre></td></tr></table></figure></p><p>可变变量：<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 自动推断出 `Int` 类型</span></div><div class="line"><span class="keyword">var</span> x = <span class="number">5</span> </div><div class="line">x += <span class="number">1</span></div></pre></td></tr></table></figure></p><p>不管变量是 var 还是 val 都要初始化值，这点没有 Java 好，但保证了空安全。</p><h1 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h1><h2 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h2><p>分别有Double、Float、Long、Int、Short、Byte 类型。</p><p>Kotlin没有隐式拓宽转换，如 Java 中 int 可以隐式转换为 long，必须要显式类型转换。<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> a: <span class="built_in">Double</span> = <span class="number">5.2</span></div><div class="line"><span class="keyword">val</span> b: <span class="built_in">Int</span> = a.toInt() <span class="comment">// 显式转换，b 等于 5</span></div><div class="line"><span class="keyword">val</span> c: <span class="built_in">Float</span> = <span class="number">5.2</span>F</div><div class="line"><span class="keyword">val</span> d: <span class="built_in">Int</span> = c.toInt()<span class="comment">// d 等于 5</span></div></pre></td></tr></table></figure></p><p>显式类型转换方法:<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">toByte(): <span class="built_in">Byte</span></div><div class="line">toShort(): <span class="built_in">Short</span></div><div class="line">toInt(): <span class="built_in">Int</span></div><div class="line">toLong(): <span class="built_in">Long</span></div><div class="line">toFloat(): <span class="built_in">Float</span></div><div class="line">toDouble(): <span class="built_in">Double</span></div><div class="line">toChar(): <span class="built_in">Char</span></div></pre></td></tr></table></figure></p><h2 id="字符"><a href="#字符" class="headerlink" title="字符"></a>字符</h2><p>使用 Char 类型表示。<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> e: <span class="built_in">Char</span> = <span class="string">'q'</span></div></pre></td></tr></table></figure></p><h2 id="布尔"><a href="#布尔" class="headerlink" title="布尔"></a>布尔</h2><p>使用 Boolean 类型表示，它有两个值：true 和 false。<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> f: <span class="built_in">Boolean</span> = <span class="literal">true</span></div></pre></td></tr></table></figure></p><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>使用 String 类型表示。<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> g: String = <span class="string">"Hello，Kotlin！"</span></div></pre></td></tr></table></figure></p><h2 id="字符串模板"><a href="#字符串模板" class="headerlink" title="字符串模板"></a>字符串模板</h2><p>字符串模板，可以包含一些小段代码，会把求值结果合并到字符串中。<br>模板表达式以美元符（$）开头：<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> h = <span class="string">"me"</span></div><div class="line"><span class="keyword">val</span> j = <span class="string">"it is <span class="variable">$h</span>"</span><span class="comment">// j 为“it is me”</span></div></pre></td></tr></table></figure></p><p>模板中的任意表达式，用大括号：<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> k = <span class="string">"h length is <span class="subst">$&#123;h.length&#125;</span>"</span><span class="comment">// h length is 2</span></div></pre></td></tr></table></figure></p><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>使用 Array 类来创建和操作数组，和 Java 区别很大，它定义了 get 和 set 函数，size 属性，以及一些其他有用的成员函数。</p><p>使用库函数 arrayOf() 来创建一个数组并传递元素值给它，如 arrayOf(1, 2, 3) 创建了 array[1, 2, 3]。</p><p>[] 可以用于访问数组的元素，实际上 [] 被进行了操作符的重载，调用的是 Array 类的 get 和 set 方法。</p><p>库函数 arrayOfNulls() 可以用于创建一个指定大小、元素都为空的数组。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//使用装箱操作，</span></div><div class="line"><span class="keyword">val</span> arr1 = arrayOf(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</div><div class="line"><span class="comment">//原生类型数组，还有 ByteArray、 ShortArray 等</span></div><div class="line"><span class="keyword">val</span> arr2: IntArray = intArrayOf(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</div><div class="line"></div><div class="line"><span class="comment">//直接指定长度</span></div><div class="line"><span class="keyword">val</span> arr3 = arrayOfNulls&lt;<span class="built_in">Int</span>&gt;(<span class="number">5</span>)</div><div class="line"></div><div class="line"><span class="comment">//长度为 0 的空数组</span></div><div class="line"><span class="keyword">val</span> empty = emptyArray&lt;<span class="built_in">Int</span>&gt;()</div><div class="line"></div><div class="line"><span class="comment">//访问数组元素</span></div><div class="line"><span class="keyword">val</span> arr4 = arrayOf(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</div><div class="line">println(arr4[<span class="number">1</span>])         <span class="comment">//输出“2”，建议用这个方法</span></div><div class="line">println(arr4.<span class="keyword">get</span>(<span class="number">1</span>))     <span class="comment">//输出“2”</span></div><div class="line"></div><div class="line"><span class="comment">//修改元素</span></div><div class="line">arr4[<span class="number">1</span>] = <span class="number">10</span></div><div class="line">println(arr4[<span class="number">1</span>])        <span class="comment">//输出“10”</span></div><div class="line"></div><div class="line"><span class="comment">//遍历数组</span></div><div class="line"><span class="keyword">for</span> (arr <span class="keyword">in</span> arr4) &#123;</div><div class="line">    println(arr)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//遍历数组下标</span></div><div class="line"><span class="keyword">for</span> (arr <span class="keyword">in</span> arr4.indices) &#123;</div><div class="line">    println(arr)</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="控制流"><a href="#控制流" class="headerlink" title="控制流"></a>控制流</h1><h2 id="If表达式"><a href="#If表达式" class="headerlink" title="If表达式"></a>If表达式</h2><p>用法和 Java 一样，Kotlin 里可以作为一个表达式，返回一个值。<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> l = <span class="number">4</span></div><div class="line"><span class="keyword">val</span> m = <span class="number">5</span></div><div class="line"><span class="comment">// 作为表达式</span></div><div class="line"><span class="keyword">val</span> n = <span class="keyword">if</span> (l &gt; m) l <span class="keyword">else</span> m</div></pre></td></tr></table></figure></p><h2 id="When-表达式"><a href="#When-表达式" class="headerlink" title="When 表达式"></a>When 表达式</h2><p>When 取代 Java switch 操作符。<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> o = <span class="number">3</span></div><div class="line"><span class="keyword">when</span> (o) &#123;</div><div class="line">    <span class="number">1</span> -&gt; print(<span class="string">"o == 1"</span>)</div><div class="line">    <span class="number">2</span> -&gt; print(<span class="string">"o == 2"</span>)</div><div class="line">    <span class="keyword">else</span> -&gt; &#123;</div><div class="line">        print(<span class="string">"o == 3"</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="For-循环"><a href="#For-循环" class="headerlink" title="For 循环"></a>For 循环</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> arr5 = arrayOf(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</div><div class="line"><span class="keyword">for</span> (arr <span class="keyword">in</span> arr5) &#123;</div><div class="line">    println(arr)</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="While-循环"><a href="#While-循环" class="headerlink" title="While 循环"></a>While 循环</h2><p>用法和 Java一样。</p><h1 id="函数声明"><a href="#函数声明" class="headerlink" title="函数声明"></a>函数声明</h1><p>使用 fun 关键字声明。<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//返回类型 Int</span></div><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">sum</span><span class="params">(p: <span class="type">Int</span>, q: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> &#123;</div><div class="line">    <span class="keyword">return</span> p + q</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//表达式作为返回值</span></div><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">sum</span><span class="params">(p: <span class="type">Int</span>, q: <span class="type">Int</span>)</span></span> = p + q</div><div class="line"></div><div class="line"><span class="comment">//函数返回无意义的值，相当于 Java 里的 void</span></div><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">sum</span><span class="params">(p: <span class="type">Int</span>, q: <span class="type">Int</span>)</span></span>: <span class="built_in">Unit</span>&#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//Unit 返回类型可以省略：</span></div><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">sum</span><span class="params">(p: <span class="type">Int</span>, q: <span class="type">Int</span>)</span></span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h1 id="空安全"><a href="#空安全" class="headerlink" title="空安全"></a>空安全</h1><p>问号表示该变量可以为空。<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</div><div class="line">        setContentView(R.layout.activity_main)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h1 id="定义类"><a href="#定义类" class="headerlink" title="定义类"></a>定义类</h1><p>使用 class 关键字声明类。<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//冒号表示继承</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> : <span class="type">AppCompatActivity</span></span>() &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;通过这篇博客，让我们对 Kotlin 语法有个大概了解。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;变量&quot;&gt;&lt;a href=&quot;#变量&quot; class=&quot;headerlink&quot; title=&quot;变量&quot;&gt;&lt;/a&gt;变量&lt;/h1&gt;&lt;p&gt;变量有可变和不可变，可以用 var 和 val 声明。&lt;br&gt;
    
    </summary>
    
      <category term="Kotlin" scheme="http://wuxiaolong.me/categories/Kotlin/"/>
    
    
      <category term="Kotlin" scheme="http://wuxiaolong.me/tags/Kotlin/"/>
    
  </entry>
  
  <entry>
    <title>Kotlin for Android（一）准备工作</title>
    <link href="http://wuxiaolong.me/2017/05/21/kotlin1/"/>
    <id>http://wuxiaolong.me/2017/05/21/kotlin1/</id>
    <published>2017-05-21T02:04:43.000Z</published>
    <updated>2018-10-15T14:00:18.221Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>从零开始，对比 Kotlin 与 Java，差异化学习 ，循序渐进。工欲善其事，必先利其器，有了 Kotlin 的 IDE，才能更好地进行下一步。</p></blockquote><h1 id="Kotlin是什么"><a href="#Kotlin是什么" class="headerlink" title="Kotlin是什么"></a>Kotlin是什么</h1><p>近日召开的 Google IO 2017 ， Google 将 Kotlin 列为 Android 官方开发语言了，Android Studio 3.0 也默认集成了 Kotlin plugin，那 Kotlin 是什么？<br><a id="more"></a></p><h2 id="维基百科"><a href="#维基百科" class="headerlink" title="维基百科"></a>维基百科</h2><p><strong>Kotlin</strong><br>Kotlin 是一种在 Java 虚拟机上运行的静态类型编程语言，它也可以被编译成为 JavaScript 源代码。它主要是由俄罗斯圣彼得堡的 JetBrains 开发团队所发展出来的编程语言，其名称来自于圣彼得堡附近的科特林岛。2012 年 1 月，著名期刊《 Dr. Dobb’s Journal 》中 Kotlin 被认定为该月的最佳语言。虽然与 Java 语法并不兼容，但 Kotlin 被设计成可以和 Java 代码相互运作，并可以重复使用如 Java 集合框架等的现有 Java 类库。</p><p><strong>历史</strong><br>2011 年 7 月，JetBrains 推出 Kotlin 项目，这是一个面向 JVM 的新语言，它已被开发一年之久。JetBrains 负责人Dmitry Jemerov 说，大多数语言没有他们正在寻找的特性，Scala 除外，他指出了 Scala 的编译时间慢这一明显缺陷。Kotlin 的既定目标之一是像 Java 一样快速编译。</p><p>2012 年 2 月，JetBrains 以 Apache 2 许可证开源此项目，Jetbrains 希望这个新语言能够推动 IntelliJ IDEA 的销售。</p><p>Kotlin v1.0 于 2016 年 2 月 15 日发布。这被认为是第一个官方稳定版本，并且 JetBrains 已准备从该版本开始的长期向后兼容性。</p><p>在 Google I/O 2017 中，Google 宣布在 Android 上为 Kotlin 提供支持。</p><h1 id="Kotlin-for-Android-Studio"><a href="#Kotlin-for-Android-Studio" class="headerlink" title="Kotlin for Android Studio"></a>Kotlin for Android Studio</h1><h2 id="安装-Kotlin-插件"><a href="#安装-Kotlin-插件" class="headerlink" title="安装 Kotlin 插件"></a>安装 Kotlin 插件</h2><p>Android Studio 3.0 已经有了 Kotlin 插件，目前 Android Studio 3.0还是预览版本，如果您是更早的版本，点击 Android Studio | File | Settings | Plugins，搜索 Kotlin ，安装，重启 Android Studio 。</p><h2 id="创建工程"><a href="#创建工程" class="headerlink" title="创建工程"></a>创建工程</h2><p>点击 Android Studio | File | New project :<br><img src="http://wuxiaolong.github.io/images/kotlin1.png" alt=""><br>这里 Android Studio 3.0 多个选项，后文会讲勾上了会有什么不一样，然后就是一路 Next 即可。</p><h2 id="Converting-Java-code-to-Kotlin"><a href="#Converting-Java-code-to-Kotlin" class="headerlink" title="Converting Java code to Kotlin"></a>Converting Java code to Kotlin</h2><p>打开 MainActivity.java， 点击菜单栏 Code | Convert Java File to Kotlin File ，这里可以将 Java 文件转成 Kotlin 文件，于是 MainActivity 变成了:<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//冒号表示继承</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> : <span class="type">AppCompatActivity</span></span>() &#123;</div><div class="line">    <span class="comment">//问号表示该变量可以为空</span></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</div><div class="line">        setContentView(R.layout.activity_main)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="Configure-Gradle"><a href="#Configure-Gradle" class="headerlink" title="Configure Gradle"></a>Configure Gradle</h2><p>如果您继续编辑，会有 Kotlin is not configured 提示，需要我们配置:<br><img src="http://wuxiaolong.github.io/images/kotlin2.png" alt=""><br>选择最新版本的 Kotlin ，点击 OK :<br><img src="http://wuxiaolong.github.io/images/kotlin3.png" alt=""></p><p>发现项目的 build.gradle 变化了:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">buildscript &#123;</div><div class="line">    ext.kotlin_version = <span class="string">'1.1.2-4'</span></div><div class="line">    repositories &#123;</div><div class="line">        jcenter()</div><div class="line">    &#125;</div><div class="line">    dependencies &#123;</div><div class="line">        <span class="comment">//……</span></div><div class="line">        <span class="comment">//编译 Kotlin 源代码和模块.</span></div><div class="line">        classpath <span class="string">"org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>app/build.gradle :<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">apply plugin: <span class="string">'com.android.application'</span></div><div class="line">apply plugin: <span class="string">'kotlin-android'</span></div><div class="line"></div><div class="line">android &#123;</div><div class="line">    <span class="comment">//……</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">dependencies &#123;</div><div class="line">    <span class="comment">//……</span></div><div class="line">    <span class="comment">//针对 JDK 7 或 JDK 8</span></div><div class="line">    compile <span class="string">"org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>说明: Android Studio 3.0 创建工程时，如果我们勾上了 Include Kotlin support ，这些 Kotlin Gradle 配置就已经有了。 </p><h2 id="创建-Kotlin-文件"><a href="#创建-Kotlin-文件" class="headerlink" title="创建 Kotlin 文件"></a>创建 Kotlin 文件</h2><p>Android Studio 3.0 以下:<br><img src="http://wuxiaolong.github.io/images/kotlin4.png" alt=""><br>New 的时候，发现已经有了这两个选项，但是 Android Studio 3.0 没有这个 Kotlin Activity 选项，而是在创建 Activity ，默认源码语言就是 Kotlin :<br><img src="http://wuxiaolong.github.io/images/kotlin5.png" alt=""><br>从 Android Studio 3.0 对 Kotlin 很好的支持，说明 Google 对 Kotlin 不是仅仅停留在口头上支持，有空我们就学学 Kotlin ，大势所趋，就像当初 Android Studio 一样。</p><h1 id="Kotlin-学习资料"><a href="#Kotlin-学习资料" class="headerlink" title="Kotlin 学习资料"></a>Kotlin 学习资料</h1><p>Kotlin 官方网站<br><a href="http://kotlinlang.org/docs/reference/" target="_blank" rel="noopener">http://kotlinlang.org/docs/reference/</a></p><p>Kotlin 官方网站 - 中文翻译<br><a href="https://www.kotlincn.net/docs/reference/" target="_blank" rel="noopener">https://www.kotlincn.net/docs/reference/</a></p><p>《Kotlin for android Developers》中文翻译<br><a href="https://www.gitbook.com/book/wangjiegulu/kotlin-for-android-developers-zh/details" target="_blank" rel="noopener">https://www.gitbook.com/book/wangjiegulu/kotlin-for-android-developers-zh/details</a></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>Getting started with Android and Kotlin<br><a href="https://www.kotlincn.net/docs/tutorials/kotlin-android.html" target="_blank" rel="noopener">https://www.kotlincn.net/docs/tutorials/kotlin-android.html</a></p><p>Get Started with Kotlin on Android<br><a href="https://developer.android.google.cn/kotlin/get-started.html" target="_blank" rel="noopener">https://developer.android.google.cn/kotlin/get-started.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;从零开始，对比 Kotlin 与 Java，差异化学习 ，循序渐进。工欲善其事，必先利其器，有了 Kotlin 的 IDE，才能更好地进行下一步。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;Kotlin是什么&quot;&gt;&lt;a href=&quot;#Kotlin是什么&quot; class=&quot;headerlink&quot; title=&quot;Kotlin是什么&quot;&gt;&lt;/a&gt;Kotlin是什么&lt;/h1&gt;&lt;p&gt;近日召开的 Google IO 2017 ， Google 将 Kotlin 列为 Android 官方开发语言了，Android Studio 3.0 也默认集成了 Kotlin plugin，那 Kotlin 是什么？&lt;br&gt;
    
    </summary>
    
      <category term="Kotlin" scheme="http://wuxiaolong.me/categories/Kotlin/"/>
    
    
      <category term="Kotlin" scheme="http://wuxiaolong.me/tags/Kotlin/"/>
    
  </entry>
  
  <entry>
    <title>Android 电量优化</title>
    <link href="http://wuxiaolong.me/2017/04/27/AndroidBattery/"/>
    <id>http://wuxiaolong.me/2017/04/27/AndroidBattery/</id>
    <published>2017-04-27T12:42:58.000Z</published>
    <updated>2017-11-27T12:48:29.672Z</updated>
    
    <content type="html"><![CDATA[<h1 id="为什么优化"><a href="#为什么优化" class="headerlink" title="为什么优化"></a>为什么优化</h1><p>现在智能手机基本能一天一充，如果一个应用耗电过多，肯定是有问题的，而开发中电量的优化可能是最容易被忽略的。</p><h1 id="如何检测"><a href="#如何检测" class="headerlink" title="如何检测"></a>如何检测</h1><p>1、手机设置-电池使用情况，查看电量消耗；</p><p>2、使用 <a href="https://github.com/google/battery-historianl" target="_blank" rel="noopener">Battery Historian</a> 配置电池使用情况。</p><h1 id="优化方案"><a href="#优化方案" class="headerlink" title="优化方案"></a>优化方案</h1><a id="more"></a><h2 id="监控充电状态和电池电量"><a href="#监控充电状态和电池电量" class="headerlink" title="监控充电状态和电池电量"></a>监控充电状态和电池电量</h2><h3 id="确定当前充电状态"><a href="#确定当前充电状态" class="headerlink" title="确定当前充电状态"></a>确定当前充电状态</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">IntentFilter ifilter = <span class="keyword">new</span> IntentFilter(Intent.ACTION_BATTERY_CHANGED);</div><div class="line">Intent batteryStatus = context.registerReceiver(<span class="keyword">null</span>, ifilter);</div></pre></td></tr></table></figure><p>简单地调用 registerReceiver 传入 null 作为接收器来注册 BroadcastReceiver，便可返回当前电池状态 Intent。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 充电状态</span></div><div class="line"><span class="keyword">int</span> status = batteryStatus.getIntExtra(BatteryManager.EXTRA_STATUS, -<span class="number">1</span>);</div><div class="line"><span class="keyword">boolean</span> isCharging = status == BatteryManager.BATTERY_STATUS_CHARGING ||</div><div class="line">        status == BatteryManager.BATTERY_STATUS_FULL;</div><div class="line">Log.d(<span class="string">"wxl"</span>, <span class="string">"isCharging="</span> + isCharging);</div><div class="line">Toast.makeText(<span class="keyword">this</span>,<span class="string">"isCharging="</span> + isCharging,Toast.LENGTH_LONG).show();</div><div class="line"><span class="comment">// 设备是通过 USB 还是交流充电器进行充电</span></div><div class="line"><span class="keyword">int</span> chargePlug = batteryStatus.getIntExtra(BatteryManager.EXTRA_PLUGGED, -<span class="number">1</span>);</div><div class="line"><span class="keyword">boolean</span> usbCharge = chargePlug == BatteryManager.BATTERY_PLUGGED_USB;</div><div class="line"><span class="keyword">boolean</span> acCharge = chargePlug == BatteryManager.BATTERY_PLUGGED_AC;</div><div class="line">Log.d(<span class="string">"wxl"</span>, <span class="string">"usbCharge="</span> + usbCharge + <span class="string">",acCharge="</span> + acCharge);</div><div class="line">Toast.makeText(<span class="keyword">this</span>,<span class="string">"usbCharge="</span> + usbCharge + <span class="string">",acCharge="</span> + acCharge,Toast.LENGTH_LONG).show();</div></pre></td></tr></table></figure></p><h3 id="监控充电状态变化"><a href="#监控充电状态变化" class="headerlink" title="监控充电状态变化"></a>监控充电状态变化</h3><p>清单文件中注册一个 BroadcastReceiver，通过在一个 Intent 过滤器内定义 ACTION_POWER_CONNECTED 和 ACTION_POWER_DISCONNECTED 来同时侦听这两种事件。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">receiver</span> <span class="attr">android:name</span>=<span class="string">".PowerConnectionReceiver"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.ACTION_POWER_CONNECTED"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.ACTION_POWER_DISCONNECTED"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">receiver</span>&gt;</span></div></pre></td></tr></table></figure></p><p>PowerConnectionReceiver<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PowerConnectionReceiver</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> status = intent.getIntExtra(BatteryManager.EXTRA_STATUS, BatteryManager.BATTERY_STATUS_UNKNOWN);</div><div class="line">        String batteryStatus = <span class="string">""</span>;</div><div class="line">        <span class="keyword">switch</span> (status) &#123;</div><div class="line">            <span class="keyword">case</span> BatteryManager.BATTERY_STATUS_CHARGING:</div><div class="line">                batteryStatus = <span class="string">"正在充电"</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> BatteryManager.BATTERY_STATUS_DISCHARGING:</div><div class="line">                batteryStatus = <span class="string">"正在放电"</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> BatteryManager.BATTERY_STATUS_NOT_CHARGING:</div><div class="line">                batteryStatus = <span class="string">"未充电"</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> BatteryManager.BATTERY_STATUS_FULL:</div><div class="line">                batteryStatus = <span class="string">"充满电"</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> BatteryManager.BATTERY_STATUS_UNKNOWN:</div><div class="line">                batteryStatus = <span class="string">"未知道状态"</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        Toast.makeText(context, <span class="string">"batteryStatus="</span> + batteryStatus, Toast.LENGTH_LONG).show();</div><div class="line"></div><div class="line">        <span class="keyword">int</span> plugged = intent.getIntExtra(BatteryManager.EXTRA_PLUGGED, BatteryManager.BATTERY_PLUGGED_AC);</div><div class="line">        String chargePlug = <span class="string">""</span>;</div><div class="line">        <span class="keyword">switch</span> (plugged) &#123;</div><div class="line">            <span class="keyword">case</span> BatteryManager.BATTERY_PLUGGED_AC:</div><div class="line">                chargePlug = <span class="string">"AC充电"</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> BatteryManager.BATTERY_PLUGGED_USB:</div><div class="line">                chargePlug = <span class="string">"USB充电"</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> BatteryManager.BATTERY_PLUGGED_WIRELESS:</div><div class="line">                chargePlug = <span class="string">"无线充电"</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        Toast.makeText(context, <span class="string">"chargePlug="</span> + chargePlug, Toast.LENGTH_LONG).show();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>注册<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">IntentFilter intentFilter = <span class="keyword">new</span> IntentFilter();</div><div class="line">intentFilter.addAction(Intent.ACTION_BATTERY_CHANGED);</div><div class="line"><span class="keyword">this</span>.registerReceiver(<span class="keyword">new</span> PowerConnectionReceiver(), intentFilter);</div></pre></td></tr></table></figure></p><h3 id="监控电池电量变化"><a href="#监控电池电量变化" class="headerlink" title="监控电池电量变化"></a>监控电池电量变化</h3><p>清单文件中注册一个 BroadcastReceiver，通过侦听 ACTION_BATTERY_LOW 和 ACTION_BATTERY_OKAY，每当设备电池电量不足或退出不足状态时，便会触发该接收器。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">receiver</span> <span class="attr">android:name</span>=<span class="string">".BatteryLevelReceiver"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.ACTION_BATTERY_LOW"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.ACTION_BATTERY_OKAY"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">receiver</span>&gt;</span></div></pre></td></tr></table></figure></p><p>BatteryLevelReceiver<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BatteryLevelReceiver</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</div><div class="line">        <span class="comment">//当前剩余电量</span></div><div class="line">        <span class="keyword">int</span> level = intent.getIntExtra(BatteryManager.EXTRA_LEVEL, -<span class="number">1</span>);</div><div class="line">        <span class="comment">//电量最大值</span></div><div class="line">        <span class="keyword">int</span> scale = intent.getIntExtra(BatteryManager.EXTRA_SCALE, -<span class="number">1</span>);</div><div class="line">        <span class="comment">//电量百分比</span></div><div class="line">        <span class="keyword">float</span> batteryPct = level / (<span class="keyword">float</span>) scale;</div><div class="line">        Log.d(<span class="string">"wxl"</span>, <span class="string">"batteryPct="</span> + batteryPct);</div><div class="line">        Toast.makeText(context, <span class="string">"batteryPct="</span> + batteryPct, Toast.LENGTH_LONG).show();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>注册<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">IntentFilter intentFilter = <span class="keyword">new</span> IntentFilter();</div><div class="line">intentFilter.addAction(Intent.ACTION_BATTERY_CHANGED);</div><div class="line"><span class="keyword">this</span>.registerReceiver(<span class="keyword">new</span> BatteryLevelReceiver(), intentFilter);</div></pre></td></tr></table></figure></p><p>通常，如果设备连接了交流充电器，您应该最大限度提高后台更新的频率；而如果设备是通过 USB 充电，则应降低更新频率，如果电池正在放电，则应进一步降低更新频率；在电池电量极低时停用所有后台更新。</p><h2 id="屏幕保持常亮"><a href="#屏幕保持常亮" class="headerlink" title="屏幕保持常亮"></a>屏幕保持常亮</h2><p>当设备从休眠状态中，被应用程序唤醒一瞬间会耗电过多，我们可以保持屏幕常亮来节省电量，代码声明：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//屏幕保持常亮</span></div><div class="line">getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);</div><div class="line"><span class="comment">//一般不需要人为的去掉 FLAG_KEEP_SCREEN_ON 的 flag，windowManager 会管理好程序进入后台回到前台的的操作</span></div><div class="line"><span class="comment">//getWindow().clearFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);</span></div></pre></td></tr></table></figure></p><p>或者，直接在布局中加上 keepScreenOn=true ：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">android.support.constraint.ConstraintLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:keepScreenOn</span>=<span class="string">"true"</span></div><div class="line">    <span class="attr">tools:context</span>=<span class="string">"com.wuxiaolong.batterysample.MainActivity"</span>&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">android.support.constraint.ConstraintLayout</span>&gt;</span></div></pre></td></tr></table></figure></p><h2 id="JobScheduler-使用"><a href="#JobScheduler-使用" class="headerlink" title="JobScheduler 使用"></a>JobScheduler 使用</h2><p>需要在稍后的某个时间点或者当满足某个特定的条件时执行一个任务，例如当设备接通电源适配器或者连接到 WIFI，在 API 21，google 提供了一个新叫做 JobScheduler API 的组件来处理这样的场景。JobScheduler API 允许同时执行多个任务，执行某些指定的任务时不需要考虑时机控制引起的电池消耗。<br>官方 demo 地址：<a href="https://github.com/googlesamples/android-JobScheduler" target="_blank" rel="noopener">https://github.com/googlesamples/android-JobScheduler</a></p><h2 id="低电耗模式和应用待机模式"><a href="#低电耗模式和应用待机模式" class="headerlink" title="低电耗模式和应用待机模式"></a>低电耗模式和应用待机模式</h2><p>从 Android 6.0（API 级别 23）开始，Android 引入了两个省电功能，可通过管理应用在设备未连接至电源时的行为方式为用户延长电池寿命。低电耗模式通过在设备长时间处于闲置状态时推迟应用的后台 CPU 和网络 Activity 来减少电池消耗。应用待机模式可推迟用户近期未与之交互的应用的后台网络 Activity。</p><h3 id="低电耗模式"><a href="#低电耗模式" class="headerlink" title="低电耗模式"></a>低电耗模式</h3><p>如果用户设备未插接电源、处于静止状态一段时间且屏幕关闭，设备会进入低电耗模式。 在低电耗模式下，系统会尝试通过限制应用对网络和 CPU 密集型服务的访问来节省电量。这还可以阻止应用访问网络并推迟其作业、同步和标准闹铃。</p><p>在低电耗模式下，您的应用会受到以下限制：</p><ul><li>暂停访问网络。</li><li>系统将忽略 wake locks。</li><li>标准 AlarmManager 闹铃（包括 setExact() 和 setWindow()）推迟到下一维护时段。<ul><li>如果您需要设置在低电耗模式下触发的闹铃，请使用 setAndAllowWhileIdle() 或 setExactAndAllowWhileIdle()。</li><li>一般情况下，使用 setAlarmClock() 设置的闹铃将继续触发 — 但系统会在这些闹铃触发之前不久退出低电耗模式。</li></ul></li><li>系统不执行 Wi-Fi 扫描。</li><li>系统不允许运行同步适配器。</li><li>系统不允许运行 JobScheduler。</li></ul><p>低电耗模式很容易影响 AlarmManager 闹铃和定时器管理的 Activity，因为当系统处于低电耗模式时，不会触发 Android 5.1（API 级别 22）或更低版本中的闹铃。</p><p>为了帮助您安排闹铃，Android 6.0（API 级别 23）引入了两种新的 AlarmManager 方法：setAndAllowWhileIdle() 和 setExactAndAllowWhileIdle()。通过这些方法，您可以设置即使设备处于低电耗模式也会触发的闹铃。</p><h3 id="应用待机模式"><a href="#应用待机模式" class="headerlink" title="应用待机模式"></a>应用待机模式</h3><p>应用待机模式允许系统判定应用在用户未主动使用它时处于空闲状态。 当用户有一段时间未触摸应用时，系统便会作出此判定，以下条件均不适用：</p><ul><li>用户显式启动应用。</li><li>应用当前有一个进程位于前台（表现为 Activity 或前台服务形式，或被另一 Activity 或前台服务占用）。</li><li>应用生成用户可在锁屏或通知托盘中看到的通知。</li></ul><p>当用户将设备插入电源时，系统将从待机状态释放应用，从而让它们可以自由访问网络并执行任何待定作业和同步。 如果设备长时间处于空闲状态，系统将按每天大约一次的频率允许空闲应用访问网络。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://developer.android.google.cn/training/monitoring-device-state/index.html" target="_blank" rel="noopener">https://developer.android.google.cn/training/monitoring-device-state/index.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;为什么优化&quot;&gt;&lt;a href=&quot;#为什么优化&quot; class=&quot;headerlink&quot; title=&quot;为什么优化&quot;&gt;&lt;/a&gt;为什么优化&lt;/h1&gt;&lt;p&gt;现在智能手机基本能一天一充，如果一个应用耗电过多，肯定是有问题的，而开发中电量的优化可能是最容易被忽略的。&lt;/p&gt;
&lt;h1 id=&quot;如何检测&quot;&gt;&lt;a href=&quot;#如何检测&quot; class=&quot;headerlink&quot; title=&quot;如何检测&quot;&gt;&lt;/a&gt;如何检测&lt;/h1&gt;&lt;p&gt;1、手机设置-电池使用情况，查看电量消耗；&lt;/p&gt;
&lt;p&gt;2、使用 &lt;a href=&quot;https://github.com/google/battery-historianl&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Battery Historian&lt;/a&gt; 配置电池使用情况。&lt;/p&gt;
&lt;h1 id=&quot;优化方案&quot;&gt;&lt;a href=&quot;#优化方案&quot; class=&quot;headerlink&quot; title=&quot;优化方案&quot;&gt;&lt;/a&gt;优化方案&lt;/h1&gt;
    
    </summary>
    
      <category term="Performance" scheme="http://wuxiaolong.me/categories/Performance/"/>
    
    
      <category term="Battery" scheme="http://wuxiaolong.me/tags/Battery/"/>
    
  </entry>
  
  <entry>
    <title>Android 内存优化</title>
    <link href="http://wuxiaolong.me/2017/04/15/memory/"/>
    <id>http://wuxiaolong.me/2017/04/15/memory/</id>
    <published>2017-04-15T14:01:28.000Z</published>
    <updated>2017-04-16T12:46:50.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="为什么优化"><a href="#为什么优化" class="headerlink" title="为什么优化"></a>为什么优化</h1><p>虽然 Java 对内存的释放有垃圾自动回收机制，但是实际开发中，不再用到的对象因为被错误引用会导致无法回收，从而造成内存泄漏，甚至内存溢出 OOM（OutOfMemory），程序崩溃。<br><a id="more"></a></p><h2 id="Android-GC-原理"><a href="#Android-GC-原理" class="headerlink" title="Android GC 原理"></a>Android GC 原理</h2><p>参考：<a href="https://mp.weixin.qq.com/s/CUU3Ml394H_fkabhNNX32Q" target="_blank" rel="noopener">Android GC 原理探究</a></p><h2 id="Android-内存管理"><a href="#Android-内存管理" class="headerlink" title="Android 内存管理"></a>Android 内存管理</h2><p>参考：<a href="https://developer.android.google.cn/topic/performance/memory-overview.html" target="_blank" rel="noopener">Android 内存管理</a></p><h1 id="如何检测"><a href="#如何检测" class="headerlink" title="如何检测"></a>如何检测</h1><h2 id="使用-LeakCanary"><a href="#使用-LeakCanary" class="headerlink" title="使用 LeakCanary"></a>使用 LeakCanary</h2><p>Android 内存泄漏检测库：<a href="https://github.com/square/leakcanary" target="_blank" rel="noopener">https://github.com/square/leakcanary</a> ，善于使用 LeakCanary 发现内存泄漏。</p><h2 id="Memory-Monitor工具"><a href="#Memory-Monitor工具" class="headerlink" title="Memory Monitor工具"></a>Memory Monitor工具</h2><p>Android Studio 中的 Android Monitor ，选择其中的 Memory，<strong>跟踪整个 APP 的内存变化情况</strong>。<br>步骤如下：<br>1、与您的应用交互，在 Memory 监视器中，查看 Free 和 Alloated 内存。<br>2、点击 Dump Java Heap：<img src="http://7q5c2h.com1.z0.glb.clouddn.com/monitor-heap-dump.png" alt="">，这个会打开 HPROF 查看器，如果没有，在 Captures 标签中，双击堆快照文件以打开 HPROF 查看器。<br>3、要引起堆分配，请与您的应用交互，然后点击触发 GC 的按钮： <img src="http://7q5c2h.com1.z0.glb.clouddn.com/monitor-garbage-collect.png" alt=""></p><h2 id="Heap-Viewer-工具"><a href="#Heap-Viewer-工具" class="headerlink" title="Heap Viewer 工具"></a>Heap Viewer 工具</h2><p><strong>实时查看App分配的内存大小和空闲内存大小，发现 Memory Leaks</strong> 。<br>详细使用教程：<a href="https://www.kancloud.cn/digest/itfootballprefermanc/100907" target="_blank" rel="noopener">Heap Viewer工具</a></p><h2 id="Allocation-Tracker"><a href="#Allocation-Tracker" class="headerlink" title="Allocation Tracker"></a>Allocation Tracker</h2><p><strong>追踪内存对象的来源</strong>。<br>详细使用教程：<a href="https://www.kancloud.cn/digest/itfootballprefermanc/100908" target="_blank" rel="noopener">Allocation Tracker(Device Monitor)</a></p><h1 id="优化方案"><a href="#优化方案" class="headerlink" title="优化方案"></a>优化方案</h1><h2 id="检查使用多少内存"><a href="#检查使用多少内存" class="headerlink" title="检查使用多少内存"></a>检查使用多少内存</h2><p>每个 APP 的堆（heap）内存大小有硬性限制，如果您的 APP 已达到堆内存限制，并尝试分配更多的内存，系统会抛出 OutOfMemoryError 。为了避免 OOM ，您可以查询当前设备有多少堆空间，可以通过调用系统 getMemoryInfo() 查询，返回 一个ActivityManager.MemoryInfo 对象，它提供该设备当前存储器的状态信息，包括可用的存储器，总存储器，和低于该阈值存储器。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">getMemoryInfo</span><span class="params">()</span> </span>&#123;</div><div class="line">    ActivityManager activityManager = (ActivityManager) <span class="keyword">this</span>.getSystemService(ACTIVITY_SERVICE);</div><div class="line">    ActivityManager.MemoryInfo memoryInfo = <span class="keyword">new</span> ActivityManager.MemoryInfo();</div><div class="line">    activityManager.getMemoryInfo(memoryInfo);</div><div class="line">    LogUtil.d(<span class="string">"totalMem="</span> + memoryInfo.totalMem + <span class="string">",availMem="</span> + memoryInfo.availMem);</div><div class="line">    <span class="keyword">if</span> (!memoryInfo.lowMemory) &#123;</div><div class="line">        <span class="comment">// 运行在低内存环境</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="当界面不可见时释放内存"><a href="#当界面不可见时释放内存" class="headerlink" title="当界面不可见时释放内存"></a>当界面不可见时释放内存</h2><p>实现 <a href="https://developer.android.google.cn/reference/android/content/ComponentCallbacks2.html" target="_blank" rel="noopener">ComponentCallbacks2</a> API 中 <a href="https://developer.android.google.cn/reference/android/content/ComponentCallbacks2.html#onTrimMemory(int" target="_blank" rel="noopener">onTrimMemory()</a>) ，当回调参数 level 为 TRIM_MEMORY_UI_HIDDEN ，是用户点击了Home键或者Back键退出应用，所有UI界面被隐藏，这时候应该释放一些不可见的时候非必须的资源。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span></span></div><div class="line">    <span class="keyword">implements</span> <span class="title">ComponentCallbacks2</span> &#123;</div><div class="line">    <span class="comment">// Other activity code ...</span></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Release memory when the UI becomes hidden or when system resources become low.</div><div class="line">     * <span class="doctag">@param</span> level the memory-related event that was raised.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onTrimMemory</span><span class="params">(<span class="keyword">int</span> level)</span> </span>&#123;</div><div class="line">        <span class="comment">// Determine which lifecycle or system event was raised.</span></div><div class="line">        <span class="keyword">switch</span> (level) &#123;</div><div class="line">            <span class="keyword">case</span> ComponentCallbacks2.TRIM_MEMORY_UI_HIDDEN:</div><div class="line">                <span class="comment">/*</span></div><div class="line">                   Release any UI objects that currently hold memory.</div><div class="line">                   The user interface has moved to the background.</div><div class="line">                */</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> ComponentCallbacks2.TRIM_MEMORY_RUNNING_MODERATE:</div><div class="line">            <span class="keyword">case</span> ComponentCallbacks2.TRIM_MEMORY_RUNNING_LOW:</div><div class="line">            <span class="keyword">case</span> ComponentCallbacks2.TRIM_MEMORY_RUNNING_CRITICAL:</div><div class="line">                <span class="comment">/*</span></div><div class="line">                   Release any memory that your app doesn't need to run.</div><div class="line">                   The device is running low on memory while the app is running.</div><div class="line">                   The event raised indicates the severity of the memory-related event.</div><div class="line">                   If the event is TRIM_MEMORY_RUNNING_CRITICAL, then the system will</div><div class="line">                   begin killing background processes.</div><div class="line">                */</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> ComponentCallbacks2.TRIM_MEMORY_BACKGROUND:</div><div class="line">            <span class="keyword">case</span> ComponentCallbacks2.TRIM_MEMORY_MODERATE:</div><div class="line">            <span class="keyword">case</span> ComponentCallbacks2.TRIM_MEMORY_COMPLETE:</div><div class="line">                <span class="comment">/*</span></div><div class="line">                   Release as much memory as the process can.</div><div class="line">                   The app is on the LRU list and the system is running low on memory.</div><div class="line">                   The event raised indicates where the app sits within the LRU list.</div><div class="line">                   If the event is TRIM_MEMORY_COMPLETE, the process will be one of</div><div class="line">                   the first to be terminated.</div><div class="line">                */</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">default</span>:</div><div class="line">                <span class="comment">/*</span></div><div class="line">                  Release any non-critical data structures.</div><div class="line">                  The app received an unrecognized memory level value</div><div class="line">                  from the system. Treat this as a generic low-memory message.</div><div class="line">                */</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>该 onTrimMemory() 回调是在搭载Android 4.0（API级别14）加入。对于早期版本，您可以使用 onLowMemory() 回调作为旧版本的回调，这大致相当于 TRIM_MEMORY_COMPLETE事件。</p><h2 id="谨慎使用服务"><a href="#谨慎使用服务" class="headerlink" title="谨慎使用服务"></a>谨慎使用服务</h2><p>离开了 APP 还在运行服务是最糟糕的内存管理错误之一，当 APP 处在后台，我们应该停止服务，除非它需要运行的任务。我们可以使用 <a href="https://developer.android.google.cn/topic/performance/background-optimization.html" target="_blank" rel="noopener">JobScheduler</a> 替代实现，<a href="https://developer.android.google.cn/topic/performance/background-optimization.html" target="_blank" rel="noopener">JobScheduler</a> 把一些不是特别紧急的任务放到更合适的时机批量处理。如果必须使用一个服务，最佳方法是使用 <a href="https://developer.android.google.cn/training/run-background-service/index.html" target="_blank" rel="noopener">IntentService</a> ，限制服务寿命，所有请求处理完成后，IntentService 会自动停止。</p><h2 id="使用优化的数据容器"><a href="#使用优化的数据容器" class="headerlink" title="使用优化的数据容器"></a>使用优化的数据容器</h2><p>考虑使用优化过数据的容器 SparseArray / SparseBooleanArray / LongSparseArray 代替 HashMap 等传统数据结构，通用 HashMap 的实现可以说是相当低效的内存，因为它需要为每个映射一个单独的条目对象。</p><h2 id="避免在-Android-上使用枚举"><a href="#避免在-Android-上使用枚举" class="headerlink" title="避免在 Android 上使用枚举"></a>避免在 Android 上使用枚举</h2><p>枚举往往需要两倍多的内存，静态常量更多，我们应该严格避免在 Android 上使用枚举。</p><h2 id="使用-nano-protobufs-序列化数据"><a href="#使用-nano-protobufs-序列化数据" class="headerlink" title="使用 nano protobufs 序列化数据"></a>使用 nano protobufs 序列化数据</h2><p>Protocol buffers 是一个语言中立，平台中立的，可扩展的机制，由谷歌进行序列化结构化数据，类似于 XML 设计的，但是更小，更快，更简单。如果需要为您的数据序列化与协议化，建议使用 nano protobufs。</p><h2 id="避免内存流失"><a href="#避免内存流失" class="headerlink" title="避免内存流失"></a>避免内存流失</h2><p>内存流失可能会导致出现大量的 GC 事件，如自定义组件的 onDraw() ，避免大量创建临时对象，比如 String ，以免频繁触发 GC。GC 事件通常不影响您的 APP 的性能，然而在很短的时间段，发生许多垃圾收集事件可以快速地吃了您的帧时间，系统上时间的都花费在 GC ，就有很少时间做其他的东西像渲染或音频流。</p><h2 id="使用ProGuard来剔除不需要的代码"><a href="#使用ProGuard来剔除不需要的代码" class="headerlink" title="使用ProGuard来剔除不需要的代码"></a>使用ProGuard来剔除不需要的代码</h2><p>使用 ProGuard 来剔除不需要的代码，移除任何冗余的，不必要的，或臃肿的组件，资源或库完善 APP 的内存消耗。</p><h2 id="降低整体尺寸APK"><a href="#降低整体尺寸APK" class="headerlink" title="降低整体尺寸APK"></a>降低整体尺寸APK</h2><p>您可以通过减少 APP 的整体规模显著减少 APP 的内存使用情况。文章：<a href="http://wuxiaolong.me/2017/03/19/ReduceAPKSize/">Android APK瘦身实践</a></p><h2 id="优化布局层次"><a href="#优化布局层次" class="headerlink" title="优化布局层次"></a>优化布局层次</h2><p>通过优化视图层次结构，以减少重叠的 UI 对象的数量来提高性能。文章：<a href="http://wuxiaolong.me/2017/03/26/Rendering/">Android 渲染优化</a></p><h2 id="使用-Dagger-2依赖注入"><a href="#使用-Dagger-2依赖注入" class="headerlink" title="使用 Dagger 2依赖注入"></a>使用 Dagger 2依赖注入</h2><p>依赖注入框架可以简化您写的代码，并提供一个自适应环境测试和便于其他配置的更改。如果打算在您的 APP 使用依赖注入框架，可以考虑用 Dagger 2 ，Dagger 不使用反射扫描 APP 的代码，Dagger 是静态的，意味着它编译时不需要占用运行 Android 应用或内存的使用。</p><h2 id="请小心使用外部库"><a href="#请小心使用外部库" class="headerlink" title="请小心使用外部库"></a>请小心使用外部库</h2><p>外部库的代码往往是未针对移动环境下编写并用于工作在移动客户端上时，可能是低效的。当您决定使用外部库，您可能需要优化该库为移动设备。</p><h2 id="避免Bitmap浪费"><a href="#避免Bitmap浪费" class="headerlink" title="避免Bitmap浪费"></a>避免Bitmap浪费</h2><p>Bitmap是内存消耗的大头，当使用时要及时回收。另外配置：<br>inSampleSize：缩放比例，图片按需加载，避免不必要的大图载入。<br>decode format：解码格式，选择ARGB_8888/RBG_565/ARGB_4444/ALPHA_8，存在很大差异。</p><h2 id="Cursor关闭"><a href="#Cursor关闭" class="headerlink" title="Cursor关闭"></a>Cursor关闭</h2><p>如查询数据库的操作，使用到Cursor，也要对Cursor对象及时关闭。</p><h2 id="监听器的注销"><a href="#监听器的注销" class="headerlink" title="监听器的注销"></a>监听器的注销</h2><p>Android程序里面存在很多需要register与unregister的监听器，手动add的listener，需要记得及时remove这个listener。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://developer.android.google.cn/topic/performance/memory-overview.html" target="_blank" rel="noopener">官网Overview of Android Memory Management</a></p><p><a href="https://developer.android.google.cn/topic/performance/memory.html" target="_blank" rel="noopener">官网Manage Your App’s Memory</a></p><p><a href="http://hukai.me/android-performance-oom/" target="_blank" rel="noopener">Android内存优化之OOM</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;为什么优化&quot;&gt;&lt;a href=&quot;#为什么优化&quot; class=&quot;headerlink&quot; title=&quot;为什么优化&quot;&gt;&lt;/a&gt;为什么优化&lt;/h1&gt;&lt;p&gt;虽然 Java 对内存的释放有垃圾自动回收机制，但是实际开发中，不再用到的对象因为被错误引用会导致无法回收，从而造成内存泄漏，甚至内存溢出 OOM（OutOfMemory），程序崩溃。&lt;br&gt;
    
    </summary>
    
      <category term="Performance" scheme="http://wuxiaolong.me/categories/Performance/"/>
    
    
      <category term="memory" scheme="http://wuxiaolong.me/tags/memory/"/>
    
  </entry>
  
</feed>
